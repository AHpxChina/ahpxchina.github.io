{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/aero-dual/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/css/style.dark.styl","path":"css/style.dark.styl","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/css/style.light.styl","path":"css/style.light.styl","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/aero-dual-color-change.jpg","path":"img/aero-dual-color-change.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/aero-dual-thumbnail.jpg","path":"img/aero-dual-thumbnail.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/default-banner-dark.jpg","path":"img/default-banner-dark.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/default-banner-light.jpg","path":"img/default-banner-light.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/last_sunsetting_2021.png","path":"img/last_sunsetting_2021.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/Works/index.md","hash":"b51a588ead178a32efd3179ac44b351b78dbb9e2","modified":1649860629491},{"_id":"source/About/index.md","hash":"010c13e13e1106d51f1b7518f7e6616c3334a5e0","modified":1649860629491},{"_id":"source/_posts/Hello-World-0.md","hash":"4992a9f72096fe7c986be0231ccea194c27ed4be","modified":1649863937729},{"_id":"themes/minima/.gitignore","hash":"824c6bad36ef799350c37bcd0fe5a1a88295d2f8","modified":1649860629492},{"_id":"themes/minima/LICENSE","hash":"d31e0df078ff6f9bc2923196d9aae1cd50516159","modified":1649860629492},{"_id":"themes/minima/README.md","hash":"4dbaa7bb7697a0e984450c1497ad949f3165da9d","modified":1649860629492},{"_id":"themes/minima/_config.yml","hash":"477cc20abd2031c844bdb166ca612c9f144dc57d","modified":1649860629492},{"_id":"themes/minima/layout/archive.ejs","hash":"3ba1f33ed739039930b987b4c0f0977a46d63310","modified":1649860629492},{"_id":"themes/minima/layout/index.ejs","hash":"7727731d02313066a91a6b942d07065447ba01cb","modified":1649860629492},{"_id":"themes/minima/layout/layout.ejs","hash":"7362dec846b67d65bc01f36fa1765cfdf05a3603","modified":1649860629492},{"_id":"themes/minima/layout/page.ejs","hash":"ba59ed3ac4edd762029b31686f2d3b60ef7b943d","modified":1649860629492},{"_id":"themes/minima/layout/post.ejs","hash":"4ee26327a088fc043c5c8bfc3a4d44f4155364cb","modified":1649860629493},{"_id":"themes/minima/layout/tag.ejs","hash":"c3a378abd79bc5d7b42af801845055e141e80fa1","modified":1649860629493},{"_id":"themes/minima/layout/partial/comments.ejs","hash":"827bced78b4ef972d1b70e4cb5b5171da6b0ed35","modified":1649860629493},{"_id":"themes/minima/layout/partial/footer.ejs","hash":"0ea4fb13acad44e52c74c5778f0e966c6cadee51","modified":1649860629493},{"_id":"themes/minima/layout/partial/header.ejs","hash":"9760ae03ba19b925e5c88d0012e45fc876a18598","modified":1649860629493},{"_id":"themes/minima/layout/partial/google_analytics.ejs","hash":"0f9b2ebd8053e33c2a11976290dca5012f44cd46","modified":1649860629493},{"_id":"themes/minima/layout/partial/pagination.ejs","hash":"bce484c6ec05b3120c1aba49b64cd00b7a0afb2b","modified":1649860629493},{"_id":"themes/minima/layout/partial/tcolor.ejs","hash":"badfacb7abd8ab2e4732777177526a63b9b776f3","modified":1649860629493},{"_id":"themes/minima/source/css/custom.css","hash":"4def307c74d53452191e01241fdaffb69204606c","modified":1649860629493},{"_id":"themes/minima/source/css/normalize.css","hash":"dd1976308129df19afb1a0dfdc9cc5d2aee7aec2","modified":1649860629493},{"_id":"themes/minima/source/css/prism-dark.css","hash":"6eae920ef9ee996f71a88bf2725e6e385d3e8b79","modified":1649860629493},{"_id":"themes/minima/source/css/prism-line-numbers.css","hash":"c632c3fa3fd97d05a0f74c6a87e1e93ee60ee57f","modified":1649860629494},{"_id":"themes/minima/source/css/skeleton.css","hash":"46633c4f03fc8de882077a141775a83f2dd6acc0","modified":1649860629494},{"_id":"themes/minima/source/images/favicon.png","hash":"7d18666e5a8455f4367b240425d617cf93966e10","modified":1630072622618},{"_id":"themes/minima/source/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1630072622619},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1630072622609},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1630072622611},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1630072622611},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1630072622612},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1630072622613},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.svg","hash":"ca639a580d3dd7c1a023d489cd818af95883b52b","modified":1649860629496},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1630072622614},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1630072622615},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1630072622615},{"_id":"themes/minima/source/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1630072622619},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.svg","hash":"b650647a506978c3617a12cb50ba3c4c596ee6e7","modified":1649860629495},{"_id":"themes/minima/source/images/epic-smiley.jpg","hash":"11102caf25def291217235fe403c15e9fd40f9e3","modified":1630072622617},{"_id":"source/_posts/How to build a document website via Vuepress.md","hash":"c355b3e6cf8e86624c6a81445b09b4b1eb23d2d0","modified":1649860629491},{"_id":"source/_posts/How to fix the problem that process.Exited handler will not execute.md","hash":"a586596156437901149dc84987f3cbc2b6160539","modified":1649860629491},{"_id":"source/_posts/Packing fat jar with Kotlin Gradle DSL script.md","hash":"db9defebb51d9b79c95fa831673f90013597e06b","modified":1649860629492},{"_id":"source/_posts/动态转换json为C#对象.md","hash":"c271da1b89a30b7bf9827243695b5724eb606f19","modified":1649860827796},{"_id":"public/Works/index.html","hash":"ea9b2aa0d42a50c1bdae863d4c7c52c8f6c16f16","modified":1649860957296},{"_id":"public/About/index.html","hash":"eaf8a82080ed36578ae77092b54fd527d74154ee","modified":1649860957296},{"_id":"public/2021/08/27/How to fix the problem that process.Exited handler will not execute/index.html","hash":"8f1d0f5c529a5d607007b44060b49beb728a1820","modified":1649863870642},{"_id":"public/2021/08/27/Packing fat jar with Kotlin Gradle DSL script/index.html","hash":"25223235c1db25efb7d6d376332a2d06d6808ec2","modified":1649863870642},{"_id":"public/2021/08/27/动态转换json为C#对象/index.html","hash":"b393052985ace732fe650f31a40728e49ae5a7aa","modified":1649860957296},{"_id":"public/2021/03/31/Hello-World-0/index.html","hash":"78dfaf3cf1e80b12cb49ddd231ab5ea55a72ba3e","modified":1649863870642},{"_id":"public/archives/index.html","hash":"e6ddcd6c281d31ad91c03f15f59929388010bb18","modified":1649863870642},{"_id":"public/archives/2021/index.html","hash":"e6ddcd6c281d31ad91c03f15f59929388010bb18","modified":1649863870642},{"_id":"public/archives/2021/03/index.html","hash":"f1337f402a0ec4d67f4c9d109a507c39b77af89d","modified":1649863870642},{"_id":"public/archives/2021/08/index.html","hash":"c2b39b545f8773fd8323b393b0578388445e2c18","modified":1649863870642},{"_id":"public/index.html","hash":"74025573e58bd116e7b6c555272dec0b5574aca4","modified":1649863870642},{"_id":"public/tags/Test/index.html","hash":"f1337f402a0ec4d67f4c9d109a507c39b77af89d","modified":1649863870642},{"_id":"public/tags/Web/index.html","hash":"b0b48a23e6d5a51930886925028bfaa5a22af110","modified":1649863870642},{"_id":"public/tags/Kotlin/index.html","hash":"bf0d3e1adc057352a8eb888080c31607df84b216","modified":1649863870642},{"_id":"public/tags/CSharp/index.html","hash":"21942cff79fe3a878b557d01caa358d8136d9188","modified":1649863870642},{"_id":"public/2021/08/27/How to build a document website via Vuepress/index.html","hash":"0a97fc4c1768d8d8047bb4ed1db8df4ef721a596","modified":1649863870642},{"_id":"public/images/favicon.png","hash":"7d18666e5a8455f4367b240425d617cf93966e10","modified":1649860957296},{"_id":"public/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1649860957296},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1649860957296},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1649860957296},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1649860957296},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1649860957296},{"_id":"public/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1649860957296},{"_id":"public/fonts/inter-v2-latin-regular.svg","hash":"ca639a580d3dd7c1a023d489cd818af95883b52b","modified":1649860957296},{"_id":"public/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1649860957296},{"_id":"public/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1649860957296},{"_id":"public/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1649860957296},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.svg","hash":"b650647a506978c3617a12cb50ba3c4c596ee6e7","modified":1649860957296},{"_id":"public/images/epic-smiley.jpg","hash":"11102caf25def291217235fe403c15e9fd40f9e3","modified":1649860957296},{"_id":"public/css/custom.css","hash":"4def307c74d53452191e01241fdaffb69204606c","modified":1649860957296},{"_id":"public/css/normalize.css","hash":"dd1976308129df19afb1a0dfdc9cc5d2aee7aec2","modified":1649860957296},{"_id":"public/css/prism-dark.css","hash":"6eae920ef9ee996f71a88bf2725e6e385d3e8b79","modified":1649860957296},{"_id":"public/css/prism-line-numbers.css","hash":"c632c3fa3fd97d05a0f74c6a87e1e93ee60ee57f","modified":1649860957296},{"_id":"public/css/skeleton.css","hash":"46633c4f03fc8de882077a141775a83f2dd6acc0","modified":1649860957296},{"_id":"public/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1649860957296},{"_id":"source/_posts/Dynamically convert JSON to C# object(Chinese).md","hash":"407324fc61786e0986db64746fd89a6d00b85bdf","modified":1649861918111},{"_id":"public/2021/08/27/Dynamically convert JSON to C# object(Chinese)/index.html","hash":"8b9a04c5a4a9b174362ea9cfe4ef62b2ef454935","modified":1649863870642},{"_id":"themes/aero-dual/LICENSE","hash":"d1f917294a5484d49c0ecf43a81ab6e2a5396f4a","modified":1649861126663},{"_id":"themes/aero-dual/README.md","hash":"6002cdfc3e5aa4e75124d605cef623d6220e5447","modified":1649863432196},{"_id":"themes/aero-dual/_config.yml","hash":"58739d9dd52e17aa54d55711aeaf60ba5fbe56ed","modified":1649862723899},{"_id":"themes/aero-dual/languages/en.yml","hash":"2c5c7c44a36d207c425b8033bf99bdcfa7dcd8d0","modified":1649861126663},{"_id":"themes/aero-dual/languages/zh-CN.yml","hash":"85ec0f83503941fe41f2f5f06e002d9afd1f19fd","modified":1649862847751},{"_id":"themes/aero-dual/layout/archive.ejs","hash":"273dec29ccd9b596e305618b82e6ee4e930b3327","modified":1649861126664},{"_id":"themes/aero-dual/layout/index.ejs","hash":"43f88bc5d83aa7e791a8ef05af09d71f72d6f917","modified":1649861126664},{"_id":"themes/aero-dual/layout/layout.ejs","hash":"18550a2bff0e3a3556f54ac11f6b490d2683737c","modified":1649861126664},{"_id":"themes/aero-dual/layout/page.ejs","hash":"a9fa586eb3366949207921edd02eab07e7a2f0c0","modified":1649861126664},{"_id":"themes/aero-dual/layout/post.ejs","hash":"a9fa586eb3366949207921edd02eab07e7a2f0c0","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/after-footer.ejs","hash":"f98091c7aace55d71c1ba458979e789edeecc029","modified":1649861126663},{"_id":"themes/aero-dual/layout/_partial/archive-entry.ejs","hash":"f3320090959299d42fd07289eab21259e8b1eb44","modified":1649861126663},{"_id":"themes/aero-dual/layout/_partial/footer.ejs","hash":"f6fd89878eae4f41b7289882cf9c5700a5057e3e","modified":1649861126663},{"_id":"themes/aero-dual/layout/_partial/google-analytics.ejs","hash":"d19d394eb45cde43504306c5dc377f044faf0a23","modified":1649861126663},{"_id":"themes/aero-dual/layout/_partial/header.ejs","hash":"b8f42af66a80705fc774f2cc9a8ae4c560b81bf1","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/html-head.ejs","hash":"36ac5dbd80a4eefea2b49f7a0de25f97d6b16d9c","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/index-entry.ejs","hash":"df1aaf8e4251668e5bb2a53e6eca6fae46e65887","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/pagination.ejs","hash":"e70eda7f452724c083073342df3b897019656d13","modified":1649861126664},{"_id":"themes/aero-dual/source/css/_base.styl","hash":"176ae298d70df9c063e6414c7723a434854e8bee","modified":1649861126664},{"_id":"themes/aero-dual/source/css/style.dark.styl","hash":"079289e71db062072ade0a64f2a4fa671a53c9b3","modified":1649861126667},{"_id":"themes/aero-dual/source/css/style.light.styl","hash":"5ef3cff44a3f0dc612811ca0d3e452f96a787b38","modified":1649861126667},{"_id":"themes/aero-dual/source/js/bootstrap.min.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1649861126675},{"_id":"themes/aero-dual/layout/_partial/post/article.ejs","hash":"bab1cde99dea1e7f600202c64ff179b2fee224f1","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/post/tags.ejs","hash":"2ecd44bfa51b6c3c2343cc39038225d10e9775ca","modified":1649861126664},{"_id":"themes/aero-dual/layout/_partial/post/categories.ejs","hash":"da398995647f6fe549cc60003cbe193b39c07f8e","modified":1649861126664},{"_id":"themes/aero-dual/source/css/_helpers/mixins.styl","hash":"ebc6918703b60b1bc71ee879ef7970c881bba8b5","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/archive-entry.styl","hash":"ed5fa62d499ac2f4af375ffabb6246be2bef07ad","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/article.styl","hash":"1fa4af57699829f4280c428e01558bea55c5afec","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/footer.styl","hash":"ff2b0419b7875860c391f454ec4f105192330fdf","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/header.styl","hash":"122e8bddb4ba45752a6e8caa83d1d88c46af1220","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/index-entry.styl","hash":"b78c87bec299215682ec6f56d22cd5c8d5a935f6","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_partial/pagination.styl","hash":"32efb7506e9c824f7e8132c8f4a216301334f8e1","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_typography/highlight.dracula.styl","hash":"848d245175f97bf255add7a2a089193a3cfed229","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_typography/code.styl","hash":"c461f2fda5c88c363342ab07f5bd09346c506790","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_typography/highlight.gruvbox-light.styl","hash":"0a8bbc4ad4718661e9292b71423c7fa7ddb613d5","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_typography/highlight.monikai-sublime.styl","hash":"6fa62d4ced718f52b85ea2d92d883ac0b57df35b","modified":1649861126665},{"_id":"themes/aero-dual/source/css/_typography/typo.css","hash":"2901fed191955827af9bca56e4b50dc9c06a8533","modified":1649861126666},{"_id":"themes/aero-dual/source/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1649861126667},{"_id":"themes/aero-dual/source/js/highlight.pack.js","hash":"f4454691717eb6e4f26fddfd5ba14df824b44c41","modified":1649861126676},{"_id":"themes/aero-dual/source/img/aero-dual-color-change.jpg","hash":"d9c779262e2e4d9f54e42e54d63c94b54294a4dc","modified":1649861126668},{"_id":"themes/aero-dual/source/img/aero-dual-thumbnail.jpg","hash":"939c91a321b1caf579262fab7d8837812e21b5a9","modified":1649861126670},{"_id":"themes/aero-dual/source/img/default-banner-dark.jpg","hash":"e15832861cc6e5d55d08fbbe9d1cd472fe1a876e","modified":1649861126672},{"_id":"themes/aero-dual/source/img/default-banner-light.jpg","hash":"df4daccf84205e76708fc5e703dc2476f59a9d9d","modified":1649861126674},{"_id":"source/about/index.md","hash":"010c13e13e1106d51f1b7518f7e6616c3334a5e0","modified":1649860629491},{"_id":"source/works/index.md","hash":"b51a588ead178a32efd3179ac44b351b78dbb9e2","modified":1649860629491},{"_id":"themes/aero-dual/source/img/last_sunsetting_2021.png","hash":"952a63210210252c0ed0aff633b9b76a5db5d69f","modified":1649763361162},{"_id":"public/about/index.html","hash":"e9632cbf5a7dd70d3c78add9b0ac8c0c4a785919","modified":1649863870642},{"_id":"public/works/index.html","hash":"7b6110fea85badda1d1d633dad20031d56cb5a5b","modified":1649863870642},{"_id":"public/categories/dev/index.html","hash":"252e55d04159cdfc1d542c550be15cdb00067ba2","modified":1649863870642},{"_id":"public/css/style.light.css","hash":"d5bf9421d634117d4e66b9b1d3aa2fc8be45a72f","modified":1649863870642},{"_id":"public/css/style.dark.css","hash":"0fb03e72aafa9181d44a69b1bee48fea13c3e683","modified":1649863870642},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1649863870642},{"_id":"public/js/highlight.pack.js","hash":"f4454691717eb6e4f26fddfd5ba14df824b44c41","modified":1649863870642},{"_id":"public/js/bootstrap.min.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1649863870642},{"_id":"public/img/aero-dual-color-change.jpg","hash":"d9c779262e2e4d9f54e42e54d63c94b54294a4dc","modified":1649863870642},{"_id":"public/img/aero-dual-thumbnail.jpg","hash":"939c91a321b1caf579262fab7d8837812e21b5a9","modified":1649863870642},{"_id":"public/img/default-banner-dark.jpg","hash":"e15832861cc6e5d55d08fbbe9d1cd472fe1a876e","modified":1649863870642},{"_id":"public/img/default-banner-light.jpg","hash":"df4daccf84205e76708fc5e703dc2476f59a9d9d","modified":1649863870642},{"_id":"public/img/last_sunsetting_2021.png","hash":"952a63210210252c0ed0aff633b9b76a5db5d69f","modified":1649863870642}],"Category":[{"name":"dev","_id":"cl1xp6owj00029aij5ssfh16b"},{"name":"test","_id":"cl1xqe43o0000gzij8rwhfgli"}],"Data":[],"Page":[{"title":"About","date":"2021-04-02T15:42:50.000Z","_content":"\n 实际上这里已经没有太多的话可以写了，因为首页基本可以当作一个\"关于\"页面存在。\n\n我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做\"ahpxarctic.cn\"的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了\"ahpxchina.cn\"这个域名3年。\n\n于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。\n\n不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是~~因为根本看不懂~~，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。\n\n这个博客的前世今生也就到这里了，之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-04-02 23:42:50\n---\n\n 实际上这里已经没有太多的话可以写了，因为首页基本可以当作一个\"关于\"页面存在。\n\n我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做\"ahpxarctic.cn\"的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了\"ahpxchina.cn\"这个域名3年。\n\n于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。\n\n不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是~~因为根本看不懂~~，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。\n\n这个博客的前世今生也就到这里了，之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。\n\n","updated":"2022-04-13T14:37:09.491Z","path":"about/index.html","_id":"cl1xp20sn00009aij687j5l2x","comments":1,"layout":"page","content":"<p> 实际上这里已经没有太多的话可以写了，因为首页基本可以当作一个”关于”页面存在。</p>\n<p>我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做”ahpxarctic.cn”的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了”ahpxchina.cn”这个域名3年。</p>\n<p>于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。</p>\n<p>不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是<del>因为根本看不懂</del>，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。</p>\n<p>这个博客的前世今生也就到这里了，之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 实际上这里已经没有太多的话可以写了，因为首页基本可以当作一个”关于”页面存在。</p>\n<p>我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做”ahpxarctic.cn”的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了”ahpxchina.cn”这个域名3年。</p>\n<p>于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。</p>\n<p>不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是<del>因为根本看不懂</del>，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。</p>\n<p>这个博客的前世今生也就到这里了，之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。</p>\n"},{"title":"Works","date":"2021-04-02T15:39:23.000Z","_content":"\n### [ModuleLauncher.Re](https://github.com/AHpxChina/ModuleLauncher.Re)\n\n> Cross-platform Minecraft Launcher library\n>\n> [MIT License](https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE)\n\n### [Mirai.Net](https://github.com/SinoAHpx/Mirai.Net)\n\n> Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。\n>\n> [AGPL-3.0 License](https://github.com/SinoAHpx/Mirai.Net/blob/2.1/LICENSE)\n\n### [Fleury](https://github.com/SinoAHpx/Fleury)\n\n> Fleury is an extension library for remedying drawbacks in C# standard API\n\n### [YAML](https://github.com/SinoAHpx/YAML)\n\n> Yet Another Minecraft Launcher\n\n","source":"works/index.md","raw":"---\ntitle: Works\ndate: 2021-04-02 23:39:23\n---\n\n### [ModuleLauncher.Re](https://github.com/AHpxChina/ModuleLauncher.Re)\n\n> Cross-platform Minecraft Launcher library\n>\n> [MIT License](https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE)\n\n### [Mirai.Net](https://github.com/SinoAHpx/Mirai.Net)\n\n> Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。\n>\n> [AGPL-3.0 License](https://github.com/SinoAHpx/Mirai.Net/blob/2.1/LICENSE)\n\n### [Fleury](https://github.com/SinoAHpx/Fleury)\n\n> Fleury is an extension library for remedying drawbacks in C# standard API\n\n### [YAML](https://github.com/SinoAHpx/YAML)\n\n> Yet Another Minecraft Launcher\n\n","updated":"2022-04-13T14:37:09.491Z","path":"works/index.html","_id":"cl1xp24h200019aij6dtbgjo8","comments":1,"layout":"page","content":"<h3 id=\"ModuleLauncher-Re\"><a href=\"#ModuleLauncher-Re\" class=\"headerlink\" title=\"ModuleLauncher.Re\"></a><a href=\"https://github.com/AHpxChina/ModuleLauncher.Re\">ModuleLauncher.Re</a></h3><blockquote>\n<p>Cross-platform Minecraft Launcher library</p>\n<p><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE\">MIT License</a></p>\n</blockquote>\n<h3 id=\"Mirai-Net\"><a href=\"#Mirai-Net\" class=\"headerlink\" title=\"Mirai.Net\"></a><a href=\"https://github.com/SinoAHpx/Mirai.Net\">Mirai.Net</a></h3><blockquote>\n<p>Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。</p>\n<p><a href=\"https://github.com/SinoAHpx/Mirai.Net/blob/2.1/LICENSE\">AGPL-3.0 License</a></p>\n</blockquote>\n<h3 id=\"Fleury\"><a href=\"#Fleury\" class=\"headerlink\" title=\"Fleury\"></a><a href=\"https://github.com/SinoAHpx/Fleury\">Fleury</a></h3><blockquote>\n<p>Fleury is an extension library for remedying drawbacks in C# standard API</p>\n</blockquote>\n<h3 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a><a href=\"https://github.com/SinoAHpx/YAML\">YAML</a></h3><blockquote>\n<p>Yet Another Minecraft Launcher</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ModuleLauncher-Re\"><a href=\"#ModuleLauncher-Re\" class=\"headerlink\" title=\"ModuleLauncher.Re\"></a><a href=\"https://github.com/AHpxChina/ModuleLauncher.Re\">ModuleLauncher.Re</a></h3><blockquote>\n<p>Cross-platform Minecraft Launcher library</p>\n<p><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE\">MIT License</a></p>\n</blockquote>\n<h3 id=\"Mirai-Net\"><a href=\"#Mirai-Net\" class=\"headerlink\" title=\"Mirai.Net\"></a><a href=\"https://github.com/SinoAHpx/Mirai.Net\">Mirai.Net</a></h3><blockquote>\n<p>Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。</p>\n<p><a href=\"https://github.com/SinoAHpx/Mirai.Net/blob/2.1/LICENSE\">AGPL-3.0 License</a></p>\n</blockquote>\n<h3 id=\"Fleury\"><a href=\"#Fleury\" class=\"headerlink\" title=\"Fleury\"></a><a href=\"https://github.com/SinoAHpx/Fleury\">Fleury</a></h3><blockquote>\n<p>Fleury is an extension library for remedying drawbacks in C# standard API</p>\n</blockquote>\n<h3 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a><a href=\"https://github.com/SinoAHpx/YAML\">YAML</a></h3><blockquote>\n<p>Yet Another Minecraft Launcher</p>\n</blockquote>\n"}],"Post":[{"title":"Hello, World!","date":"2021-03-30T16:58:57.000Z","_content":"\n\n\n```c#\npublic static void Main(string[] args)\n{\n\tConsole.WriteLine(\"Hello, World!\");\n}\n```\n\n","source":"_posts/Hello-World-0.md","raw":"---\ntitle: 'Hello, World!'\ndate: 2021-03-31 00:58:57\ntags: Test\ncategories: test\n---\n\n\n\n```c#\npublic static void Main(string[] args)\n{\n\tConsole.WriteLine(\"Hello, World!\");\n}\n```\n\n","slug":"Hello-World-0","published":1,"updated":"2022-04-13T15:32:17.729Z","_id":"cksuf759r0002jow1h8ffehor","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">public static void Main(string[] args)\n&#123;\n\tConsole.WriteLine(&quot;Hello, World!&quot;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">public static void Main(string[] args)\n&#123;\n\tConsole.WriteLine(&quot;Hello, World!&quot;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"How to Build a document site by Vuepress","date":"2021-08-27T14:00:00.000Z","_content":"\n# How to Build a document site by Vuepress\n\nBefore the beginning, I'd like to answer a question: **Why you write this tutorial?**\n\nYeah, there's too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that's why I make this article: for people who don't know what is vue.js and never had a website. Anyway, it's not a zero-basic tutorial, at least, you should know about some things like *what is GitHub?* *why should I write a document?* \n\n## Environments\n\nThis tutorial based on Windows 10 platform, and all the examples are under the windows-style.\n\n### Node.Js\n\nAccess the official website of [Node.js](https://nodejs.org), as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js\n\n![image-20210605211258441](https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png)\n\nWhen it finished, you can see a *.msi* file like this one:\n\n![image-20210605211512722](https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png)\n\nDouble click to open it, and keep clicking the **Next** button until the install wizard shows a **Finish** button. Since then, we installed node.js.\n\n### Yarn\n\nAlthough *npm*(node package manager) provides all the features, according to the document of the vuepress, *yarn* would be a better choice than *npm*.\n\nLet's access [yarn installation site](https://classic.yarnpkg.com/en/docs/install/#windows-stable), expand the **Alternatives** section:\n\n![image-20210605212346019](https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png)\n\nClick the *Download Installer Button*, after the progress running over, you can get a *.msi* file, install it like node.js installer.\n\n### Git (Optional)\n\nThis step is optional, but if you do this, your work will be much easier.\n\nAccess [git official website](https://git-scm.com/download/win), you can see the interface like this:\n\n![image-20210605213126512](https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png)\n\nClick the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.\n\nIf install succeeds, you will see 2 git menu in any context menu of windows explorer:\n\n![image-20210605213804014](https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png)\n\nAs you can see, I marked *Git Bash*, which is the command terminal we need to instead of windows cmd or Powershell.\n\n## Setup Vuepress\n\nNow, we had node.js and yarn, we are ready to start building a vuepress site!\n\n### Create a Github repo for deploying Vuepress\n\nI won't show how to create a GitHub repo, but I would notice you are:\n\n![image-20210605214554406](https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png)\n\nYou should choose the .gitignore template to Node, it will be more convenient for you.\n\nClone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.\n\n### Install Vuepress\n\nBefore work starts, input the command below:\n\n```shell\nyarn init -y\n```\n\nThis command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:\n\n```shell\nyarn add -D vuepress\n```\n\nThis command needs about 2 minutes to complete, keep your patience.\n\n![image-20210605215211625](https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png)\n\nSince then, we installed the vuepress local.\n\n### Basic configuration for vuepress\n\nAfter you installed the vuepress, the structure of your local files should be like this:\n\n![image-20210605215450501](https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png)\n\nOpen the *package.json*, add these lines in this JSON file and append ```.temp``` in the .gitignore file\n\n```json\n\"scripts\": {\n\t\"dev\": \"vuepress dev docs --temp .temp\",\n\t\"build\": \"vuepress build docs\"\n}\n```\n\nThis step is also optional, but if you do this, your progress will be more convenient. In fact, you don't even need to know what these commands used for, just follow the steps.\n\nNow we created a folder that must named *docs*,\n\n![image-20210605220029939](https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png)\n\nThen we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.\n\n![image-20210605220202704](https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png)\n\nSince here, we could serve a local server for our document side, just input this command:\n\n```shell\nyarn dev\n```\n\nWhen this interface displayed, your local document server has been created.\n\n![image-20210605220517338](https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png)\n\nAccess *http://localhost:8080*, you can see an empty vuepress side now:\n\n![image-20210605220600598](https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png)\n\n### config.js\n\nCreate a folder named *.vuepress* in */doc*:\n\n![image-20210605220743591](https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png)\n\nCreate a javacript file in */.vuepress*:\n\n![image-20210605220912318](https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png)\n\nAdd these lines inside:\n\n```javascript\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around',\n  base: \"/Vuepress4Beginner/\"\n}\n```\n\nThere's a point you should be noticed, the *base* key should appear when you trying to deploy your document site on a sub-directory like *http://www.xxxx.com/xxxx*, the slash symbol should be beginning, and the end.\n\nRestart your local server, you will see the host had appended your *base* value\n\n![image-20210605221808225](https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png)\n\nAnd you will see the effect of the config.js, a title element displayed in the top-left corner\n\n![image-20210605221900646](https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png)\n\n### root README.md\n\nAdd these lines at the top of *root README.md*:\n\n```YAML\n---\nhome: true\nherImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n\nYou can change the element content as you want, the *hereImage* key should be removed if you don't need it. And if you need a big logo on your document home page, you should know some basic knowledge about [vuepress asset](https://vuepress.vuejs.org/guide/assets.html#relative-urls).\n\nThe content below the [YAML font matter](https://jekyllrb.com/docs/front-matter/) will be display as normal markdown content.\n\nNow, I'll tell you what is ever YAML font matter key-value pair used for:\n\n+ home: this page is used for the home page or not\n+ heroImage: the main logo displayed in the center of the home page\n+ heroText: the main title displayed in the center of the home page\n+ tagline: the subtitle under the heroText\n+ actionText: the text for the central button\n+ actionLink: the jump target for central button\n+ features: some feature under the central button\n  + title: feature title\n  + details: feature description\n+ footer: the text display in the footer of the site\n\n![image-20210605223618117](https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png)\n\n### Add navigate links\n\nOpen *config.js*, and add these lines:\n\n```javascript\nthemeConfig: {\n  nav: [\n    { text: 'Home', link: '/' },\n    { text: 'Guide', link: '/guide/' },\n    { text: 'External', link: 'https://google.com' },\n  ],\n}\n```\n\nAs you can see, there's an array named *nav*, you can add its member like:\n\n```javascript\n{ text: 'Home', link: '/' }\n```\n\n+ text: the text display in navigate bar\n+ link: the link for navigating, you can use a relative or absolute URL\n\nIf you would like to know about the navigation bar, you can visit [navbar links](https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links) in vuepress document.\n\n### Start writing\n\nAfter all of these configurations, now you can start to write documents via markdown.\n\nCreate a folder named *guide* in /docs:\n\n![image-20210605223831721](https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png)\n\nCreate a README.me in /docs/guide\n\n![image-20210605223942377](https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png)\n\nAdd this YAML font matter at the top of this README.md:\n\n```yaml\n---\nsidebar: auto\n---\n```\n\nEnjoy!\n\n![image-20210605224226895](https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png)\n\n### Summary\n\nThis is how the document site looks like after the above configurations, \n\n![image-20210605225004660](https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png)\n\nI'll list some point that you maybe didn't know:\n\n+ REAME.md equals to index.html in website building\n+ The local file structure of our example:\n  + .temp\n  + docs\n    + .vuepress\n      + config.js\n    + guide\n      + README.md\n    + README.md\n  + node_modules\n  + .gitignore\n  + package.json\n  + yarn.lock\n\n## Deploy\n\nAfter all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out [vuepress document](https://vuepress.vuejs.org/guide/deploy.html#github-pages).\n\n### Create deploy script\n\nCreate a .sh file named deploy.sh in the root directory\n\n```shell\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs/.vuepress/dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\nI'd like to recommend that you shouldn't just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.\n\nSince then, you should add this line in the config.js:\n\n```\n\"deploy\": \"bash deploy.sh\"\n```\n\nAnd then config.js should look like:\n\n![image-20210605231251492](https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png)\n\nAs you can see, we are using the windows operating system, but there's a ```bash``` command that's didn't exist in windows. How to solve this? The answer is: we don't even need to solve because we are using git bash. That's why I recommended you to choose git bash but not the windows cmd or Powershell.\n\nNow, just run\n\n```\nyarn deploy\n```\n\nThen, turn to GitHub, open the repo for hosting the vuepress document, turn to the *Setting* page:\n\n![image-20210605231615793](https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png)\n\nAnd go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.\n\n![image-20210605231713557](https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png)\n\nCongratulations! You've done all the work!","source":"_posts/How to build a document website via Vuepress.md","raw":"---\ntitle: 'How to Build a document site by Vuepress'\ndate: 2021-08-27 22:00:00\ntags: Web\n---\n\n# How to Build a document site by Vuepress\n\nBefore the beginning, I'd like to answer a question: **Why you write this tutorial?**\n\nYeah, there's too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that's why I make this article: for people who don't know what is vue.js and never had a website. Anyway, it's not a zero-basic tutorial, at least, you should know about some things like *what is GitHub?* *why should I write a document?* \n\n## Environments\n\nThis tutorial based on Windows 10 platform, and all the examples are under the windows-style.\n\n### Node.Js\n\nAccess the official website of [Node.js](https://nodejs.org), as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js\n\n![image-20210605211258441](https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png)\n\nWhen it finished, you can see a *.msi* file like this one:\n\n![image-20210605211512722](https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png)\n\nDouble click to open it, and keep clicking the **Next** button until the install wizard shows a **Finish** button. Since then, we installed node.js.\n\n### Yarn\n\nAlthough *npm*(node package manager) provides all the features, according to the document of the vuepress, *yarn* would be a better choice than *npm*.\n\nLet's access [yarn installation site](https://classic.yarnpkg.com/en/docs/install/#windows-stable), expand the **Alternatives** section:\n\n![image-20210605212346019](https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png)\n\nClick the *Download Installer Button*, after the progress running over, you can get a *.msi* file, install it like node.js installer.\n\n### Git (Optional)\n\nThis step is optional, but if you do this, your work will be much easier.\n\nAccess [git official website](https://git-scm.com/download/win), you can see the interface like this:\n\n![image-20210605213126512](https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png)\n\nClick the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.\n\nIf install succeeds, you will see 2 git menu in any context menu of windows explorer:\n\n![image-20210605213804014](https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png)\n\nAs you can see, I marked *Git Bash*, which is the command terminal we need to instead of windows cmd or Powershell.\n\n## Setup Vuepress\n\nNow, we had node.js and yarn, we are ready to start building a vuepress site!\n\n### Create a Github repo for deploying Vuepress\n\nI won't show how to create a GitHub repo, but I would notice you are:\n\n![image-20210605214554406](https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png)\n\nYou should choose the .gitignore template to Node, it will be more convenient for you.\n\nClone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.\n\n### Install Vuepress\n\nBefore work starts, input the command below:\n\n```shell\nyarn init -y\n```\n\nThis command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:\n\n```shell\nyarn add -D vuepress\n```\n\nThis command needs about 2 minutes to complete, keep your patience.\n\n![image-20210605215211625](https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png)\n\nSince then, we installed the vuepress local.\n\n### Basic configuration for vuepress\n\nAfter you installed the vuepress, the structure of your local files should be like this:\n\n![image-20210605215450501](https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png)\n\nOpen the *package.json*, add these lines in this JSON file and append ```.temp``` in the .gitignore file\n\n```json\n\"scripts\": {\n\t\"dev\": \"vuepress dev docs --temp .temp\",\n\t\"build\": \"vuepress build docs\"\n}\n```\n\nThis step is also optional, but if you do this, your progress will be more convenient. In fact, you don't even need to know what these commands used for, just follow the steps.\n\nNow we created a folder that must named *docs*,\n\n![image-20210605220029939](https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png)\n\nThen we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.\n\n![image-20210605220202704](https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png)\n\nSince here, we could serve a local server for our document side, just input this command:\n\n```shell\nyarn dev\n```\n\nWhen this interface displayed, your local document server has been created.\n\n![image-20210605220517338](https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png)\n\nAccess *http://localhost:8080*, you can see an empty vuepress side now:\n\n![image-20210605220600598](https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png)\n\n### config.js\n\nCreate a folder named *.vuepress* in */doc*:\n\n![image-20210605220743591](https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png)\n\nCreate a javacript file in */.vuepress*:\n\n![image-20210605220912318](https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png)\n\nAdd these lines inside:\n\n```javascript\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around',\n  base: \"/Vuepress4Beginner/\"\n}\n```\n\nThere's a point you should be noticed, the *base* key should appear when you trying to deploy your document site on a sub-directory like *http://www.xxxx.com/xxxx*, the slash symbol should be beginning, and the end.\n\nRestart your local server, you will see the host had appended your *base* value\n\n![image-20210605221808225](https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png)\n\nAnd you will see the effect of the config.js, a title element displayed in the top-left corner\n\n![image-20210605221900646](https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png)\n\n### root README.md\n\nAdd these lines at the top of *root README.md*:\n\n```YAML\n---\nhome: true\nherImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n\nYou can change the element content as you want, the *hereImage* key should be removed if you don't need it. And if you need a big logo on your document home page, you should know some basic knowledge about [vuepress asset](https://vuepress.vuejs.org/guide/assets.html#relative-urls).\n\nThe content below the [YAML font matter](https://jekyllrb.com/docs/front-matter/) will be display as normal markdown content.\n\nNow, I'll tell you what is ever YAML font matter key-value pair used for:\n\n+ home: this page is used for the home page or not\n+ heroImage: the main logo displayed in the center of the home page\n+ heroText: the main title displayed in the center of the home page\n+ tagline: the subtitle under the heroText\n+ actionText: the text for the central button\n+ actionLink: the jump target for central button\n+ features: some feature under the central button\n  + title: feature title\n  + details: feature description\n+ footer: the text display in the footer of the site\n\n![image-20210605223618117](https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png)\n\n### Add navigate links\n\nOpen *config.js*, and add these lines:\n\n```javascript\nthemeConfig: {\n  nav: [\n    { text: 'Home', link: '/' },\n    { text: 'Guide', link: '/guide/' },\n    { text: 'External', link: 'https://google.com' },\n  ],\n}\n```\n\nAs you can see, there's an array named *nav*, you can add its member like:\n\n```javascript\n{ text: 'Home', link: '/' }\n```\n\n+ text: the text display in navigate bar\n+ link: the link for navigating, you can use a relative or absolute URL\n\nIf you would like to know about the navigation bar, you can visit [navbar links](https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links) in vuepress document.\n\n### Start writing\n\nAfter all of these configurations, now you can start to write documents via markdown.\n\nCreate a folder named *guide* in /docs:\n\n![image-20210605223831721](https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png)\n\nCreate a README.me in /docs/guide\n\n![image-20210605223942377](https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png)\n\nAdd this YAML font matter at the top of this README.md:\n\n```yaml\n---\nsidebar: auto\n---\n```\n\nEnjoy!\n\n![image-20210605224226895](https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png)\n\n### Summary\n\nThis is how the document site looks like after the above configurations, \n\n![image-20210605225004660](https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png)\n\nI'll list some point that you maybe didn't know:\n\n+ REAME.md equals to index.html in website building\n+ The local file structure of our example:\n  + .temp\n  + docs\n    + .vuepress\n      + config.js\n    + guide\n      + README.md\n    + README.md\n  + node_modules\n  + .gitignore\n  + package.json\n  + yarn.lock\n\n## Deploy\n\nAfter all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out [vuepress document](https://vuepress.vuejs.org/guide/deploy.html#github-pages).\n\n### Create deploy script\n\nCreate a .sh file named deploy.sh in the root directory\n\n```shell\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs/.vuepress/dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\nI'd like to recommend that you shouldn't just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.\n\nSince then, you should add this line in the config.js:\n\n```\n\"deploy\": \"bash deploy.sh\"\n```\n\nAnd then config.js should look like:\n\n![image-20210605231251492](https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png)\n\nAs you can see, we are using the windows operating system, but there's a ```bash``` command that's didn't exist in windows. How to solve this? The answer is: we don't even need to solve because we are using git bash. That's why I recommended you to choose git bash but not the windows cmd or Powershell.\n\nNow, just run\n\n```\nyarn deploy\n```\n\nThen, turn to GitHub, open the repo for hosting the vuepress document, turn to the *Setting* page:\n\n![image-20210605231615793](https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png)\n\nAnd go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.\n\n![image-20210605231713557](https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png)\n\nCongratulations! You've done all the work!","slug":"How to build a document website via Vuepress","published":1,"updated":"2022-04-13T14:37:09.491Z","_id":"cksufb2c90000s0w10xz05imz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"How-to-Build-a-document-site-by-Vuepress\"><a href=\"#How-to-Build-a-document-site-by-Vuepress\" class=\"headerlink\" title=\"How to Build a document site by Vuepress\"></a>How to Build a document site by Vuepress</h1><p>Before the beginning, I’d like to answer a question: <strong>Why you write this tutorial?</strong></p>\n<p>Yeah, there’s too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that’s why I make this article: for people who don’t know what is vue.js and never had a website. Anyway, it’s not a zero-basic tutorial, at least, you should know about some things like <em>what is GitHub?</em> <em>why should I write a document?</em> </p>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>This tutorial based on Windows 10 platform, and all the examples are under the windows-style.</p>\n<h3 id=\"Node-Js\"><a href=\"#Node-Js\" class=\"headerlink\" title=\"Node.Js\"></a>Node.Js</h3><p>Access the official website of <a href=\"https://nodejs.org/\">Node.js</a>, as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js</p>\n<p><img src=\"https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png\" alt=\"image-20210605211258441\"></p>\n<p>When it finished, you can see a <em>.msi</em> file like this one:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png\" alt=\"image-20210605211512722\"></p>\n<p>Double click to open it, and keep clicking the <strong>Next</strong> button until the install wizard shows a <strong>Finish</strong> button. Since then, we installed node.js.</p>\n<h3 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h3><p>Although <em>npm</em>(node package manager) provides all the features, according to the document of the vuepress, <em>yarn</em> would be a better choice than <em>npm</em>.</p>\n<p>Let’s access <a href=\"https://classic.yarnpkg.com/en/docs/install/#windows-stable\">yarn installation site</a>, expand the <strong>Alternatives</strong> section:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png\" alt=\"image-20210605212346019\"></p>\n<p>Click the <em>Download Installer Button</em>, after the progress running over, you can get a <em>.msi</em> file, install it like node.js installer.</p>\n<h3 id=\"Git-Optional\"><a href=\"#Git-Optional\" class=\"headerlink\" title=\"Git (Optional)\"></a>Git (Optional)</h3><p>This step is optional, but if you do this, your work will be much easier.</p>\n<p>Access <a href=\"https://git-scm.com/download/win\">git official website</a>, you can see the interface like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png\" alt=\"image-20210605213126512\"></p>\n<p>Click the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.</p>\n<p>If install succeeds, you will see 2 git menu in any context menu of windows explorer:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png\" alt=\"image-20210605213804014\"></p>\n<p>As you can see, I marked <em>Git Bash</em>, which is the command terminal we need to instead of windows cmd or Powershell.</p>\n<h2 id=\"Setup-Vuepress\"><a href=\"#Setup-Vuepress\" class=\"headerlink\" title=\"Setup Vuepress\"></a>Setup Vuepress</h2><p>Now, we had node.js and yarn, we are ready to start building a vuepress site!</p>\n<h3 id=\"Create-a-Github-repo-for-deploying-Vuepress\"><a href=\"#Create-a-Github-repo-for-deploying-Vuepress\" class=\"headerlink\" title=\"Create a Github repo for deploying Vuepress\"></a>Create a Github repo for deploying Vuepress</h3><p>I won’t show how to create a GitHub repo, but I would notice you are:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png\" alt=\"image-20210605214554406\"></p>\n<p>You should choose the .gitignore template to Node, it will be more convenient for you.</p>\n<p>Clone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.</p>\n<h3 id=\"Install-Vuepress\"><a href=\"#Install-Vuepress\" class=\"headerlink\" title=\"Install Vuepress\"></a>Install Vuepress</h3><p>Before work starts, input the command below:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn init -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn add -D vuepress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command needs about 2 minutes to complete, keep your patience.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png\" alt=\"image-20210605215211625\"></p>\n<p>Since then, we installed the vuepress local.</p>\n<h3 id=\"Basic-configuration-for-vuepress\"><a href=\"#Basic-configuration-for-vuepress\" class=\"headerlink\" title=\"Basic configuration for vuepress\"></a>Basic configuration for vuepress</h3><p>After you installed the vuepress, the structure of your local files should be like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png\" alt=\"image-20210605215450501\"></p>\n<p>Open the <em>package.json</em>, add these lines in this JSON file and append <code>.temp</code> in the .gitignore file</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs --temp .temp\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This step is also optional, but if you do this, your progress will be more convenient. In fact, you don’t even need to know what these commands used for, just follow the steps.</p>\n<p>Now we created a folder that must named <em>docs</em>,</p>\n<p><img src=\"https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png\" alt=\"image-20210605220029939\"></p>\n<p>Then we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png\" alt=\"image-20210605220202704\"></p>\n<p>Since here, we could serve a local server for our document side, just input this command:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>When this interface displayed, your local document server has been created.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png\" alt=\"image-20210605220517338\"></p>\n<p>Access <em><a href=\"http://localhost:8080/\">http://localhost:8080</a></em>, you can see an empty vuepress side now:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png\" alt=\"image-20210605220600598\"></p>\n<h3 id=\"config-js\"><a href=\"#config-js\" class=\"headerlink\" title=\"config.js\"></a>config.js</h3><p>Create a folder named <em>.vuepress</em> in <em>/doc</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png\" alt=\"image-20210605220743591\"></p>\n<p>Create a javacript file in <em>/.vuepress</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png\" alt=\"image-20210605220912318\"></p>\n<p>Add these lines inside:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello VuePress'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Just playing around'</span><span class=\"token punctuation\">,</span>\n  base<span class=\"token operator\">:</span> <span class=\"token string\">\"/Vuepress4Beginner/\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>There’s a point you should be noticed, the <em>base</em> key should appear when you trying to deploy your document site on a sub-directory like <em><a href=\"http://www.xxxx.com/xxxx\">http://www.xxxx.com/xxxx</a></em>, the slash symbol should be beginning, and the end.</p>\n<p>Restart your local server, you will see the host had appended your <em>base</em> value</p>\n<p><img src=\"https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png\" alt=\"image-20210605221808225\"></p>\n<p>And you will see the effect of the config.js, a title element displayed in the top-left corner</p>\n<p><img src=\"https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png\" alt=\"image-20210605221900646\"></p>\n<h3 id=\"root-README-md\"><a href=\"#root-README-md\" class=\"headerlink\" title=\"root README.md\"></a>root README.md</h3><p>Add these lines at the top of <em>root README.md</em>:</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">---\nhome: true\nherImage: &#x2F;hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: &#x2F;guide&#x2F;\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>You can change the element content as you want, the <em>hereImage</em> key should be removed if you don’t need it. And if you need a big logo on your document home page, you should know some basic knowledge about <a href=\"https://vuepress.vuejs.org/guide/assets.html#relative-urls\">vuepress asset</a>.</p>\n<p>The content below the <a href=\"https://jekyllrb.com/docs/front-matter/\">YAML font matter</a> will be display as normal markdown content.</p>\n<p>Now, I’ll tell you what is ever YAML font matter key-value pair used for:</p>\n<ul>\n<li>home: this page is used for the home page or not</li>\n<li>heroImage: the main logo displayed in the center of the home page</li>\n<li>heroText: the main title displayed in the center of the home page</li>\n<li>tagline: the subtitle under the heroText</li>\n<li>actionText: the text for the central button</li>\n<li>actionLink: the jump target for central button</li>\n<li>features: some feature under the central button<ul>\n<li>title: feature title</li>\n<li>details: feature description</li>\n</ul>\n</li>\n<li>footer: the text display in the footer of the site</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png\" alt=\"image-20210605223618117\"></p>\n<h3 id=\"Add-navigate-links\"><a href=\"#Add-navigate-links\" class=\"headerlink\" title=\"Add navigate links\"></a>Add navigate links</h3><p>Open <em>config.js</em>, and add these lines:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">themeConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  nav<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>As you can see, there’s an array named <em>nav</em>, you can add its member like:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>text: the text display in navigate bar</li>\n<li>link: the link for navigating, you can use a relative or absolute URL</li>\n</ul>\n<p>If you would like to know about the navigation bar, you can visit <a href=\"https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links\">navbar links</a> in vuepress document.</p>\n<h3 id=\"Start-writing\"><a href=\"#Start-writing\" class=\"headerlink\" title=\"Start writing\"></a>Start writing</h3><p>After all of these configurations, now you can start to write documents via markdown.</p>\n<p>Create a folder named <em>guide</em> in /docs:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png\" alt=\"image-20210605223831721\"></p>\n<p>Create a README.me in /docs/guide</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png\" alt=\"image-20210605223942377\"></p>\n<p>Add this YAML font matter at the top of this README.md:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Enjoy!</p>\n<p><img src=\"https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png\" alt=\"image-20210605224226895\"></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is how the document site looks like after the above configurations, </p>\n<p><img src=\"https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png\" alt=\"image-20210605225004660\"></p>\n<p>I’ll list some point that you maybe didn’t know:</p>\n<ul>\n<li>REAME.md equals to index.html in website building</li>\n<li>The local file structure of our example:<ul>\n<li>.temp</li>\n<li>docs<ul>\n<li>.vuepress<ul>\n<li>config.js</li>\n</ul>\n</li>\n<li>guide<ul>\n<li>README.md</li>\n</ul>\n</li>\n<li>README.md</li>\n</ul>\n</li>\n<li>node_modules</li>\n<li>.gitignore</li>\n<li>package.json</li>\n<li>yarn.lock</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><p>After all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out <a href=\"https://vuepress.vuejs.org/guide/deploy.html#github-pages\">vuepress document</a>.</p>\n<h3 id=\"Create-deploy-script\"><a href=\"#Create-deploy-script\" class=\"headerlink\" title=\"Create deploy script\"></a>Create deploy script</h3><p>Create a .sh file named deploy.sh in the root directory</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs&#x2F;.vuepress&#x2F;dist\n\n# if you are deploying to a custom domain\n# echo &#39;www.example.com&#39; &gt; CNAME\n\ngit init\ngit add -A\ngit commit -m &#39;deploy&#39;\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;USERNAME&gt;.github.io.git master\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io&#x2F;&lt;REPO&gt;\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;REPO&gt;.git master:gh-pages\n\ncd -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>I’d like to recommend that you shouldn’t just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.</p>\n<p>Since then, you should add this line in the config.js:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;deploy&quot;: &quot;bash deploy.sh&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>And then config.js should look like:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png\" alt=\"image-20210605231251492\"></p>\n<p>As you can see, we are using the windows operating system, but there’s a <code>bash</code> command that’s didn’t exist in windows. How to solve this? The answer is: we don’t even need to solve because we are using git bash. That’s why I recommended you to choose git bash but not the windows cmd or Powershell.</p>\n<p>Now, just run</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Then, turn to GitHub, open the repo for hosting the vuepress document, turn to the <em>Setting</em> page:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png\" alt=\"image-20210605231615793\"></p>\n<p>And go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png\" alt=\"image-20210605231713557\"></p>\n<p>Congratulations! You’ve done all the work!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"How-to-Build-a-document-site-by-Vuepress\"><a href=\"#How-to-Build-a-document-site-by-Vuepress\" class=\"headerlink\" title=\"How to Build a document site by Vuepress\"></a>How to Build a document site by Vuepress</h1><p>Before the beginning, I’d like to answer a question: <strong>Why you write this tutorial?</strong></p>\n<p>Yeah, there’s too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that’s why I make this article: for people who don’t know what is vue.js and never had a website. Anyway, it’s not a zero-basic tutorial, at least, you should know about some things like <em>what is GitHub?</em> <em>why should I write a document?</em> </p>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>This tutorial based on Windows 10 platform, and all the examples are under the windows-style.</p>\n<h3 id=\"Node-Js\"><a href=\"#Node-Js\" class=\"headerlink\" title=\"Node.Js\"></a>Node.Js</h3><p>Access the official website of <a href=\"https://nodejs.org/\">Node.js</a>, as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js</p>\n<p><img src=\"https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png\" alt=\"image-20210605211258441\"></p>\n<p>When it finished, you can see a <em>.msi</em> file like this one:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png\" alt=\"image-20210605211512722\"></p>\n<p>Double click to open it, and keep clicking the <strong>Next</strong> button until the install wizard shows a <strong>Finish</strong> button. Since then, we installed node.js.</p>\n<h3 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h3><p>Although <em>npm</em>(node package manager) provides all the features, according to the document of the vuepress, <em>yarn</em> would be a better choice than <em>npm</em>.</p>\n<p>Let’s access <a href=\"https://classic.yarnpkg.com/en/docs/install/#windows-stable\">yarn installation site</a>, expand the <strong>Alternatives</strong> section:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png\" alt=\"image-20210605212346019\"></p>\n<p>Click the <em>Download Installer Button</em>, after the progress running over, you can get a <em>.msi</em> file, install it like node.js installer.</p>\n<h3 id=\"Git-Optional\"><a href=\"#Git-Optional\" class=\"headerlink\" title=\"Git (Optional)\"></a>Git (Optional)</h3><p>This step is optional, but if you do this, your work will be much easier.</p>\n<p>Access <a href=\"https://git-scm.com/download/win\">git official website</a>, you can see the interface like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png\" alt=\"image-20210605213126512\"></p>\n<p>Click the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.</p>\n<p>If install succeeds, you will see 2 git menu in any context menu of windows explorer:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png\" alt=\"image-20210605213804014\"></p>\n<p>As you can see, I marked <em>Git Bash</em>, which is the command terminal we need to instead of windows cmd or Powershell.</p>\n<h2 id=\"Setup-Vuepress\"><a href=\"#Setup-Vuepress\" class=\"headerlink\" title=\"Setup Vuepress\"></a>Setup Vuepress</h2><p>Now, we had node.js and yarn, we are ready to start building a vuepress site!</p>\n<h3 id=\"Create-a-Github-repo-for-deploying-Vuepress\"><a href=\"#Create-a-Github-repo-for-deploying-Vuepress\" class=\"headerlink\" title=\"Create a Github repo for deploying Vuepress\"></a>Create a Github repo for deploying Vuepress</h3><p>I won’t show how to create a GitHub repo, but I would notice you are:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png\" alt=\"image-20210605214554406\"></p>\n<p>You should choose the .gitignore template to Node, it will be more convenient for you.</p>\n<p>Clone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.</p>\n<h3 id=\"Install-Vuepress\"><a href=\"#Install-Vuepress\" class=\"headerlink\" title=\"Install Vuepress\"></a>Install Vuepress</h3><p>Before work starts, input the command below:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn init -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn add -D vuepress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command needs about 2 minutes to complete, keep your patience.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png\" alt=\"image-20210605215211625\"></p>\n<p>Since then, we installed the vuepress local.</p>\n<h3 id=\"Basic-configuration-for-vuepress\"><a href=\"#Basic-configuration-for-vuepress\" class=\"headerlink\" title=\"Basic configuration for vuepress\"></a>Basic configuration for vuepress</h3><p>After you installed the vuepress, the structure of your local files should be like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png\" alt=\"image-20210605215450501\"></p>\n<p>Open the <em>package.json</em>, add these lines in this JSON file and append <code>.temp</code> in the .gitignore file</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs --temp .temp\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This step is also optional, but if you do this, your progress will be more convenient. In fact, you don’t even need to know what these commands used for, just follow the steps.</p>\n<p>Now we created a folder that must named <em>docs</em>,</p>\n<p><img src=\"https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png\" alt=\"image-20210605220029939\"></p>\n<p>Then we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png\" alt=\"image-20210605220202704\"></p>\n<p>Since here, we could serve a local server for our document side, just input this command:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>When this interface displayed, your local document server has been created.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png\" alt=\"image-20210605220517338\"></p>\n<p>Access <em><a href=\"http://localhost:8080/\">http://localhost:8080</a></em>, you can see an empty vuepress side now:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png\" alt=\"image-20210605220600598\"></p>\n<h3 id=\"config-js\"><a href=\"#config-js\" class=\"headerlink\" title=\"config.js\"></a>config.js</h3><p>Create a folder named <em>.vuepress</em> in <em>/doc</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png\" alt=\"image-20210605220743591\"></p>\n<p>Create a javacript file in <em>/.vuepress</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png\" alt=\"image-20210605220912318\"></p>\n<p>Add these lines inside:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello VuePress'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Just playing around'</span><span class=\"token punctuation\">,</span>\n  base<span class=\"token operator\">:</span> <span class=\"token string\">\"/Vuepress4Beginner/\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>There’s a point you should be noticed, the <em>base</em> key should appear when you trying to deploy your document site on a sub-directory like <em><a href=\"http://www.xxxx.com/xxxx\">http://www.xxxx.com/xxxx</a></em>, the slash symbol should be beginning, and the end.</p>\n<p>Restart your local server, you will see the host had appended your <em>base</em> value</p>\n<p><img src=\"https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png\" alt=\"image-20210605221808225\"></p>\n<p>And you will see the effect of the config.js, a title element displayed in the top-left corner</p>\n<p><img src=\"https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png\" alt=\"image-20210605221900646\"></p>\n<h3 id=\"root-README-md\"><a href=\"#root-README-md\" class=\"headerlink\" title=\"root README.md\"></a>root README.md</h3><p>Add these lines at the top of <em>root README.md</em>:</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">---\nhome: true\nherImage: &#x2F;hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: &#x2F;guide&#x2F;\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>You can change the element content as you want, the <em>hereImage</em> key should be removed if you don’t need it. And if you need a big logo on your document home page, you should know some basic knowledge about <a href=\"https://vuepress.vuejs.org/guide/assets.html#relative-urls\">vuepress asset</a>.</p>\n<p>The content below the <a href=\"https://jekyllrb.com/docs/front-matter/\">YAML font matter</a> will be display as normal markdown content.</p>\n<p>Now, I’ll tell you what is ever YAML font matter key-value pair used for:</p>\n<ul>\n<li>home: this page is used for the home page or not</li>\n<li>heroImage: the main logo displayed in the center of the home page</li>\n<li>heroText: the main title displayed in the center of the home page</li>\n<li>tagline: the subtitle under the heroText</li>\n<li>actionText: the text for the central button</li>\n<li>actionLink: the jump target for central button</li>\n<li>features: some feature under the central button<ul>\n<li>title: feature title</li>\n<li>details: feature description</li>\n</ul>\n</li>\n<li>footer: the text display in the footer of the site</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png\" alt=\"image-20210605223618117\"></p>\n<h3 id=\"Add-navigate-links\"><a href=\"#Add-navigate-links\" class=\"headerlink\" title=\"Add navigate links\"></a>Add navigate links</h3><p>Open <em>config.js</em>, and add these lines:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">themeConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  nav<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>As you can see, there’s an array named <em>nav</em>, you can add its member like:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>text: the text display in navigate bar</li>\n<li>link: the link for navigating, you can use a relative or absolute URL</li>\n</ul>\n<p>If you would like to know about the navigation bar, you can visit <a href=\"https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links\">navbar links</a> in vuepress document.</p>\n<h3 id=\"Start-writing\"><a href=\"#Start-writing\" class=\"headerlink\" title=\"Start writing\"></a>Start writing</h3><p>After all of these configurations, now you can start to write documents via markdown.</p>\n<p>Create a folder named <em>guide</em> in /docs:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png\" alt=\"image-20210605223831721\"></p>\n<p>Create a README.me in /docs/guide</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png\" alt=\"image-20210605223942377\"></p>\n<p>Add this YAML font matter at the top of this README.md:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Enjoy!</p>\n<p><img src=\"https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png\" alt=\"image-20210605224226895\"></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is how the document site looks like after the above configurations, </p>\n<p><img src=\"https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png\" alt=\"image-20210605225004660\"></p>\n<p>I’ll list some point that you maybe didn’t know:</p>\n<ul>\n<li>REAME.md equals to index.html in website building</li>\n<li>The local file structure of our example:<ul>\n<li>.temp</li>\n<li>docs<ul>\n<li>.vuepress<ul>\n<li>config.js</li>\n</ul>\n</li>\n<li>guide<ul>\n<li>README.md</li>\n</ul>\n</li>\n<li>README.md</li>\n</ul>\n</li>\n<li>node_modules</li>\n<li>.gitignore</li>\n<li>package.json</li>\n<li>yarn.lock</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><p>After all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out <a href=\"https://vuepress.vuejs.org/guide/deploy.html#github-pages\">vuepress document</a>.</p>\n<h3 id=\"Create-deploy-script\"><a href=\"#Create-deploy-script\" class=\"headerlink\" title=\"Create deploy script\"></a>Create deploy script</h3><p>Create a .sh file named deploy.sh in the root directory</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs&#x2F;.vuepress&#x2F;dist\n\n# if you are deploying to a custom domain\n# echo &#39;www.example.com&#39; &gt; CNAME\n\ngit init\ngit add -A\ngit commit -m &#39;deploy&#39;\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;USERNAME&gt;.github.io.git master\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io&#x2F;&lt;REPO&gt;\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;REPO&gt;.git master:gh-pages\n\ncd -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>I’d like to recommend that you shouldn’t just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.</p>\n<p>Since then, you should add this line in the config.js:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;deploy&quot;: &quot;bash deploy.sh&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>And then config.js should look like:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png\" alt=\"image-20210605231251492\"></p>\n<p>As you can see, we are using the windows operating system, but there’s a <code>bash</code> command that’s didn’t exist in windows. How to solve this? The answer is: we don’t even need to solve because we are using git bash. That’s why I recommended you to choose git bash but not the windows cmd or Powershell.</p>\n<p>Now, just run</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Then, turn to GitHub, open the repo for hosting the vuepress document, turn to the <em>Setting</em> page:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png\" alt=\"image-20210605231615793\"></p>\n<p>And go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png\" alt=\"image-20210605231713557\"></p>\n<p>Congratulations! You’ve done all the work!</p>\n"},{"title":"Packing fat jar with Kotlin Gradle DSL script","date":"2021-08-27T14:00:00.000Z","_content":"\nFirst, let's get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check `Kotlin DSL build script`. By the way, if you just want a very simple try, just choose whatever you want `Additional Libraries and Frameworks`, and just keep the default package configuration.\n\n![](https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png)\n\nAs you can see, our project has been successfully initiated by the default way. And a simple `HelloWorld` kotlin file has been created.\n![](https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png)\n\nIt's time to release our HelloWorld project to people!\n\nAll our work based on the plugin [shadow](https://github.com/johnrengelman/shadow), so let's install it:\n```kotlin\nplugins {\n    kotlin(\"jvm\") version \"1.5.21\"\n    id(\"com.github.johnrengelman.shadow\") version \"7.0.0\" //you can modify the version here to the latest\n}\n```\n\nThe last configuration item is, append there's code to the end of the script file:\n```kotlin\ntasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>() {\n    manifest {\n        attributes[\"Main-Class\"] = \"LauncherKt\" //you must modify here to your own main class\n                                                //note: if you are using kotlin like me, don't forget to \n                                                //append \"Kt\" as a suffix of the class name\n    }\n}\n```\n\nThis is the final result of the jobs above, now we can start making our fat jar.\n\n![](https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png)\n\nCheck out the sidebar right side, you will found that there's a `shadow` section in the Gradle task list, right-click the section of `shadowJar`, and just waiting for the process to run out.\n\n![](https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png)\n\nIt's time to gain our reward, turn into `<your project directory>/build/lib`, have a look at the jar with `-all` suffix---that's what we exactly need to.\n\n![](https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png)\nNow you can execute this artifact via java runtime:\n```shell\njava -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar <arguments, splitting with spaces>\n```\n![](https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png)\n\nHave fun, and enjoy!","source":"_posts/Packing fat jar with Kotlin Gradle DSL script.md","raw":"---\ntitle: 'Packing fat jar with Kotlin Gradle DSL script'\ndate: 2021-08-27 22:00:00\ntags: Kotlin\n---\n\nFirst, let's get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check `Kotlin DSL build script`. By the way, if you just want a very simple try, just choose whatever you want `Additional Libraries and Frameworks`, and just keep the default package configuration.\n\n![](https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png)\n\nAs you can see, our project has been successfully initiated by the default way. And a simple `HelloWorld` kotlin file has been created.\n![](https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png)\n\nIt's time to release our HelloWorld project to people!\n\nAll our work based on the plugin [shadow](https://github.com/johnrengelman/shadow), so let's install it:\n```kotlin\nplugins {\n    kotlin(\"jvm\") version \"1.5.21\"\n    id(\"com.github.johnrengelman.shadow\") version \"7.0.0\" //you can modify the version here to the latest\n}\n```\n\nThe last configuration item is, append there's code to the end of the script file:\n```kotlin\ntasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>() {\n    manifest {\n        attributes[\"Main-Class\"] = \"LauncherKt\" //you must modify here to your own main class\n                                                //note: if you are using kotlin like me, don't forget to \n                                                //append \"Kt\" as a suffix of the class name\n    }\n}\n```\n\nThis is the final result of the jobs above, now we can start making our fat jar.\n\n![](https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png)\n\nCheck out the sidebar right side, you will found that there's a `shadow` section in the Gradle task list, right-click the section of `shadowJar`, and just waiting for the process to run out.\n\n![](https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png)\n\nIt's time to gain our reward, turn into `<your project directory>/build/lib`, have a look at the jar with `-all` suffix---that's what we exactly need to.\n\n![](https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png)\nNow you can execute this artifact via java runtime:\n```shell\njava -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar <arguments, splitting with spaces>\n```\n![](https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png)\n\nHave fun, and enjoy!","slug":"Packing fat jar with Kotlin Gradle DSL script","published":1,"updated":"2022-04-13T14:37:09.492Z","_id":"cksufb2cd0001s0w128mqhasm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>First, let’s get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check <code>Kotlin DSL build script</code>. By the way, if you just want a very simple try, just choose whatever you want <code>Additional Libraries and Frameworks</code>, and just keep the default package configuration.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png\"></p>\n<p>As you can see, our project has been successfully initiated by the default way. And a simple <code>HelloWorld</code> kotlin file has been created.<br><img src=\"https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png\"></p>\n<p>It’s time to release our HelloWorld project to people!</p>\n<p>All our work based on the plugin <a href=\"https://github.com/johnrengelman/shadow\">shadow</a>, so let’s install it:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jvm\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.5.21\"</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.github.johnrengelman.shadow\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"7.0.0\"</span> <span class=\"token comment\">//you can modify the version here to the latest</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>The last configuration item is, append there’s code to the end of the script file:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">tasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>jengelman<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>ShadowJar<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    manifest <span class=\"token punctuation\">&#123;</span>\n        attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"Main-Class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LauncherKt\"</span> <span class=\"token comment\">//you must modify here to your own main class</span>\n                                                <span class=\"token comment\">//note: if you are using kotlin like me, don't forget to </span>\n                                                <span class=\"token comment\">//append \"Kt\" as a suffix of the class name</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is the final result of the jobs above, now we can start making our fat jar.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png\"></p>\n<p>Check out the sidebar right side, you will found that there’s a <code>shadow</code> section in the Gradle task list, right-click the section of <code>shadowJar</code>, and just waiting for the process to run out.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png\"></p>\n<p>It’s time to gain our reward, turn into <code>&lt;your project directory&gt;/build/lib</code>, have a look at the jar with <code>-all</code> suffix—that’s what we exactly need to.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png\"><br>Now you can execute this artifact via java runtime:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar &lt;arguments, splitting with spaces&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png\"></p>\n<p>Have fun, and enjoy!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>First, let’s get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check <code>Kotlin DSL build script</code>. By the way, if you just want a very simple try, just choose whatever you want <code>Additional Libraries and Frameworks</code>, and just keep the default package configuration.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png\"></p>\n<p>As you can see, our project has been successfully initiated by the default way. And a simple <code>HelloWorld</code> kotlin file has been created.<br><img src=\"https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png\"></p>\n<p>It’s time to release our HelloWorld project to people!</p>\n<p>All our work based on the plugin <a href=\"https://github.com/johnrengelman/shadow\">shadow</a>, so let’s install it:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jvm\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.5.21\"</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.github.johnrengelman.shadow\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"7.0.0\"</span> <span class=\"token comment\">//you can modify the version here to the latest</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>The last configuration item is, append there’s code to the end of the script file:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">tasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>jengelman<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>ShadowJar<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    manifest <span class=\"token punctuation\">&#123;</span>\n        attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"Main-Class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LauncherKt\"</span> <span class=\"token comment\">//you must modify here to your own main class</span>\n                                                <span class=\"token comment\">//note: if you are using kotlin like me, don't forget to </span>\n                                                <span class=\"token comment\">//append \"Kt\" as a suffix of the class name</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is the final result of the jobs above, now we can start making our fat jar.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png\"></p>\n<p>Check out the sidebar right side, you will found that there’s a <code>shadow</code> section in the Gradle task list, right-click the section of <code>shadowJar</code>, and just waiting for the process to run out.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png\"></p>\n<p>It’s time to gain our reward, turn into <code>&lt;your project directory&gt;/build/lib</code>, have a look at the jar with <code>-all</code> suffix—that’s what we exactly need to.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png\"><br>Now you can execute this artifact via java runtime:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar &lt;arguments, splitting with spaces&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png\"></p>\n<p>Have fun, and enjoy!</p>\n"},{"title":"How to fix the problem that process.Exited handler will not execute","date":"2021-08-27T14:22:00.000Z","_content":"\nAs the code below:\n\n```cs\nvar path = @\"xxx.exe\";\n\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    }\n};\n\nprocess.Start();\n```\n\nIf there's a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?\n\nLet's add a event handler for `process.Exited` event:\n\n```cs\nprocess.Exited += (_, _) =>\n{\n    Console.WriteLine($\"`Process exit with code {process.ExitCode}`\");\n;\n```\n\nRun our application, and the question is: the code above didn't work properly, when the process that we started to exit, the `process.Exited` event handler didn't execute.\n\nSo you will check the [Document](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0), they say: `It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.` So what if we set EnableRaisingEvents to *true*?\n\n```cs\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    },\n    EnableRaisingEvents = true\n};\n```\n\nIn the code above, we've set EnableRaisingEvents to *true*, but if we run the application again, the ```process.Exited``` event handler didn't execute either, what we gonna do now?\n\nIf you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won't exit until the executable exited, we need to append the code below after the executable file started:\n\n```cs\nprocess.WaitForExit()\n```\n\nWe just run the application again, the console output `Process exit with code {process.ExitCode}` is displayed successfully now.","source":"_posts/How to fix the problem that process.Exited handler will not execute.md","raw":"---\ntitle: 'How to fix the problem that process.Exited handler will not execute'\ndate: 2021-08-27 22:22:00\ntags: CSharp\n---\n\nAs the code below:\n\n```cs\nvar path = @\"xxx.exe\";\n\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    }\n};\n\nprocess.Start();\n```\n\nIf there's a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?\n\nLet's add a event handler for `process.Exited` event:\n\n```cs\nprocess.Exited += (_, _) =>\n{\n    Console.WriteLine($\"`Process exit with code {process.ExitCode}`\");\n;\n```\n\nRun our application, and the question is: the code above didn't work properly, when the process that we started to exit, the `process.Exited` event handler didn't execute.\n\nSo you will check the [Document](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0), they say: `It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.` So what if we set EnableRaisingEvents to *true*?\n\n```cs\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    },\n    EnableRaisingEvents = true\n};\n```\n\nIn the code above, we've set EnableRaisingEvents to *true*, but if we run the application again, the ```process.Exited``` event handler didn't execute either, what we gonna do now?\n\nIf you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won't exit until the executable exited, we need to append the code below after the executable file started:\n\n```cs\nprocess.WaitForExit()\n```\n\nWe just run the application again, the console output `Process exit with code {process.ExitCode}` is displayed successfully now.","slug":"How to fix the problem that process.Exited handler will not execute","published":1,"updated":"2022-04-13T14:37:09.491Z","_id":"cksufb2cg0003s0w17ycw9doo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>As the code below:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var path &#x3D; @&quot;xxx.exe&quot;;\n\nvar process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;\n&#125;;\n\nprocess.Start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If there’s a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?</p>\n<p>Let’s add a event handler for <code>process.Exited</code> event:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.Exited +&#x3D; (_, _) &#x3D;&gt;\n&#123;\n    Console.WriteLine($&quot;&#96;Process exit with code &#123;process.ExitCode&#125;&#96;&quot;);\n;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Run our application, and the question is: the code above didn’t work properly, when the process that we started to exit, the <code>process.Exited</code> event handler didn’t execute.</p>\n<p>So you will check the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0\">Document</a>, they say: <code>It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.</code> So what if we set EnableRaisingEvents to <em>true</em>?</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;,\n    EnableRaisingEvents &#x3D; true\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>In the code above, we’ve set EnableRaisingEvents to <em>true</em>, but if we run the application again, the <code>process.Exited</code> event handler didn’t execute either, what we gonna do now?</p>\n<p>If you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won’t exit until the executable exited, we need to append the code below after the executable file started:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.WaitForExit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>We just run the application again, the console output <code>Process exit with code &#123;process.ExitCode&#125;</code> is displayed successfully now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As the code below:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var path &#x3D; @&quot;xxx.exe&quot;;\n\nvar process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;\n&#125;;\n\nprocess.Start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If there’s a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?</p>\n<p>Let’s add a event handler for <code>process.Exited</code> event:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.Exited +&#x3D; (_, _) &#x3D;&gt;\n&#123;\n    Console.WriteLine($&quot;&#96;Process exit with code &#123;process.ExitCode&#125;&#96;&quot;);\n;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Run our application, and the question is: the code above didn’t work properly, when the process that we started to exit, the <code>process.Exited</code> event handler didn’t execute.</p>\n<p>So you will check the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0\">Document</a>, they say: <code>It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.</code> So what if we set EnableRaisingEvents to <em>true</em>?</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;,\n    EnableRaisingEvents &#x3D; true\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>In the code above, we’ve set EnableRaisingEvents to <em>true</em>, but if we run the application again, the <code>process.Exited</code> event handler didn’t execute either, what we gonna do now?</p>\n<p>If you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won’t exit until the executable exited, we need to append the code below after the executable file started:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.WaitForExit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>We just run the application again, the console output <code>Process exit with code &#123;process.ExitCode&#125;</code> is displayed successfully now.</p>\n"},{"title":"Dynamically convert JSON to C# object(Chinese)","date":"2021-08-27T14:00:00.000Z","_content":"\n## Scenario\n\n最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？\n\n![](https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png)\n\n首先我们来分析这个场景的逻辑。这个方法有一个`string`参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，**可是编译器不知道**。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的`Type`属性来判断哪个基类是最后要返回的。\n\n这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。\n\n## Elegant\n\n酷哥应该如何做？ 答案是：**反射**。\n\n首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个`Type`属性，这是一个枚举，并且包含默认值，所以知道这个`Type`属性的值是什么，就知道这个实体类是谁了。所以我们使用`Activator.CreateInstance`来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。\n\n有了这个属性，我们再根据`JsonConvert.DeserializeObject`来创建一个基类的实例，**这个基类实例的数据是丢失的**，我们会用到这个基类实例的`Type`属性。\n\n接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：\n首先找出唯一的和这个基类的`Type`相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用`JsonConvert.DeserializeObject(json, type)`这个重载方法获取到object然后再强转成基类对象就完事了。","source":"_posts/Dynamically convert JSON to CSharp object.md","raw":"---\ntitle: 'Dynamically convert JSON to C# object(Chinese)'\ndate: 2021-08-27 22:00:00\ntags: CSharp\ncategories: dev\n---\n\n## Scenario\n\n最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？\n\n![](https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png)\n\n首先我们来分析这个场景的逻辑。这个方法有一个`string`参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，**可是编译器不知道**。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的`Type`属性来判断哪个基类是最后要返回的。\n\n这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。\n\n## Elegant\n\n酷哥应该如何做？ 答案是：**反射**。\n\n首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个`Type`属性，这是一个枚举，并且包含默认值，所以知道这个`Type`属性的值是什么，就知道这个实体类是谁了。所以我们使用`Activator.CreateInstance`来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。\n\n有了这个属性，我们再根据`JsonConvert.DeserializeObject`来创建一个基类的实例，**这个基类实例的数据是丢失的**，我们会用到这个基类实例的`Type`属性。\n\n接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：\n首先找出唯一的和这个基类的`Type`相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用`JsonConvert.DeserializeObject(json, type)`这个重载方法获取到object然后再强转成基类对象就完事了。","slug":"Dynamically convert JSON to CSharp object","published":1,"updated":"2022-04-13T15:37:35.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xqmjyj0003idijch7m6k1n","content":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？</p>\n<p><img src=\"https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png\"></p>\n<p>首先我们来分析这个场景的逻辑。这个方法有一个<code>string</code>参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，<strong>可是编译器不知道</strong>。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的<code>Type</code>属性来判断哪个基类是最后要返回的。</p>\n<p>这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。</p>\n<h2 id=\"Elegant\"><a href=\"#Elegant\" class=\"headerlink\" title=\"Elegant\"></a>Elegant</h2><p>酷哥应该如何做？ 答案是：<strong>反射</strong>。</p>\n<p>首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个<code>Type</code>属性，这是一个枚举，并且包含默认值，所以知道这个<code>Type</code>属性的值是什么，就知道这个实体类是谁了。所以我们使用<code>Activator.CreateInstance</code>来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。</p>\n<p>有了这个属性，我们再根据<code>JsonConvert.DeserializeObject</code>来创建一个基类的实例，<strong>这个基类实例的数据是丢失的</strong>，我们会用到这个基类实例的<code>Type</code>属性。</p>\n<p>接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：<br>首先找出唯一的和这个基类的<code>Type</code>相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用<code>JsonConvert.DeserializeObject(json, type)</code>这个重载方法获取到object然后再强转成基类对象就完事了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？</p>\n<p><img src=\"https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png\"></p>\n<p>首先我们来分析这个场景的逻辑。这个方法有一个<code>string</code>参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，<strong>可是编译器不知道</strong>。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的<code>Type</code>属性来判断哪个基类是最后要返回的。</p>\n<p>这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。</p>\n<h2 id=\"Elegant\"><a href=\"#Elegant\" class=\"headerlink\" title=\"Elegant\"></a>Elegant</h2><p>酷哥应该如何做？ 答案是：<strong>反射</strong>。</p>\n<p>首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个<code>Type</code>属性，这是一个枚举，并且包含默认值，所以知道这个<code>Type</code>属性的值是什么，就知道这个实体类是谁了。所以我们使用<code>Activator.CreateInstance</code>来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。</p>\n<p>有了这个属性，我们再根据<code>JsonConvert.DeserializeObject</code>来创建一个基类的实例，<strong>这个基类实例的数据是丢失的</strong>，我们会用到这个基类实例的<code>Type</code>属性。</p>\n<p>接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：<br>首先找出唯一的和这个基类的<code>Type</code>相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用<code>JsonConvert.DeserializeObject(json, type)</code>这个重载方法获取到object然后再强转成基类对象就完事了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksuf759r0002jow1h8ffehor","category_id":"cl1xqe43o0000gzij8rwhfgli","_id":"cl1xqe43r0001gzij17go0hmc"},{"post_id":"cl1xqmjyj0003idijch7m6k1n","category_id":"cl1xp6owj00029aij5ssfh16b","_id":"cl1xqmjyk0005idij4t80ewy1"}],"PostTag":[{"post_id":"cksuf759r0002jow1h8ffehor","tag_id":"cksuf759v0003jow1b5526tjj","_id":"cksuf759w0004jow1fpi79yeg"},{"post_id":"cksufb2c90000s0w10xz05imz","tag_id":"cksufb2cf0002s0w127eq4huo","_id":"cksufb2cj0006s0w186r9hh1t"},{"post_id":"cksufb2cd0001s0w128mqhasm","tag_id":"cksufb2ci0005s0w1649j0hb6","_id":"cksufb2cj0008s0w117fbafek"},{"post_id":"cksufb2cg0003s0w17ycw9doo","tag_id":"cksufb2cj0007s0w11ceif7l1","_id":"cksufb2ck000as0w15xteg7ya"},{"post_id":"cl1xqmjyj0003idijch7m6k1n","tag_id":"cksufb2cj0007s0w11ceif7l1","_id":"cl1xqmjyk0004idij8tx3eh3n"}],"Tag":[{"name":"Test","_id":"cksuf759v0003jow1b5526tjj"},{"name":"Web","_id":"cksufb2cf0002s0w127eq4huo"},{"name":"Kotlin","_id":"cksufb2ci0005s0w1649j0hb6"},{"name":"CSharp","_id":"cksufb2cj0007s0w11ceif7l1"}]}}