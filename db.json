{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/aero-dual/source/img/aero-dual-color-change.jpg","path":"img/aero-dual-color-change.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/default-banner-dark.jpg","path":"img/default-banner-dark.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/aero-dual-thumbnail.jpg","path":"img/aero-dual-thumbnail.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/last_sunsetting_2021.png","path":"img/last_sunsetting_2021.png","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/img/default-banner-light.jpg","path":"img/default-banner-light.jpg","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/css/style.dark.styl","path":"css/style.dark.styl","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/css/style.light.styl","path":"css/style.light.styl","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/aero-dual/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Dynamically convert JSON to CSharp object.md","hash":"78014212741aa5f3f1946b2ac5dc0fff25a37bb4","modified":1658307608618},{"_id":"source/_posts/From-view-of-WPF-developer-talking-something-about-Flutter.md","hash":"9a7f12585d82c19aeb9b480489a42cbe57372b67","modified":1658307608619},{"_id":"source/_posts/Hello-World-0.md","hash":"8cc4c6b474ee876c6cb99a20746473596559b989","modified":1658307608619},{"_id":"source/_posts/How to fix the problem that process.Exited handler will not execute.md","hash":"bf1b8cfd35f761f1412360639ca180649c0d2201","modified":1658307608621},{"_id":"source/_posts/There-should-be-exactly-one-item-with-DropdownButtonFormField-s-value.md","hash":"c3a9dea39ba5155505c6787b16985b734b334bf1","modified":1658307608622},{"_id":"source/_posts/How to build a document website via Vuepress.md","hash":"1b4ed0e429fddaa9c887f6cb71e00440a95f0ede","modified":1658307608620},{"_id":"source/_posts/subjective-agency-under-adversity.md","hash":"983b1fe8a7759885206088f4761f8c7b6c40990f","modified":1658400951798},{"_id":"source/_posts/Permanently add environment variables on Fedora linux.md","hash":"3fc0210d0cc437fc08a777934c787a42ff3a668a","modified":1658307608621},{"_id":"source/_posts/Packing fat jar with Kotlin Gradle DSL script.md","hash":"f80a3e5d21ff97418178acdc6692f6661e9089ef","modified":1658307608621},{"_id":"source/about/index.md","hash":"3c021f8818a2ea49e7372672532b4907a2a72cab","modified":1658565605797},{"_id":"source/works/index.md","hash":"c19444a95c71b78037461adb2e43685e6f678411","modified":1658307608624},{"_id":"themes/aero-dual/LICENSE","hash":"8c948602d1c1141753910a783f07830ac143fa48","modified":1658307608625},{"_id":"themes/aero-dual/_config.yml","hash":"1938d5f74a7295f61ccbafef99ab06708eec49a2","modified":1658374908148},{"_id":"themes/aero-dual/README.md","hash":"a4cc3f1974cec674bbfa9018bd53ab444f234fc5","modified":1658307608625},{"_id":"themes/aero-dual/languages/en.yml","hash":"73e36b4c485961c0f34525ce59bd1e1968c0cf11","modified":1658307608626},{"_id":"themes/aero-dual/languages/zh-CN.yml","hash":"e812a2eb720c6a85d7f7b914b09334a41e77629d","modified":1658307608627},{"_id":"themes/aero-dual/layout/archive.ejs","hash":"962626fe03d83a3c2b438bc8beea24f3e05aede1","modified":1658307608634},{"_id":"themes/aero-dual/layout/layout.ejs","hash":"a9d7466cabc0649a62a330e08a71e98f28d542cc","modified":1658307608634},{"_id":"themes/aero-dual/layout/index.ejs","hash":"2598b1f764f8bd9446930855c2c79e724027dbff","modified":1658307608634},{"_id":"themes/aero-dual/layout/page.ejs","hash":"b5a1970a6c5c14fccd7c06576de0766bc4558352","modified":1658307608635},{"_id":"themes/aero-dual/layout/post.ejs","hash":"b5a1970a6c5c14fccd7c06576de0766bc4558352","modified":1658307608635},{"_id":"themes/aero-dual/source/css/_base.styl","hash":"0f1592f516f50f75450dbc1832f52b15b2e3e137","modified":1658307608636},{"_id":"themes/aero-dual/source/css/style.dark.styl","hash":"dd70032281cf889a805c41160063046676e0ca09","modified":1658307608644},{"_id":"themes/aero-dual/source/css/style.light.styl","hash":"2b37bf088f8ec87e257fab2136a9fa19fc3f81e4","modified":1658307608645},{"_id":"themes/aero-dual/source/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1658307608669},{"_id":"themes/aero-dual/layout/_partial/archive-entry.ejs","hash":"5b8a65fc754ad88e03aa1705fda5e5ac8bf50c8b","modified":1658307608629},{"_id":"themes/aero-dual/layout/_partial/after-footer.ejs","hash":"0bf56636fb5c54091b2f882401a3479cf5c4e3f8","modified":1658307608628},{"_id":"themes/aero-dual/layout/_partial/footer.ejs","hash":"a3b050ece4811e4ac08fef1bab04acbb9d67f99f","modified":1658307608629},{"_id":"themes/aero-dual/layout/_partial/google-analytics.ejs","hash":"fea22a7259f09fee183ee34498dc976568318117","modified":1658307608629},{"_id":"themes/aero-dual/layout/_partial/header.ejs","hash":"3e88e83771eeeeac6eaec50bf231b68f24ff2169","modified":1658307608630},{"_id":"themes/aero-dual/layout/_partial/html-head.ejs","hash":"8d05dd88647be1a34aa3b60bdd123ef846a875ec","modified":1658307608631},{"_id":"themes/aero-dual/layout/_partial/index-entry.ejs","hash":"f6c1db92272298589cd77264cc24dd88dad28275","modified":1658307608631},{"_id":"themes/aero-dual/layout/_partial/pagination.ejs","hash":"66b6ba50637d1abec50d2af9fe67ef3300b865c7","modified":1658307608632},{"_id":"themes/aero-dual/source/css/_helpers/mixins.styl","hash":"640dbb0e8b569c676c4e37feffea31ce6412af9b","modified":1658307608637},{"_id":"themes/aero-dual/source/css/_partial/archive-entry.styl","hash":"e7017e166535d55d3a0dba67807e244e1df46bc4","modified":1658307608637},{"_id":"themes/aero-dual/source/css/_partial/article.styl","hash":"4ef23cf44739e259041ffcf827397fb765977b74","modified":1658307608638},{"_id":"themes/aero-dual/source/css/_partial/footer.styl","hash":"86a04589a083c7ae1aebdf21b14eb93d56e19fe5","modified":1658307608638},{"_id":"themes/aero-dual/source/css/_partial/header.styl","hash":"d611d7593bed9ae505e14123ae7c5f889ea53b94","modified":1658307608639},{"_id":"themes/aero-dual/source/css/_partial/index-entry.styl","hash":"8f0e2faa01eba2f3db454d9b3a95adb290b31151","modified":1658307608639},{"_id":"themes/aero-dual/source/css/_partial/pagination.styl","hash":"e0060472222a2ca560951c2b28f7124d7bbd6f36","modified":1658307608640},{"_id":"themes/aero-dual/source/css/_typography/code.styl","hash":"4aade964f1313d1e6b1b753afe2523fb05b5053c","modified":1658307608641},{"_id":"themes/aero-dual/source/css/_typography/highlight.dracula.styl","hash":"725f009b1341b8f3d0766971073d17c4b65d5616","modified":1658307608641},{"_id":"themes/aero-dual/source/css/_typography/highlight.gruvbox-light.styl","hash":"2d7a48486f81b1d736d3693d720f052fb0073cd0","modified":1658307608641},{"_id":"themes/aero-dual/source/css/_typography/highlight.monikai-sublime.styl","hash":"28d468803b21d1608769a1a65bb1eda4e82f897f","modified":1658307608642},{"_id":"themes/aero-dual/layout/_partial/post/article.ejs","hash":"9a24d9843ffb3bc59ceb88d6d4058f21583b9917","modified":1658307608632},{"_id":"themes/aero-dual/source/css/_typography/typo.css","hash":"08935d48800b39c52a32bb97d7dcb35b0714d283","modified":1658307608643},{"_id":"themes/aero-dual/layout/_partial/post/categories.ejs","hash":"8a6e23f5c76abc7e5bca18f6d2054dd6c1636864","modified":1658307608632},{"_id":"themes/aero-dual/layout/_partial/post/tags.ejs","hash":"d72d1491636d20b86bd2edcf272691e943e66410","modified":1658307608633},{"_id":"themes/aero-dual/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1658307608644},{"_id":"themes/aero-dual/source/js/highlight.pack.js","hash":"e3dda917d598aa2f91e6e4d5480106365f965203","modified":1658307608669},{"_id":"themes/aero-dual/source/img/aero-dual-color-change.jpg","hash":"d9c779262e2e4d9f54e42e54d63c94b54294a4dc","modified":1658307608647},{"_id":"themes/aero-dual/source/img/aero-dual-thumbnail.jpg","hash":"939c91a321b1caf579262fab7d8837812e21b5a9","modified":1658307608649},{"_id":"themes/aero-dual/source/img/default-banner-dark.jpg","hash":"e15832861cc6e5d55d08fbbe9d1cd472fe1a876e","modified":1658307608651},{"_id":"themes/aero-dual/source/img/default-banner-light.jpg","hash":"df4daccf84205e76708fc5e703dc2476f59a9d9d","modified":1658307608654},{"_id":"themes/aero-dual/source/img/last_sunsetting_2021.png","hash":"952a63210210252c0ed0aff633b9b76a5db5d69f","modified":1658307608667},{"_id":"source/_posts/纪念我今天改掉了伴随我18年的名字.md","hash":"c31cc245473179b9b8b9facfb340e15d35b62010","modified":1658400945787},{"_id":"source/_posts/如何在云南改名字.md","hash":"69b4b4f6c1ea8983494be54510c6b34e00d12941","modified":1658401255735},{"_id":"source/_posts/如何改变你的名字.md","hash":"f9f4109af300ff7bd132a7ab6b5337556930f5ad","modified":1658406993908},{"_id":"source/links/index.md","hash":"1dc619f391c7da3f872a1ec740fd52facc162941","modified":1658565563056}],"Category":[{"name":"dev","_id":"cl5te2ayv0004xona9cm24f1z"},{"name":"test","_id":"cl5te2az4000fxonae82nb7pc"},{"name":"web","_id":"cl5te2az7000mxona65sx2glq"},{"name":"母语时间","_id":"cl5te2az8000qxona25ci4l5v"},{"name":"system","_id":"cl5te2az9000txona16s67fry"},{"name":"社会生活","_id":"cl5uxajlw0001cgnahj9p45r6"}],"Data":[],"Page":[{"title":"About","date":"2021-04-02T15:42:50.000Z","_content":"\n### 关于我\n\n+ 中国高中在读学生，身处云南地级市\n+ 技术栈浅薄，熟悉C#，正在尝试Dart\n+ 基本没有通过写代码赚过一毛钱\n+ 热爱折腾，主要使用Windows/Android/Linux\n\n<summary>\n\n### 这里的前世今生\n\n我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做\"ahpxarctic.cn\"的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了\"ahpxchina.cn\"这个域名3年。\n\n于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。\n\n不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是~~因为根本看不懂~~，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。\n\n之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。\n\n</summary>\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-04-02 23:42:50\n---\n\n### 关于我\n\n+ 中国高中在读学生，身处云南地级市\n+ 技术栈浅薄，熟悉C#，正在尝试Dart\n+ 基本没有通过写代码赚过一毛钱\n+ 热爱折腾，主要使用Windows/Android/Linux\n\n<summary>\n\n### 这里的前世今生\n\n我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做\"ahpxarctic.cn\"的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了\"ahpxchina.cn\"这个域名3年。\n\n于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。\n\n不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是~~因为根本看不懂~~，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。\n\n之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。\n\n</summary>\n\n","updated":"2022-07-23T08:40:05.797Z","path":"about/index.html","_id":"cl5te2aym0000xona9cloctpr","comments":1,"layout":"page","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>中国高中在读学生，身处云南地级市</li>\n<li>技术栈浅薄，熟悉C#，正在尝试Dart</li>\n<li>基本没有通过写代码赚过一毛钱</li>\n<li>热爱折腾，主要使用Windows/Android/Linux</li>\n</ul>\n<summary>\n\n<h3 id=\"这里的前世今生\"><a href=\"#这里的前世今生\" class=\"headerlink\" title=\"这里的前世今生\"></a>这里的前世今生</h3><p>我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做”ahpxarctic.cn”的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了”ahpxchina.cn”这个域名3年。</p>\n<p>于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。</p>\n<p>不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是<del>因为根本看不懂</del>，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。</p>\n<p>之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。</p>\n</summary>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>中国高中在读学生，身处云南地级市</li>\n<li>技术栈浅薄，熟悉C#，正在尝试Dart</li>\n<li>基本没有通过写代码赚过一毛钱</li>\n<li>热爱折腾，主要使用Windows/Android/Linux</li>\n</ul>\n<summary>\n\n<h3 id=\"这里的前世今生\"><a href=\"#这里的前世今生\" class=\"headerlink\" title=\"这里的前世今生\"></a>这里的前世今生</h3><p>我曾多次搭建过博客这类的网站，差不多是2019年4月我就成功搭好了我的第一个博客，用的是vultr的vps，使用typecho，还有一个叫做”ahpxarctic.cn”的域名。这个博客存活时间很短，而且也没有几篇有意义的内容，所以当时的那个vps就直接被我销毁了。后来又是同样配置的博客，虽然也是同样的夭折，但是买了”ahpxchina.cn”这个域名3年。</p>\n<p>于是我就很久没有搭建过这类的网站。直到去年双十一，腾讯云的vps促销，我又买了一台低价的国内vps。因为国内的vps搭建网站都需要进行备案，而我的名字里有个生僻字不能在线上直接备案，到本地相关单位去报备又过于麻烦，遂搁置吃灰至今。</p>\n<p>不过现在，我用hexo和github pages搭建了这个静态博客。当年之所以没有选择hexo的方案是<del>因为根本看不懂</del>，那时候不知道什么是git，还在用易语言来编程，所以我选择了简单易用的typecho，甚至还用了宝塔面板，基本上属于有手就能搭建网站的程度。</p>\n<p>之前写的几篇文章也都没有备份。现在这个托管在github的博客，将会是一个新的开始。</p>\n</summary>\n\n"},{"title":"Works","date":"2021-04-02T15:39:23.000Z","_content":"\n### [ModuleLauncher.Re](https://github.com/SinoAHpx/ModuleLauncher.Re)\n\n> Cross-platform Minecraft Launcher library\n>\n> [MIT License](https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE)\n\n### [Mirai.Net](https://github.com/SinoAHpx/Mirai.Net)\n\n> Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。\n>\n> [AGPL-3.0 License](https://github.com/SinoAHpx/Mirai.Net/blob/2.4/LICENSE)\n\n### [dirai](https://github.com/SinoAHpx/dirai)\n> dirai是一个mirai-api-http的社区sdk\n>\n> AGPL-3.0 Licensed\n\n### [Manganese](https://github.com/SinoAHpx/Manganese/blob/master/LICENSE)\n> A handy extensions library.","source":"works/index.md","raw":"---\ntitle: Works\ndate: 2021-04-02 23:39:23\n---\n\n### [ModuleLauncher.Re](https://github.com/SinoAHpx/ModuleLauncher.Re)\n\n> Cross-platform Minecraft Launcher library\n>\n> [MIT License](https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE)\n\n### [Mirai.Net](https://github.com/SinoAHpx/Mirai.Net)\n\n> Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。\n>\n> [AGPL-3.0 License](https://github.com/SinoAHpx/Mirai.Net/blob/2.4/LICENSE)\n\n### [dirai](https://github.com/SinoAHpx/dirai)\n> dirai是一个mirai-api-http的社区sdk\n>\n> AGPL-3.0 Licensed\n\n### [Manganese](https://github.com/SinoAHpx/Manganese/blob/master/LICENSE)\n> A handy extensions library.","updated":"2022-07-20T09:00:08.624Z","path":"works/index.html","comments":1,"layout":"page","_id":"cl5te2ays0002xonagu9b8739","content":"<h3 id=\"ModuleLauncher-Re\"><a href=\"#ModuleLauncher-Re\" class=\"headerlink\" title=\"ModuleLauncher.Re\"></a><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re\">ModuleLauncher.Re</a></h3><blockquote>\n<p>Cross-platform Minecraft Launcher library</p>\n<p><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE\">MIT License</a></p>\n</blockquote>\n<h3 id=\"Mirai-Net\"><a href=\"#Mirai-Net\" class=\"headerlink\" title=\"Mirai.Net\"></a><a href=\"https://github.com/SinoAHpx/Mirai.Net\">Mirai.Net</a></h3><blockquote>\n<p>Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。</p>\n<p><a href=\"https://github.com/SinoAHpx/Mirai.Net/blob/2.4/LICENSE\">AGPL-3.0 License</a></p>\n</blockquote>\n<h3 id=\"dirai\"><a href=\"#dirai\" class=\"headerlink\" title=\"dirai\"></a><a href=\"https://github.com/SinoAHpx/dirai\">dirai</a></h3><blockquote>\n<p>dirai是一个mirai-api-http的社区sdk</p>\n<p>AGPL-3.0 Licensed</p>\n</blockquote>\n<h3 id=\"Manganese\"><a href=\"#Manganese\" class=\"headerlink\" title=\"Manganese\"></a><a href=\"https://github.com/SinoAHpx/Manganese/blob/master/LICENSE\">Manganese</a></h3><blockquote>\n<p>A handy extensions library.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ModuleLauncher-Re\"><a href=\"#ModuleLauncher-Re\" class=\"headerlink\" title=\"ModuleLauncher.Re\"></a><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re\">ModuleLauncher.Re</a></h3><blockquote>\n<p>Cross-platform Minecraft Launcher library</p>\n<p><a href=\"https://github.com/SinoAHpx/ModuleLauncher.Re/blob/master/LICENSE\">MIT License</a></p>\n</blockquote>\n<h3 id=\"Mirai-Net\"><a href=\"#Mirai-Net\" class=\"headerlink\" title=\"Mirai.Net\"></a><a href=\"https://github.com/SinoAHpx/Mirai.Net\">Mirai.Net</a></h3><blockquote>\n<p>Mirai.Net是基于mirai-api-http实现的轻量级mirai社区sdk。</p>\n<p><a href=\"https://github.com/SinoAHpx/Mirai.Net/blob/2.4/LICENSE\">AGPL-3.0 License</a></p>\n</blockquote>\n<h3 id=\"dirai\"><a href=\"#dirai\" class=\"headerlink\" title=\"dirai\"></a><a href=\"https://github.com/SinoAHpx/dirai\">dirai</a></h3><blockquote>\n<p>dirai是一个mirai-api-http的社区sdk</p>\n<p>AGPL-3.0 Licensed</p>\n</blockquote>\n<h3 id=\"Manganese\"><a href=\"#Manganese\" class=\"headerlink\" title=\"Manganese\"></a><a href=\"https://github.com/SinoAHpx/Manganese/blob/master/LICENSE\">Manganese</a></h3><blockquote>\n<p>A handy extensions library.</p>\n</blockquote>\n"},{"title":"links","date":"2022-07-23T08:39:23.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-07-23 16:39:23\n---\n","updated":"2022-07-23T08:39:23.056Z","path":"links/index.html","comments":1,"layout":"page","_id":"cl5xn5go000010gnabl98gy3y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Dynamically convert JSON to C# object(Chinese)","date":"2021-08-27T14:00:00.000Z","_content":"\n## Scenario\n\n最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？\n\n![](https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png)\n\n首先我们来分析这个场景的逻辑。这个方法有一个`string`参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，**可是编译器不知道**。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的`Type`属性来判断哪个基类是最后要返回的。\n\n这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。\n\n## Elegant\n\n酷哥应该如何做？ 答案是：**反射**。\n\n首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个`Type`属性，这是一个枚举，并且包含默认值，所以知道这个`Type`属性的值是什么，就知道这个实体类是谁了。所以我们使用`Activator.CreateInstance`来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。\n\n有了这个属性，我们再根据`JsonConvert.DeserializeObject`来创建一个基类的实例，**这个基类实例的数据是丢失的**，我们会用到这个基类实例的`Type`属性。\n\n接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：\n首先找出唯一的和这个基类的`Type`相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用`JsonConvert.DeserializeObject(json, type)`这个重载方法获取到object然后再强转成基类对象就完事了。","source":"_posts/Dynamically convert JSON to CSharp object.md","raw":"---\ntitle: 'Dynamically convert JSON to C# object(Chinese)'\ndate: 2021-08-27 22:00:00\ntags: CSharp\ncategories: dev\n---\n\n## Scenario\n\n最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？\n\n![](https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png)\n\n首先我们来分析这个场景的逻辑。这个方法有一个`string`参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，**可是编译器不知道**。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的`Type`属性来判断哪个基类是最后要返回的。\n\n这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。\n\n## Elegant\n\n酷哥应该如何做？ 答案是：**反射**。\n\n首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个`Type`属性，这是一个枚举，并且包含默认值，所以知道这个`Type`属性的值是什么，就知道这个实体类是谁了。所以我们使用`Activator.CreateInstance`来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。\n\n有了这个属性，我们再根据`JsonConvert.DeserializeObject`来创建一个基类的实例，**这个基类实例的数据是丢失的**，我们会用到这个基类实例的`Type`属性。\n\n接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：\n首先找出唯一的和这个基类的`Type`相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用`JsonConvert.DeserializeObject(json, type)`这个重载方法获取到object然后再强转成基类对象就完事了。","slug":"Dynamically convert JSON to CSharp object","published":1,"updated":"2022-07-20T09:00:08.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2ayp0001xona6biqbi1q","content":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？</p>\n<p><img src=\"https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png\"></p>\n<p>首先我们来分析这个场景的逻辑。这个方法有一个<code>string</code>参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，<strong>可是编译器不知道</strong>。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的<code>Type</code>属性来判断哪个基类是最后要返回的。</p>\n<p>这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。</p>\n<h2 id=\"Elegant\"><a href=\"#Elegant\" class=\"headerlink\" title=\"Elegant\"></a>Elegant</h2><p>酷哥应该如何做？ 答案是：<strong>反射</strong>。</p>\n<p>首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个<code>Type</code>属性，这是一个枚举，并且包含默认值，所以知道这个<code>Type</code>属性的值是什么，就知道这个实体类是谁了。所以我们使用<code>Activator.CreateInstance</code>来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。</p>\n<p>有了这个属性，我们再根据<code>JsonConvert.DeserializeObject</code>来创建一个基类的实例，<strong>这个基类实例的数据是丢失的</strong>，我们会用到这个基类实例的<code>Type</code>属性。</p>\n<p>接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：<br>首先找出唯一的和这个基类的<code>Type</code>相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用<code>JsonConvert.DeserializeObject(json, type)</code>这个重载方法获取到object然后再强转成基类对象就完事了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>最近在重构一个mirai-api-http的C#包装器，好尝试一些以前没有使用过的技术（比如Rx.Net的IObservable接口什么的）。所以我对一些旧有的实现方式进行了一些思考。这篇文章要探讨的场景就是下面这张图片，我们该如何以更简单和优雅的方式来实现同样的需求呢？</p>\n<p><img src=\"https://i.loli.net/2021/07/30/agTRdQkpHlxoUXZ.png\"></p>\n<p>首先我们来分析这个场景的逻辑。这个方法有一个<code>string</code>参数传进来，它是一个json文本，我们要做的就是根据这个json文本把它转换成对应的实体类再返回去（当然，返回的类型是这些实体类的基类）。我们知道有这样的一个json文件，它对应某某一个实体类，<strong>可是编译器不知道</strong>。所以，在这个方法里，我直接使用了暴力枚举的方案来实现这个需求。也就是说，我们知道且确保这些json文件可以反序列化成一个共同的基类，但是我们不知道这个json对应哪一个具体的子类。所以，我们要根据基类的<code>Type</code>属性来判断哪个基类是最后要返回的。</p>\n<p>这样写的问题就在于，每次添加新的事件类都需要到这个冗长的switch语句里再添加一个分支，这一点也不面向对象！而且这样写太原始，太暴力，酷哥不应该这样做。</p>\n<h2 id=\"Elegant\"><a href=\"#Elegant\" class=\"headerlink\" title=\"Elegant\"></a>Elegant</h2><p>酷哥应该如何做？ 答案是：<strong>反射</strong>。</p>\n<p>首先，我们要确保我们的每个实体类都有一个能判断它是谁的要素，比如在它的名字里加上前缀或者后缀，或者给它一个有默认值的属性。在这里，我们的每个实体类都有一个<code>Type</code>属性，这是一个枚举，并且包含默认值，所以知道这个<code>Type</code>属性的值是什么，就知道这个实体类是谁了。所以我们使用<code>Activator.CreateInstance</code>来创建这个实体类的默认实例。现在我们有了一个集合，里面是我们所有实体类的默认实例。</p>\n<p>有了这个属性，我们再根据<code>JsonConvert.DeserializeObject</code>来创建一个基类的实例，<strong>这个基类实例的数据是丢失的</strong>，我们会用到这个基类实例的<code>Type</code>属性。</p>\n<p>接下来的事情就简单了，判断我们的实例集合里有没有和这个基类的类型相同的实体类，如果没有，就抛出异常，如果有，就进行下一步工作：<br>首先找出唯一的和这个基类的<code>Type</code>相同的实体类实例，然后再遍历储存实体类的Type(typeof)的集合，如果这个唯一的实力类实例和Type(typeof)的集合中的某个元素的Type(typeof)相等的话，就可以直接使用<code>JsonConvert.DeserializeObject(json, type)</code>这个重载方法获取到object然后再强转成基类对象就完事了。</p>\n"},{"title":"From view of WPF developer - talking something about Flutter (1)","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-04-16T07:41:00.000Z","_content":"\n# Prologue\n\nRecently I have read Dart documentation and have a glance at the Flutter framework, which is a cross-platform UI framework, Windows, macOS, Linux, Android, iOS, even the web. Wow, That was fascinating!\n\nSo that's why this (series of) post(s) coming up, I'd like to share my acquasition of Flutter, and combine it with my previous experience of developing WPF applications.\n\nWell, as this post will definitely not be shown in Google results or somewhat else, I don't really care about its quality, I don't mind if it's informative enough, or well-clarified, just write as I like, write in my way.\n\nAs you can see, here is a piece of Flutter's build UI code, which is in the same position as `.xaml` in WPF do, but this code is pure Dart, you don't have to learn another markup language to use it. The significant feature in Dart - [Named parameters](https://dart.dev/guides/language/language-tour#parameters), is the who support you to express UI elements that easy.\n\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.c\n        children: <Widget>[\n          const Text(\n            'The counter still:',\n          ),\n          TextFormField(\n            controller: _controller,\n          ),\n          OutlinedButton(\n            onPressed: _resetCounter,\n            child: const Text(\"Reset\"),\n          )\n        ],\n      ),\n    ),\n    floatingActionButton: FloatingActionButton\n      onPressed: _decrementCounter,\n      tooltip: 'Decrement',\n      child: const Icon(Icons.remove),\n    ),\n  );\n}\n```\n\n# Widget\n\nIn the flutter, everything is a widget, and there's `StatelessWidget` and `StatefulWidget`. For an example, `StatelessWidge` is essentially equivalent to `App` in the WPF, and `StatefulWidget` is equivalent to another control component in WPF.\n\nSo, what is the `State` in Flutter? Well, that was a complex concept, and this is a blog post but a paper. To be straightforward, the `State` is basically like the `ViewModel` in a MVVM patterned WPF application, so the `StatefulWidget`, suppose to be the `View`. You do actions in the `StatefulWidget`, and the actions will be passed to the `State` to be processed, then, your `State` will invoke the top-level function `setState` to notify the widget: data has changed, please refresh. In code, it's simply an invokation to the `build` function in the `StatefulWidget`.\n\n![picture 1](https://i.stack.imgur.com/z6NU2.png)  \n\n# Scaffold\n\nQuite simple and clear, the `Scaffold` is the main widget in the Flutter, it's a container that contains the `AppBar`, `Body`, etc. For a not really suitable metaphor, just like the `UserControl` in the WPF.\n\n# Columns\n\nNot liking the WPF, the `Columns` in Flutter is a separated element, there's no such thing as `Grid` in WPF, just `Column` and `Row`, when representing the vertical and horizontal layout, both of them can contains multiple children.\n\n# References\n\n+ https://docs.flutter.dev/development/ui/layout/tutorial\n+ https://stackoverflow.com/a/68895591/12167919","source":"_posts/From-view-of-WPF-developer-talking-something-about-Flutter.md","raw":"---\ntitle: From view of WPF developer - talking something about Flutter (1)\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-04-16 15:41:00\ntags: [\"CSharp\", \"WPF\", \"UI\", \"Flutter\"]\ncategories: dev\n---\n\n# Prologue\n\nRecently I have read Dart documentation and have a glance at the Flutter framework, which is a cross-platform UI framework, Windows, macOS, Linux, Android, iOS, even the web. Wow, That was fascinating!\n\nSo that's why this (series of) post(s) coming up, I'd like to share my acquasition of Flutter, and combine it with my previous experience of developing WPF applications.\n\nWell, as this post will definitely not be shown in Google results or somewhat else, I don't really care about its quality, I don't mind if it's informative enough, or well-clarified, just write as I like, write in my way.\n\nAs you can see, here is a piece of Flutter's build UI code, which is in the same position as `.xaml` in WPF do, but this code is pure Dart, you don't have to learn another markup language to use it. The significant feature in Dart - [Named parameters](https://dart.dev/guides/language/language-tour#parameters), is the who support you to express UI elements that easy.\n\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.c\n        children: <Widget>[\n          const Text(\n            'The counter still:',\n          ),\n          TextFormField(\n            controller: _controller,\n          ),\n          OutlinedButton(\n            onPressed: _resetCounter,\n            child: const Text(\"Reset\"),\n          )\n        ],\n      ),\n    ),\n    floatingActionButton: FloatingActionButton\n      onPressed: _decrementCounter,\n      tooltip: 'Decrement',\n      child: const Icon(Icons.remove),\n    ),\n  );\n}\n```\n\n# Widget\n\nIn the flutter, everything is a widget, and there's `StatelessWidget` and `StatefulWidget`. For an example, `StatelessWidge` is essentially equivalent to `App` in the WPF, and `StatefulWidget` is equivalent to another control component in WPF.\n\nSo, what is the `State` in Flutter? Well, that was a complex concept, and this is a blog post but a paper. To be straightforward, the `State` is basically like the `ViewModel` in a MVVM patterned WPF application, so the `StatefulWidget`, suppose to be the `View`. You do actions in the `StatefulWidget`, and the actions will be passed to the `State` to be processed, then, your `State` will invoke the top-level function `setState` to notify the widget: data has changed, please refresh. In code, it's simply an invokation to the `build` function in the `StatefulWidget`.\n\n![picture 1](https://i.stack.imgur.com/z6NU2.png)  \n\n# Scaffold\n\nQuite simple and clear, the `Scaffold` is the main widget in the Flutter, it's a container that contains the `AppBar`, `Body`, etc. For a not really suitable metaphor, just like the `UserControl` in the WPF.\n\n# Columns\n\nNot liking the WPF, the `Columns` in Flutter is a separated element, there's no such thing as `Grid` in WPF, just `Column` and `Row`, when representing the vertical and horizontal layout, both of them can contains multiple children.\n\n# References\n\n+ https://docs.flutter.dev/development/ui/layout/tutorial\n+ https://stackoverflow.com/a/68895591/12167919","slug":"From-view-of-WPF-developer-talking-something-about-Flutter","published":1,"updated":"2022-07-20T09:00:08.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2ayt0003xonaa7hedbdw","content":"<h1 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h1><p>Recently I have read Dart documentation and have a glance at the Flutter framework, which is a cross-platform UI framework, Windows, macOS, Linux, Android, iOS, even the web. Wow, That was fascinating!</p>\n<p>So that’s why this (series of) post(s) coming up, I’d like to share my acquasition of Flutter, and combine it with my previous experience of developing WPF applications.</p>\n<p>Well, as this post will definitely not be shown in Google results or somewhat else, I don’t really care about its quality, I don’t mind if it’s informative enough, or well-clarified, just write as I like, write in my way.</p>\n<p>As you can see, here is a piece of Flutter’s build UI code, which is in the same position as <code>.xaml</code> in WPF do, but this code is pure Dart, you don’t have to learn another markup language to use it. The significant feature in Dart - <a href=\"https://dart.dev/guides/language/language-tour#parameters\">Named parameters</a>, is the who support you to express UI elements that easy.</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@override</span>\nWidget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n        mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>c\n        children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'The counter still:'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">TextFormField</span><span class=\"token punctuation\">(</span>\n            controller<span class=\"token punctuation\">:</span> _controller<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">OutlinedButton</span><span class=\"token punctuation\">(</span>\n            onPressed<span class=\"token punctuation\">:</span> _resetCounter<span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    floatingActionButton<span class=\"token punctuation\">:</span> FloatingActionButton\n      onPressed<span class=\"token punctuation\">:</span> _decrementCounter<span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decrement'</span><span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h1><p>In the flutter, everything is a widget, and there’s <code>StatelessWidget</code> and <code>StatefulWidget</code>. For an example, <code>StatelessWidge</code> is essentially equivalent to <code>App</code> in the WPF, and <code>StatefulWidget</code> is equivalent to another control component in WPF.</p>\n<p>So, what is the <code>State</code> in Flutter? Well, that was a complex concept, and this is a blog post but a paper. To be straightforward, the <code>State</code> is basically like the <code>ViewModel</code> in a MVVM patterned WPF application, so the <code>StatefulWidget</code>, suppose to be the <code>View</code>. You do actions in the <code>StatefulWidget</code>, and the actions will be passed to the <code>State</code> to be processed, then, your <code>State</code> will invoke the top-level function <code>setState</code> to notify the widget: data has changed, please refresh. In code, it’s simply an invokation to the <code>build</code> function in the <code>StatefulWidget</code>.</p>\n<p><img src=\"https://i.stack.imgur.com/z6NU2.png\" alt=\"picture 1\">  </p>\n<h1 id=\"Scaffold\"><a href=\"#Scaffold\" class=\"headerlink\" title=\"Scaffold\"></a>Scaffold</h1><p>Quite simple and clear, the <code>Scaffold</code> is the main widget in the Flutter, it’s a container that contains the <code>AppBar</code>, <code>Body</code>, etc. For a not really suitable metaphor, just like the <code>UserControl</code> in the WPF.</p>\n<h1 id=\"Columns\"><a href=\"#Columns\" class=\"headerlink\" title=\"Columns\"></a>Columns</h1><p>Not liking the WPF, the <code>Columns</code> in Flutter is a separated element, there’s no such thing as <code>Grid</code> in WPF, just <code>Column</code> and <code>Row</code>, when representing the vertical and horizontal layout, both of them can contains multiple children.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://docs.flutter.dev/development/ui/layout/tutorial\">https://docs.flutter.dev/development/ui/layout/tutorial</a></li>\n<li><a href=\"https://stackoverflow.com/a/68895591/12167919\">https://stackoverflow.com/a/68895591/12167919</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h1><p>Recently I have read Dart documentation and have a glance at the Flutter framework, which is a cross-platform UI framework, Windows, macOS, Linux, Android, iOS, even the web. Wow, That was fascinating!</p>\n<p>So that’s why this (series of) post(s) coming up, I’d like to share my acquasition of Flutter, and combine it with my previous experience of developing WPF applications.</p>\n<p>Well, as this post will definitely not be shown in Google results or somewhat else, I don’t really care about its quality, I don’t mind if it’s informative enough, or well-clarified, just write as I like, write in my way.</p>\n<p>As you can see, here is a piece of Flutter’s build UI code, which is in the same position as <code>.xaml</code> in WPF do, but this code is pure Dart, you don’t have to learn another markup language to use it. The significant feature in Dart - <a href=\"https://dart.dev/guides/language/language-tour#parameters\">Named parameters</a>, is the who support you to express UI elements that easy.</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@override</span>\nWidget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n        mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>c\n        children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'The counter still:'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">TextFormField</span><span class=\"token punctuation\">(</span>\n            controller<span class=\"token punctuation\">:</span> _controller<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">OutlinedButton</span><span class=\"token punctuation\">(</span>\n            onPressed<span class=\"token punctuation\">:</span> _resetCounter<span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    floatingActionButton<span class=\"token punctuation\">:</span> FloatingActionButton\n      onPressed<span class=\"token punctuation\">:</span> _decrementCounter<span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decrement'</span><span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h1><p>In the flutter, everything is a widget, and there’s <code>StatelessWidget</code> and <code>StatefulWidget</code>. For an example, <code>StatelessWidge</code> is essentially equivalent to <code>App</code> in the WPF, and <code>StatefulWidget</code> is equivalent to another control component in WPF.</p>\n<p>So, what is the <code>State</code> in Flutter? Well, that was a complex concept, and this is a blog post but a paper. To be straightforward, the <code>State</code> is basically like the <code>ViewModel</code> in a MVVM patterned WPF application, so the <code>StatefulWidget</code>, suppose to be the <code>View</code>. You do actions in the <code>StatefulWidget</code>, and the actions will be passed to the <code>State</code> to be processed, then, your <code>State</code> will invoke the top-level function <code>setState</code> to notify the widget: data has changed, please refresh. In code, it’s simply an invokation to the <code>build</code> function in the <code>StatefulWidget</code>.</p>\n<p><img src=\"https://i.stack.imgur.com/z6NU2.png\" alt=\"picture 1\">  </p>\n<h1 id=\"Scaffold\"><a href=\"#Scaffold\" class=\"headerlink\" title=\"Scaffold\"></a>Scaffold</h1><p>Quite simple and clear, the <code>Scaffold</code> is the main widget in the Flutter, it’s a container that contains the <code>AppBar</code>, <code>Body</code>, etc. For a not really suitable metaphor, just like the <code>UserControl</code> in the WPF.</p>\n<h1 id=\"Columns\"><a href=\"#Columns\" class=\"headerlink\" title=\"Columns\"></a>Columns</h1><p>Not liking the WPF, the <code>Columns</code> in Flutter is a separated element, there’s no such thing as <code>Grid</code> in WPF, just <code>Column</code> and <code>Row</code>, when representing the vertical and horizontal layout, both of them can contains multiple children.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://docs.flutter.dev/development/ui/layout/tutorial\">https://docs.flutter.dev/development/ui/layout/tutorial</a></li>\n<li><a href=\"https://stackoverflow.com/a/68895591/12167919\">https://stackoverflow.com/a/68895591/12167919</a></li>\n</ul>\n"},{"title":"Hello, World!","date":"2021-03-30T16:58:57.000Z","_content":"\n\n\n```c#\npublic static void Main(string[] args)\n{\n\tConsole.WriteLine(\"Hello, World!\");\n}\n```\n\n","source":"_posts/Hello-World-0.md","raw":"---\ntitle: 'Hello, World!'\ndate: 2021-03-31 00:58:57\ntags: Test\ncategories: test\n---\n\n\n\n```c#\npublic static void Main(string[] args)\n{\n\tConsole.WriteLine(\"Hello, World!\");\n}\n```\n\n","slug":"Hello-World-0","published":1,"updated":"2022-07-20T09:00:08.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2ayx0006xonae1pu353e","content":"<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">public static void Main(string[] args)\n&#123;\n\tConsole.WriteLine(&quot;Hello, World!&quot;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">public static void Main(string[] args)\n&#123;\n\tConsole.WriteLine(&quot;Hello, World!&quot;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"How to Build a document site by Vuepress","date":"2021-08-27T14:00:00.000Z","_content":"\n# How to Build a document site by Vuepress\n\nBefore the beginning, I'd like to answer a question: **Why you write this tutorial?**\n\nYeah, there's too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that's why I make this article: for people who don't know what is vue.js and never had a website. Anyway, it's not a zero-basic tutorial, at least, you should know about some things like *what is GitHub?* *why should I write a document?* \n\n## Environments\n\nThis tutorial based on Windows 10 platform, and all the examples are under the windows-style.\n\n### Node.Js\n\nAccess the official website of [Node.js](https://nodejs.org), as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js\n\n![image-20210605211258441](https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png)\n\nWhen it finished, you can see a *.msi* file like this one:\n\n![image-20210605211512722](https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png)\n\nDouble click to open it, and keep clicking the **Next** button until the install wizard shows a **Finish** button. Since then, we installed node.js.\n\n### Yarn\n\nAlthough *npm*(node package manager) provides all the features, according to the document of the vuepress, *yarn* would be a better choice than *npm*.\n\nLet's access [yarn installation site](https://classic.yarnpkg.com/en/docs/install/#windows-stable), expand the **Alternatives** section:\n\n![image-20210605212346019](https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png)\n\nClick the *Download Installer Button*, after the progress running over, you can get a *.msi* file, install it like node.js installer.\n\n### Git (Optional)\n\nThis step is optional, but if you do this, your work will be much easier.\n\nAccess [git official website](https://git-scm.com/download/win), you can see the interface like this:\n\n![image-20210605213126512](https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png)\n\nClick the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.\n\nIf install succeeds, you will see 2 git menu in any context menu of windows explorer:\n\n![image-20210605213804014](https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png)\n\nAs you can see, I marked *Git Bash*, which is the command terminal we need to instead of windows cmd or Powershell.\n\n## Setup Vuepress\n\nNow, we had node.js and yarn, we are ready to start building a vuepress site!\n\n### Create a Github repo for deploying Vuepress\n\nI won't show how to create a GitHub repo, but I would notice you are:\n\n![image-20210605214554406](https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png)\n\nYou should choose the .gitignore template to Node, it will be more convenient for you.\n\nClone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.\n\n### Install Vuepress\n\nBefore work starts, input the command below:\n\n```shell\nyarn init -y\n```\n\nThis command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:\n\n```shell\nyarn add -D vuepress\n```\n\nThis command needs about 2 minutes to complete, keep your patience.\n\n![image-20210605215211625](https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png)\n\nSince then, we installed the vuepress local.\n\n### Basic configuration for vuepress\n\nAfter you installed the vuepress, the structure of your local files should be like this:\n\n![image-20210605215450501](https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png)\n\nOpen the *package.json*, add these lines in this JSON file and append ```.temp``` in the .gitignore file\n\n```json\n\"scripts\": {\n\t\"dev\": \"vuepress dev docs --temp .temp\",\n\t\"build\": \"vuepress build docs\"\n}\n```\n\nThis step is also optional, but if you do this, your progress will be more convenient. In fact, you don't even need to know what these commands used for, just follow the steps.\n\nNow we created a folder that must named *docs*,\n\n![image-20210605220029939](https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png)\n\nThen we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.\n\n![image-20210605220202704](https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png)\n\nSince here, we could serve a local server for our document side, just input this command:\n\n```shell\nyarn dev\n```\n\nWhen this interface displayed, your local document server has been created.\n\n![image-20210605220517338](https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png)\n\nAccess *http://localhost:8080*, you can see an empty vuepress side now:\n\n![image-20210605220600598](https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png)\n\n### config.js\n\nCreate a folder named *.vuepress* in */doc*:\n\n![image-20210605220743591](https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png)\n\nCreate a javacript file in */.vuepress*:\n\n![image-20210605220912318](https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png)\n\nAdd these lines inside:\n\n```javascript\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around',\n  base: \"/Vuepress4Beginner/\"\n}\n```\n\nThere's a point you should be noticed, the *base* key should appear when you trying to deploy your document site on a sub-directory like *http://www.xxxx.com/xxxx*, the slash symbol should be beginning, and the end.\n\nRestart your local server, you will see the host had appended your *base* value\n\n![image-20210605221808225](https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png)\n\nAnd you will see the effect of the config.js, a title element displayed in the top-left corner\n\n![image-20210605221900646](https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png)\n\n### root README.md\n\nAdd these lines at the top of *root README.md*:\n\n```YAML\n---\nhome: true\nherImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n\nYou can change the element content as you want, the *hereImage* key should be removed if you don't need it. And if you need a big logo on your document home page, you should know some basic knowledge about [vuepress asset](https://vuepress.vuejs.org/guide/assets.html#relative-urls).\n\nThe content below the [YAML font matter](https://jekyllrb.com/docs/front-matter/) will be display as normal markdown content.\n\nNow, I'll tell you what is ever YAML font matter key-value pair used for:\n\n+ home: this page is used for the home page or not\n+ heroImage: the main logo displayed in the center of the home page\n+ heroText: the main title displayed in the center of the home page\n+ tagline: the subtitle under the heroText\n+ actionText: the text for the central button\n+ actionLink: the jump target for central button\n+ features: some feature under the central button\n  + title: feature title\n  + details: feature description\n+ footer: the text display in the footer of the site\n\n![image-20210605223618117](https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png)\n\n### Add navigate links\n\nOpen *config.js*, and add these lines:\n\n```javascript\nthemeConfig: {\n  nav: [\n    { text: 'Home', link: '/' },\n    { text: 'Guide', link: '/guide/' },\n    { text: 'External', link: 'https://google.com' },\n  ]\n}\n```\n\nAs you can see, there's an array named *nav*, you can add its member like:\n\n```javascript\n{ text: 'Home', link: '/' }\n```\n\n+ text: the text display in navigate bar\n+ link: the link for navigating, you can use a relative or absolute URL\n\nIf you would like to know about the navigation bar, you can visit [navbar links](https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links) in vuepress document.\n\n### Start writing\n\nAfter all of these configurations, now you can start to write documents via markdown.\n\nCreate a folder named *guide* in /docs:\n\n![image-20210605223831721](https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png)\n\nCreate a README.me in /docs/guide\n\n![image-20210605223942377](https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png)\n\nAdd this YAML font matter at the top of this README.md:\n\n```yaml\n---\nsidebar: auto\n---\n```\n\nEnjoy!\n\n![image-20210605224226895](https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png)\n\n### Summary\n\nThis is how the document site looks like after the above configurations, \n\n![image-20210605225004660](https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png)\n\nI'll list some point that you maybe didn't know:\n\n+ REAME.md equals to index.html in website building\n+ The local file structure of our example:\n  + .temp\n  + docs\n    + .vuepress\n      + config.js\n    + guide\n      + README.md\n    + README.md\n  + node_modules\n  + .gitignore\n  + package.json\n  + yarn.lock\n\n## Deploy\n\nAfter all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out [vuepress document](https://vuepress.vuejs.org/guide/deploy.html#github-pages).\n\n### Create deploy script\n\nCreate a .sh file named deploy.sh in the root directory\n\n```shell\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs/.vuepress/dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\nI'd like to recommend that you shouldn't just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.\n\nSince then, you should add this line in the config.js:\n\n```\n\"deploy\": \"bash deploy.sh\"\n```\n\nAnd then config.js should look like:\n\n![image-20210605231251492](https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png)\n\nAs you can see, we are using the windows operating system, but there's a ```bash``` command that's didn't exist in windows. How to solve this? The answer is: we don't even need to solve because we are using git bash. That's why I recommended you to choose git bash but not the windows cmd or Powershell.\n\nNow, just run\n\n```\nyarn deploy\n```\n\nThen, turn to GitHub, open the repo for hosting the vuepress document, turn to the *Setting* page:\n\n![image-20210605231615793](https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png)\n\nAnd go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.\n\n![image-20210605231713557](https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png)\n\nCongratulations! You've done all the work!","source":"_posts/How to build a document website via Vuepress.md","raw":"---\ntitle: 'How to Build a document site by Vuepress'\ndate: 2021-08-27 22:00:00\ntags: [\"VuePress\", \"documenting\"]\ncategories: web\n---\n\n# How to Build a document site by Vuepress\n\nBefore the beginning, I'd like to answer a question: **Why you write this tutorial?**\n\nYeah, there's too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that's why I make this article: for people who don't know what is vue.js and never had a website. Anyway, it's not a zero-basic tutorial, at least, you should know about some things like *what is GitHub?* *why should I write a document?* \n\n## Environments\n\nThis tutorial based on Windows 10 platform, and all the examples are under the windows-style.\n\n### Node.Js\n\nAccess the official website of [Node.js](https://nodejs.org), as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js\n\n![image-20210605211258441](https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png)\n\nWhen it finished, you can see a *.msi* file like this one:\n\n![image-20210605211512722](https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png)\n\nDouble click to open it, and keep clicking the **Next** button until the install wizard shows a **Finish** button. Since then, we installed node.js.\n\n### Yarn\n\nAlthough *npm*(node package manager) provides all the features, according to the document of the vuepress, *yarn* would be a better choice than *npm*.\n\nLet's access [yarn installation site](https://classic.yarnpkg.com/en/docs/install/#windows-stable), expand the **Alternatives** section:\n\n![image-20210605212346019](https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png)\n\nClick the *Download Installer Button*, after the progress running over, you can get a *.msi* file, install it like node.js installer.\n\n### Git (Optional)\n\nThis step is optional, but if you do this, your work will be much easier.\n\nAccess [git official website](https://git-scm.com/download/win), you can see the interface like this:\n\n![image-20210605213126512](https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png)\n\nClick the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.\n\nIf install succeeds, you will see 2 git menu in any context menu of windows explorer:\n\n![image-20210605213804014](https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png)\n\nAs you can see, I marked *Git Bash*, which is the command terminal we need to instead of windows cmd or Powershell.\n\n## Setup Vuepress\n\nNow, we had node.js and yarn, we are ready to start building a vuepress site!\n\n### Create a Github repo for deploying Vuepress\n\nI won't show how to create a GitHub repo, but I would notice you are:\n\n![image-20210605214554406](https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png)\n\nYou should choose the .gitignore template to Node, it will be more convenient for you.\n\nClone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.\n\n### Install Vuepress\n\nBefore work starts, input the command below:\n\n```shell\nyarn init -y\n```\n\nThis command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:\n\n```shell\nyarn add -D vuepress\n```\n\nThis command needs about 2 minutes to complete, keep your patience.\n\n![image-20210605215211625](https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png)\n\nSince then, we installed the vuepress local.\n\n### Basic configuration for vuepress\n\nAfter you installed the vuepress, the structure of your local files should be like this:\n\n![image-20210605215450501](https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png)\n\nOpen the *package.json*, add these lines in this JSON file and append ```.temp``` in the .gitignore file\n\n```json\n\"scripts\": {\n\t\"dev\": \"vuepress dev docs --temp .temp\",\n\t\"build\": \"vuepress build docs\"\n}\n```\n\nThis step is also optional, but if you do this, your progress will be more convenient. In fact, you don't even need to know what these commands used for, just follow the steps.\n\nNow we created a folder that must named *docs*,\n\n![image-20210605220029939](https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png)\n\nThen we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.\n\n![image-20210605220202704](https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png)\n\nSince here, we could serve a local server for our document side, just input this command:\n\n```shell\nyarn dev\n```\n\nWhen this interface displayed, your local document server has been created.\n\n![image-20210605220517338](https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png)\n\nAccess *http://localhost:8080*, you can see an empty vuepress side now:\n\n![image-20210605220600598](https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png)\n\n### config.js\n\nCreate a folder named *.vuepress* in */doc*:\n\n![image-20210605220743591](https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png)\n\nCreate a javacript file in */.vuepress*:\n\n![image-20210605220912318](https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png)\n\nAdd these lines inside:\n\n```javascript\nmodule.exports = {\n  title: 'Hello VuePress',\n  description: 'Just playing around',\n  base: \"/Vuepress4Beginner/\"\n}\n```\n\nThere's a point you should be noticed, the *base* key should appear when you trying to deploy your document site on a sub-directory like *http://www.xxxx.com/xxxx*, the slash symbol should be beginning, and the end.\n\nRestart your local server, you will see the host had appended your *base* value\n\n![image-20210605221808225](https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png)\n\nAnd you will see the effect of the config.js, a title element displayed in the top-left corner\n\n![image-20210605221900646](https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png)\n\n### root README.md\n\nAdd these lines at the top of *root README.md*:\n\n```YAML\n---\nhome: true\nherImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n\nYou can change the element content as you want, the *hereImage* key should be removed if you don't need it. And if you need a big logo on your document home page, you should know some basic knowledge about [vuepress asset](https://vuepress.vuejs.org/guide/assets.html#relative-urls).\n\nThe content below the [YAML font matter](https://jekyllrb.com/docs/front-matter/) will be display as normal markdown content.\n\nNow, I'll tell you what is ever YAML font matter key-value pair used for:\n\n+ home: this page is used for the home page or not\n+ heroImage: the main logo displayed in the center of the home page\n+ heroText: the main title displayed in the center of the home page\n+ tagline: the subtitle under the heroText\n+ actionText: the text for the central button\n+ actionLink: the jump target for central button\n+ features: some feature under the central button\n  + title: feature title\n  + details: feature description\n+ footer: the text display in the footer of the site\n\n![image-20210605223618117](https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png)\n\n### Add navigate links\n\nOpen *config.js*, and add these lines:\n\n```javascript\nthemeConfig: {\n  nav: [\n    { text: 'Home', link: '/' },\n    { text: 'Guide', link: '/guide/' },\n    { text: 'External', link: 'https://google.com' },\n  ]\n}\n```\n\nAs you can see, there's an array named *nav*, you can add its member like:\n\n```javascript\n{ text: 'Home', link: '/' }\n```\n\n+ text: the text display in navigate bar\n+ link: the link for navigating, you can use a relative or absolute URL\n\nIf you would like to know about the navigation bar, you can visit [navbar links](https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links) in vuepress document.\n\n### Start writing\n\nAfter all of these configurations, now you can start to write documents via markdown.\n\nCreate a folder named *guide* in /docs:\n\n![image-20210605223831721](https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png)\n\nCreate a README.me in /docs/guide\n\n![image-20210605223942377](https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png)\n\nAdd this YAML font matter at the top of this README.md:\n\n```yaml\n---\nsidebar: auto\n---\n```\n\nEnjoy!\n\n![image-20210605224226895](https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png)\n\n### Summary\n\nThis is how the document site looks like after the above configurations, \n\n![image-20210605225004660](https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png)\n\nI'll list some point that you maybe didn't know:\n\n+ REAME.md equals to index.html in website building\n+ The local file structure of our example:\n  + .temp\n  + docs\n    + .vuepress\n      + config.js\n    + guide\n      + README.md\n    + README.md\n  + node_modules\n  + .gitignore\n  + package.json\n  + yarn.lock\n\n## Deploy\n\nAfter all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out [vuepress document](https://vuepress.vuejs.org/guide/deploy.html#github-pages).\n\n### Create deploy script\n\nCreate a .sh file named deploy.sh in the root directory\n\n```shell\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs/.vuepress/dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\nI'd like to recommend that you shouldn't just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.\n\nSince then, you should add this line in the config.js:\n\n```\n\"deploy\": \"bash deploy.sh\"\n```\n\nAnd then config.js should look like:\n\n![image-20210605231251492](https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png)\n\nAs you can see, we are using the windows operating system, but there's a ```bash``` command that's didn't exist in windows. How to solve this? The answer is: we don't even need to solve because we are using git bash. That's why I recommended you to choose git bash but not the windows cmd or Powershell.\n\nNow, just run\n\n```\nyarn deploy\n```\n\nThen, turn to GitHub, open the repo for hosting the vuepress document, turn to the *Setting* page:\n\n![image-20210605231615793](https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png)\n\nAnd go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.\n\n![image-20210605231713557](https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png)\n\nCongratulations! You've done all the work!","slug":"How to build a document website via Vuepress","published":1,"updated":"2022-07-20T09:00:08.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2ayy0007xonah169f3fm","content":"<h1 id=\"How-to-Build-a-document-site-by-Vuepress\"><a href=\"#How-to-Build-a-document-site-by-Vuepress\" class=\"headerlink\" title=\"How to Build a document site by Vuepress\"></a>How to Build a document site by Vuepress</h1><p>Before the beginning, I’d like to answer a question: <strong>Why you write this tutorial?</strong></p>\n<p>Yeah, there’s too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that’s why I make this article: for people who don’t know what is vue.js and never had a website. Anyway, it’s not a zero-basic tutorial, at least, you should know about some things like <em>what is GitHub?</em> <em>why should I write a document?</em> </p>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>This tutorial based on Windows 10 platform, and all the examples are under the windows-style.</p>\n<h3 id=\"Node-Js\"><a href=\"#Node-Js\" class=\"headerlink\" title=\"Node.Js\"></a>Node.Js</h3><p>Access the official website of <a href=\"https://nodejs.org/\">Node.js</a>, as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js</p>\n<p><img src=\"https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png\" alt=\"image-20210605211258441\"></p>\n<p>When it finished, you can see a <em>.msi</em> file like this one:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png\" alt=\"image-20210605211512722\"></p>\n<p>Double click to open it, and keep clicking the <strong>Next</strong> button until the install wizard shows a <strong>Finish</strong> button. Since then, we installed node.js.</p>\n<h3 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h3><p>Although <em>npm</em>(node package manager) provides all the features, according to the document of the vuepress, <em>yarn</em> would be a better choice than <em>npm</em>.</p>\n<p>Let’s access <a href=\"https://classic.yarnpkg.com/en/docs/install/#windows-stable\">yarn installation site</a>, expand the <strong>Alternatives</strong> section:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png\" alt=\"image-20210605212346019\"></p>\n<p>Click the <em>Download Installer Button</em>, after the progress running over, you can get a <em>.msi</em> file, install it like node.js installer.</p>\n<h3 id=\"Git-Optional\"><a href=\"#Git-Optional\" class=\"headerlink\" title=\"Git (Optional)\"></a>Git (Optional)</h3><p>This step is optional, but if you do this, your work will be much easier.</p>\n<p>Access <a href=\"https://git-scm.com/download/win\">git official website</a>, you can see the interface like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png\" alt=\"image-20210605213126512\"></p>\n<p>Click the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.</p>\n<p>If install succeeds, you will see 2 git menu in any context menu of windows explorer:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png\" alt=\"image-20210605213804014\"></p>\n<p>As you can see, I marked <em>Git Bash</em>, which is the command terminal we need to instead of windows cmd or Powershell.</p>\n<h2 id=\"Setup-Vuepress\"><a href=\"#Setup-Vuepress\" class=\"headerlink\" title=\"Setup Vuepress\"></a>Setup Vuepress</h2><p>Now, we had node.js and yarn, we are ready to start building a vuepress site!</p>\n<h3 id=\"Create-a-Github-repo-for-deploying-Vuepress\"><a href=\"#Create-a-Github-repo-for-deploying-Vuepress\" class=\"headerlink\" title=\"Create a Github repo for deploying Vuepress\"></a>Create a Github repo for deploying Vuepress</h3><p>I won’t show how to create a GitHub repo, but I would notice you are:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png\" alt=\"image-20210605214554406\"></p>\n<p>You should choose the .gitignore template to Node, it will be more convenient for you.</p>\n<p>Clone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.</p>\n<h3 id=\"Install-Vuepress\"><a href=\"#Install-Vuepress\" class=\"headerlink\" title=\"Install Vuepress\"></a>Install Vuepress</h3><p>Before work starts, input the command below:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn init -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn add -D vuepress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command needs about 2 minutes to complete, keep your patience.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png\" alt=\"image-20210605215211625\"></p>\n<p>Since then, we installed the vuepress local.</p>\n<h3 id=\"Basic-configuration-for-vuepress\"><a href=\"#Basic-configuration-for-vuepress\" class=\"headerlink\" title=\"Basic configuration for vuepress\"></a>Basic configuration for vuepress</h3><p>After you installed the vuepress, the structure of your local files should be like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png\" alt=\"image-20210605215450501\"></p>\n<p>Open the <em>package.json</em>, add these lines in this JSON file and append <code>.temp</code> in the .gitignore file</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs --temp .temp\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This step is also optional, but if you do this, your progress will be more convenient. In fact, you don’t even need to know what these commands used for, just follow the steps.</p>\n<p>Now we created a folder that must named <em>docs</em>,</p>\n<p><img src=\"https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png\" alt=\"image-20210605220029939\"></p>\n<p>Then we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png\" alt=\"image-20210605220202704\"></p>\n<p>Since here, we could serve a local server for our document side, just input this command:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>When this interface displayed, your local document server has been created.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png\" alt=\"image-20210605220517338\"></p>\n<p>Access <em><a href=\"http://localhost:8080/\">http://localhost:8080</a></em>, you can see an empty vuepress side now:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png\" alt=\"image-20210605220600598\"></p>\n<h3 id=\"config-js\"><a href=\"#config-js\" class=\"headerlink\" title=\"config.js\"></a>config.js</h3><p>Create a folder named <em>.vuepress</em> in <em>/doc</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png\" alt=\"image-20210605220743591\"></p>\n<p>Create a javacript file in <em>/.vuepress</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png\" alt=\"image-20210605220912318\"></p>\n<p>Add these lines inside:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello VuePress'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Just playing around'</span><span class=\"token punctuation\">,</span>\n  base<span class=\"token operator\">:</span> <span class=\"token string\">\"/Vuepress4Beginner/\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>There’s a point you should be noticed, the <em>base</em> key should appear when you trying to deploy your document site on a sub-directory like <em><a href=\"http://www.xxxx.com/xxxx\">http://www.xxxx.com/xxxx</a></em>, the slash symbol should be beginning, and the end.</p>\n<p>Restart your local server, you will see the host had appended your <em>base</em> value</p>\n<p><img src=\"https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png\" alt=\"image-20210605221808225\"></p>\n<p>And you will see the effect of the config.js, a title element displayed in the top-left corner</p>\n<p><img src=\"https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png\" alt=\"image-20210605221900646\"></p>\n<h3 id=\"root-README-md\"><a href=\"#root-README-md\" class=\"headerlink\" title=\"root README.md\"></a>root README.md</h3><p>Add these lines at the top of <em>root README.md</em>:</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">---\nhome: true\nherImage: &#x2F;hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: &#x2F;guide&#x2F;\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>You can change the element content as you want, the <em>hereImage</em> key should be removed if you don’t need it. And if you need a big logo on your document home page, you should know some basic knowledge about <a href=\"https://vuepress.vuejs.org/guide/assets.html#relative-urls\">vuepress asset</a>.</p>\n<p>The content below the <a href=\"https://jekyllrb.com/docs/front-matter/\">YAML font matter</a> will be display as normal markdown content.</p>\n<p>Now, I’ll tell you what is ever YAML font matter key-value pair used for:</p>\n<ul>\n<li>home: this page is used for the home page or not</li>\n<li>heroImage: the main logo displayed in the center of the home page</li>\n<li>heroText: the main title displayed in the center of the home page</li>\n<li>tagline: the subtitle under the heroText</li>\n<li>actionText: the text for the central button</li>\n<li>actionLink: the jump target for central button</li>\n<li>features: some feature under the central button<ul>\n<li>title: feature title</li>\n<li>details: feature description</li>\n</ul>\n</li>\n<li>footer: the text display in the footer of the site</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png\" alt=\"image-20210605223618117\"></p>\n<h3 id=\"Add-navigate-links\"><a href=\"#Add-navigate-links\" class=\"headerlink\" title=\"Add navigate links\"></a>Add navigate links</h3><p>Open <em>config.js</em>, and add these lines:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">themeConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  nav<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>As you can see, there’s an array named <em>nav</em>, you can add its member like:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>text: the text display in navigate bar</li>\n<li>link: the link for navigating, you can use a relative or absolute URL</li>\n</ul>\n<p>If you would like to know about the navigation bar, you can visit <a href=\"https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links\">navbar links</a> in vuepress document.</p>\n<h3 id=\"Start-writing\"><a href=\"#Start-writing\" class=\"headerlink\" title=\"Start writing\"></a>Start writing</h3><p>After all of these configurations, now you can start to write documents via markdown.</p>\n<p>Create a folder named <em>guide</em> in /docs:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png\" alt=\"image-20210605223831721\"></p>\n<p>Create a README.me in /docs/guide</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png\" alt=\"image-20210605223942377\"></p>\n<p>Add this YAML font matter at the top of this README.md:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Enjoy!</p>\n<p><img src=\"https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png\" alt=\"image-20210605224226895\"></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is how the document site looks like after the above configurations, </p>\n<p><img src=\"https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png\" alt=\"image-20210605225004660\"></p>\n<p>I’ll list some point that you maybe didn’t know:</p>\n<ul>\n<li>REAME.md equals to index.html in website building</li>\n<li>The local file structure of our example:<ul>\n<li>.temp</li>\n<li>docs<ul>\n<li>.vuepress<ul>\n<li>config.js</li>\n</ul>\n</li>\n<li>guide<ul>\n<li>README.md</li>\n</ul>\n</li>\n<li>README.md</li>\n</ul>\n</li>\n<li>node_modules</li>\n<li>.gitignore</li>\n<li>package.json</li>\n<li>yarn.lock</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><p>After all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out <a href=\"https://vuepress.vuejs.org/guide/deploy.html#github-pages\">vuepress document</a>.</p>\n<h3 id=\"Create-deploy-script\"><a href=\"#Create-deploy-script\" class=\"headerlink\" title=\"Create deploy script\"></a>Create deploy script</h3><p>Create a .sh file named deploy.sh in the root directory</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs&#x2F;.vuepress&#x2F;dist\n\n# if you are deploying to a custom domain\n# echo &#39;www.example.com&#39; &gt; CNAME\n\ngit init\ngit add -A\ngit commit -m &#39;deploy&#39;\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;USERNAME&gt;.github.io.git master\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io&#x2F;&lt;REPO&gt;\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;REPO&gt;.git master:gh-pages\n\ncd -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>I’d like to recommend that you shouldn’t just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.</p>\n<p>Since then, you should add this line in the config.js:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;deploy&quot;: &quot;bash deploy.sh&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>And then config.js should look like:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png\" alt=\"image-20210605231251492\"></p>\n<p>As you can see, we are using the windows operating system, but there’s a <code>bash</code> command that’s didn’t exist in windows. How to solve this? The answer is: we don’t even need to solve because we are using git bash. That’s why I recommended you to choose git bash but not the windows cmd or Powershell.</p>\n<p>Now, just run</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Then, turn to GitHub, open the repo for hosting the vuepress document, turn to the <em>Setting</em> page:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png\" alt=\"image-20210605231615793\"></p>\n<p>And go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png\" alt=\"image-20210605231713557\"></p>\n<p>Congratulations! You’ve done all the work!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"How-to-Build-a-document-site-by-Vuepress\"><a href=\"#How-to-Build-a-document-site-by-Vuepress\" class=\"headerlink\" title=\"How to Build a document site by Vuepress\"></a>How to Build a document site by Vuepress</h1><p>Before the beginning, I’d like to answer a question: <strong>Why you write this tutorial?</strong></p>\n<p>Yeah, there’s too many others article like this, but most of them assume that you have already learned Vue.js and had some knowledge of website building and deploying. So that’s why I make this article: for people who don’t know what is vue.js and never had a website. Anyway, it’s not a zero-basic tutorial, at least, you should know about some things like <em>what is GitHub?</em> <em>why should I write a document?</em> </p>\n<h2 id=\"Environments\"><a href=\"#Environments\" class=\"headerlink\" title=\"Environments\"></a>Environments</h2><p>This tutorial based on Windows 10 platform, and all the examples are under the windows-style.</p>\n<h3 id=\"Node-Js\"><a href=\"#Node-Js\" class=\"headerlink\" title=\"Node.Js\"></a>Node.Js</h3><p>Access the official website of <a href=\"https://nodejs.org/\">Node.js</a>, as you can see, there are 2 green buttons, we should click the left one: LTS version of Node.js</p>\n<p><img src=\"https://i.loli.net/2021/06/05/hNWkjnRq8rXSywi.png\" alt=\"image-20210605211258441\"></p>\n<p>When it finished, you can see a <em>.msi</em> file like this one:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zTfSIvnOCYbAHh2.png\" alt=\"image-20210605211512722\"></p>\n<p>Double click to open it, and keep clicking the <strong>Next</strong> button until the install wizard shows a <strong>Finish</strong> button. Since then, we installed node.js.</p>\n<h3 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h3><p>Although <em>npm</em>(node package manager) provides all the features, according to the document of the vuepress, <em>yarn</em> would be a better choice than <em>npm</em>.</p>\n<p>Let’s access <a href=\"https://classic.yarnpkg.com/en/docs/install/#windows-stable\">yarn installation site</a>, expand the <strong>Alternatives</strong> section:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/UcS8RCezKZHkanJ.png\" alt=\"image-20210605212346019\"></p>\n<p>Click the <em>Download Installer Button</em>, after the progress running over, you can get a <em>.msi</em> file, install it like node.js installer.</p>\n<h3 id=\"Git-Optional\"><a href=\"#Git-Optional\" class=\"headerlink\" title=\"Git (Optional)\"></a>Git (Optional)</h3><p>This step is optional, but if you do this, your work will be much easier.</p>\n<p>Access <a href=\"https://git-scm.com/download/win\">git official website</a>, you can see the interface like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/FN4Xftdeyh8aZqm.png\" alt=\"image-20210605213126512\"></p>\n<p>Click the button that I marked with a red box, the download will be starting, after then, you will get a git installer executable file, start it and just keep the default configuration.</p>\n<p>If install succeeds, you will see 2 git menu in any context menu of windows explorer:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/EHxXiDYlqVOWtZw.png\" alt=\"image-20210605213804014\"></p>\n<p>As you can see, I marked <em>Git Bash</em>, which is the command terminal we need to instead of windows cmd or Powershell.</p>\n<h2 id=\"Setup-Vuepress\"><a href=\"#Setup-Vuepress\" class=\"headerlink\" title=\"Setup Vuepress\"></a>Setup Vuepress</h2><p>Now, we had node.js and yarn, we are ready to start building a vuepress site!</p>\n<h3 id=\"Create-a-Github-repo-for-deploying-Vuepress\"><a href=\"#Create-a-Github-repo-for-deploying-Vuepress\" class=\"headerlink\" title=\"Create a Github repo for deploying Vuepress\"></a>Create a Github repo for deploying Vuepress</h3><p>I won’t show how to create a GitHub repo, but I would notice you are:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/AyLHD6hFcGeCtgw.png\" alt=\"image-20210605214554406\"></p>\n<p>You should choose the .gitignore template to Node, it will be more convenient for you.</p>\n<p>Clone the repo that we just created to the local disk, enter the directory that you contains your repo, and open git bash for it.</p>\n<h3 id=\"Install-Vuepress\"><a href=\"#Install-Vuepress\" class=\"headerlink\" title=\"Install Vuepress\"></a>Install Vuepress</h3><p>Before work starts, input the command below:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn init -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command means we created a node package with the default configuration. Then we can add vuepress to dependencies of our package:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn add -D vuepress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>This command needs about 2 minutes to complete, keep your patience.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oZF7Q9v5gTNtzfE.png\" alt=\"image-20210605215211625\"></p>\n<p>Since then, we installed the vuepress local.</p>\n<h3 id=\"Basic-configuration-for-vuepress\"><a href=\"#Basic-configuration-for-vuepress\" class=\"headerlink\" title=\"Basic configuration for vuepress\"></a>Basic configuration for vuepress</h3><p>After you installed the vuepress, the structure of your local files should be like this:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oA8GD2cR6k7FJzE.png\" alt=\"image-20210605215450501\"></p>\n<p>Open the <em>package.json</em>, add these lines in this JSON file and append <code>.temp</code> in the .gitignore file</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs --temp .temp\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This step is also optional, but if you do this, your progress will be more convenient. In fact, you don’t even need to know what these commands used for, just follow the steps.</p>\n<p>Now we created a folder that must named <em>docs</em>,</p>\n<p><img src=\"https://i.loli.net/2021/06/05/HqYn5SAC9Zu84mE.png\" alt=\"image-20210605220029939\"></p>\n<p>Then we created a file named README.md (just like index.html if you have any website knowledge), write any content you want inside.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zL6pC4QEfsiNA2Z.png\" alt=\"image-20210605220202704\"></p>\n<p>Since here, we could serve a local server for our document side, just input this command:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>When this interface displayed, your local document server has been created.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/oNmGHzTL5dMZh6t.png\" alt=\"image-20210605220517338\"></p>\n<p>Access <em><a href=\"http://localhost:8080/\">http://localhost:8080</a></em>, you can see an empty vuepress side now:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/te1lTOjEhz3SHrY.png\" alt=\"image-20210605220600598\"></p>\n<h3 id=\"config-js\"><a href=\"#config-js\" class=\"headerlink\" title=\"config.js\"></a>config.js</h3><p>Create a folder named <em>.vuepress</em> in <em>/doc</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/dgnJRQbjkKvzYWP.png\" alt=\"image-20210605220743591\"></p>\n<p>Create a javacript file in <em>/.vuepress</em>:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/jnIrx1uJit5l7M8.png\" alt=\"image-20210605220912318\"></p>\n<p>Add these lines inside:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello VuePress'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'Just playing around'</span><span class=\"token punctuation\">,</span>\n  base<span class=\"token operator\">:</span> <span class=\"token string\">\"/Vuepress4Beginner/\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>There’s a point you should be noticed, the <em>base</em> key should appear when you trying to deploy your document site on a sub-directory like <em><a href=\"http://www.xxxx.com/xxxx\">http://www.xxxx.com/xxxx</a></em>, the slash symbol should be beginning, and the end.</p>\n<p>Restart your local server, you will see the host had appended your <em>base</em> value</p>\n<p><img src=\"https://i.loli.net/2021/06/05/X49JSvZCfmzWjoG.png\" alt=\"image-20210605221808225\"></p>\n<p>And you will see the effect of the config.js, a title element displayed in the top-left corner</p>\n<p><img src=\"https://i.loli.net/2021/06/05/kWA6l2rLoGCsuyT.png\" alt=\"image-20210605221900646\"></p>\n<h3 id=\"root-README-md\"><a href=\"#root-README-md\" class=\"headerlink\" title=\"root README.md\"></a>root README.md</h3><p>Add these lines at the top of <em>root README.md</em>:</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">---\nhome: true\nherImage: &#x2F;hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: &#x2F;guide&#x2F;\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>You can change the element content as you want, the <em>hereImage</em> key should be removed if you don’t need it. And if you need a big logo on your document home page, you should know some basic knowledge about <a href=\"https://vuepress.vuejs.org/guide/assets.html#relative-urls\">vuepress asset</a>.</p>\n<p>The content below the <a href=\"https://jekyllrb.com/docs/front-matter/\">YAML font matter</a> will be display as normal markdown content.</p>\n<p>Now, I’ll tell you what is ever YAML font matter key-value pair used for:</p>\n<ul>\n<li>home: this page is used for the home page or not</li>\n<li>heroImage: the main logo displayed in the center of the home page</li>\n<li>heroText: the main title displayed in the center of the home page</li>\n<li>tagline: the subtitle under the heroText</li>\n<li>actionText: the text for the central button</li>\n<li>actionLink: the jump target for central button</li>\n<li>features: some feature under the central button<ul>\n<li>title: feature title</li>\n<li>details: feature description</li>\n</ul>\n</li>\n<li>footer: the text display in the footer of the site</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/06/05/IHVN6rb1lGD3y7Q.png\" alt=\"image-20210605223618117\"></p>\n<h3 id=\"Add-navigate-links\"><a href=\"#Add-navigate-links\" class=\"headerlink\" title=\"Add navigate links\"></a>Add navigate links</h3><p>Open <em>config.js</em>, and add these lines:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">themeConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  nav<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>As you can see, there’s an array named <em>nav</em>, you can add its member like:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>text: the text display in navigate bar</li>\n<li>link: the link for navigating, you can use a relative or absolute URL</li>\n</ul>\n<p>If you would like to know about the navigation bar, you can visit <a href=\"https://vuepress.vuejs.org/theme/default-theme-config.html#navbar-links\">navbar links</a> in vuepress document.</p>\n<h3 id=\"Start-writing\"><a href=\"#Start-writing\" class=\"headerlink\" title=\"Start writing\"></a>Start writing</h3><p>After all of these configurations, now you can start to write documents via markdown.</p>\n<p>Create a folder named <em>guide</em> in /docs:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Y2htFld3NbVpXJr.png\" alt=\"image-20210605223831721\"></p>\n<p>Create a README.me in /docs/guide</p>\n<p><img src=\"https://i.loli.net/2021/06/05/Vo4z3FyeCYpvW7O.png\" alt=\"image-20210605223942377\"></p>\n<p>Add this YAML font matter at the top of this README.md:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Enjoy!</p>\n<p><img src=\"https://i.loli.net/2021/06/05/IszYhVKlRygdTH6.png\" alt=\"image-20210605224226895\"></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is how the document site looks like after the above configurations, </p>\n<p><img src=\"https://i.loli.net/2021/06/05/qO9lp3JhBR7Ew58.png\" alt=\"image-20210605225004660\"></p>\n<p>I’ll list some point that you maybe didn’t know:</p>\n<ul>\n<li>REAME.md equals to index.html in website building</li>\n<li>The local file structure of our example:<ul>\n<li>.temp</li>\n<li>docs<ul>\n<li>.vuepress<ul>\n<li>config.js</li>\n</ul>\n</li>\n<li>guide<ul>\n<li>README.md</li>\n</ul>\n</li>\n<li>README.md</li>\n</ul>\n</li>\n<li>node_modules</li>\n<li>.gitignore</li>\n<li>package.json</li>\n<li>yarn.lock</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Deploy\"><a href=\"#Deploy\" class=\"headerlink\" title=\"Deploy\"></a>Deploy</h2><p>After all the work above, now we can deploy our document site to GitHub pages, maybe you would like to try another deployment, so you can check out <a href=\"https://vuepress.vuejs.org/guide/deploy.html#github-pages\">vuepress document</a>.</p>\n<h3 id=\"Create-deploy-script\"><a href=\"#Create-deploy-script\" class=\"headerlink\" title=\"Create deploy script\"></a>Create deploy script</h3><p>Create a .sh file named deploy.sh in the root directory</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd docs&#x2F;.vuepress&#x2F;dist\n\n# if you are deploying to a custom domain\n# echo &#39;www.example.com&#39; &gt; CNAME\n\ngit init\ngit add -A\ngit commit -m &#39;deploy&#39;\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;USERNAME&gt;.github.io.git master\n\n# if you are deploying to https:&#x2F;&#x2F;&lt;USERNAME&gt;.github.io&#x2F;&lt;REPO&gt;\n# git push -f git@github.com:&lt;USERNAME&gt;&#x2F;&lt;REPO&gt;.git master:gh-pages\n\ncd -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>I’d like to recommend that you shouldn’t just push the static pages to your master branch, your master branch should be storage your development environment. So you can just push them to another branch.</p>\n<p>Since then, you should add this line in the config.js:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;deploy&quot;: &quot;bash deploy.sh&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>And then config.js should look like:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/zXGdl3vxDHA8oCK.png\" alt=\"image-20210605231251492\"></p>\n<p>As you can see, we are using the windows operating system, but there’s a <code>bash</code> command that’s didn’t exist in windows. How to solve this? The answer is: we don’t even need to solve because we are using git bash. That’s why I recommended you to choose git bash but not the windows cmd or Powershell.</p>\n<p>Now, just run</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Then, turn to GitHub, open the repo for hosting the vuepress document, turn to the <em>Setting</em> page:</p>\n<p><img src=\"https://i.loli.net/2021/06/05/OuDRpXc6NbEkF9o.png\" alt=\"image-20210605231615793\"></p>\n<p>And go to the Pages section, set the source branch to gh:pages, click save. Just wait for moments, then access your page.</p>\n<p><img src=\"https://i.loli.net/2021/06/05/1kPFQTShXsvGf8r.png\" alt=\"image-20210605231713557\"></p>\n<p>Congratulations! You’ve done all the work!</p>\n"},{"title":"How to fix the problem that process.Exited handler will not execute","date":"2021-08-27T14:22:00.000Z","_content":"\nAs the code below:\n\n```cs\nvar path = @\"xxx.exe\";\n\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    }\n};\n\nprocess.Start();\n```\n\nIf there's a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?\n\nLet's add a event handler for `process.Exited` event:\n\n```cs\nprocess.Exited += (_, _) =>\n{\n    Console.WriteLine($\"`Process exit with code {process.ExitCode}`\");\n;\n```\n\nRun our application, and the question is: the code above didn't work properly, when the process that we started to exit, the `process.Exited` event handler didn't execute.\n\nSo you will check the [Document](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0), they say: `It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.` So what if we set EnableRaisingEvents to *true*?\n\n```cs\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    },\n    EnableRaisingEvents = true\n};\n```\n\nIn the code above, we've set EnableRaisingEvents to *true*, but if we run the application again, the ```process.Exited``` event handler didn't execute either, what we gonna do now?\n\nIf you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won't exit until the executable exited, we need to append the code below after the executable file started:\n\n```cs\nprocess.WaitForExit()\n```\n\nWe just run the application again, the console output `Process exit with code {process.ExitCode}` is displayed successfully now.","source":"_posts/How to fix the problem that process.Exited handler will not execute.md","raw":"---\ntitle: 'How to fix the problem that process.Exited handler will not execute'\ndate: 2021-08-27 22:22:00\ntags: CSharp\ncategories: dev\n---\n\nAs the code below:\n\n```cs\nvar path = @\"xxx.exe\";\n\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    }\n};\n\nprocess.Start();\n```\n\nIf there's a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?\n\nLet's add a event handler for `process.Exited` event:\n\n```cs\nprocess.Exited += (_, _) =>\n{\n    Console.WriteLine($\"`Process exit with code {process.ExitCode}`\");\n;\n```\n\nRun our application, and the question is: the code above didn't work properly, when the process that we started to exit, the `process.Exited` event handler didn't execute.\n\nSo you will check the [Document](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0), they say: `It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.` So what if we set EnableRaisingEvents to *true*?\n\n```cs\nvar process = new Process\n{\n    StartInfo = new ProcessStartInfo\n    {\n        FileName = path\n    },\n    EnableRaisingEvents = true\n};\n```\n\nIn the code above, we've set EnableRaisingEvents to *true*, but if we run the application again, the ```process.Exited``` event handler didn't execute either, what we gonna do now?\n\nIf you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won't exit until the executable exited, we need to append the code below after the executable file started:\n\n```cs\nprocess.WaitForExit()\n```\n\nWe just run the application again, the console output `Process exit with code {process.ExitCode}` is displayed successfully now.","slug":"How to fix the problem that process.Exited handler will not execute","published":1,"updated":"2022-07-20T09:00:08.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2ayz0008xona03rbdf4x","content":"<p>As the code below:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var path &#x3D; @&quot;xxx.exe&quot;;\n\nvar process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;\n&#125;;\n\nprocess.Start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If there’s a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?</p>\n<p>Let’s add a event handler for <code>process.Exited</code> event:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.Exited +&#x3D; (_, _) &#x3D;&gt;\n&#123;\n    Console.WriteLine($&quot;&#96;Process exit with code &#123;process.ExitCode&#125;&#96;&quot;);\n;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Run our application, and the question is: the code above didn’t work properly, when the process that we started to exit, the <code>process.Exited</code> event handler didn’t execute.</p>\n<p>So you will check the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0\">Document</a>, they say: <code>It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.</code> So what if we set EnableRaisingEvents to <em>true</em>?</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;,\n    EnableRaisingEvents &#x3D; true\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>In the code above, we’ve set EnableRaisingEvents to <em>true</em>, but if we run the application again, the <code>process.Exited</code> event handler didn’t execute either, what we gonna do now?</p>\n<p>If you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won’t exit until the executable exited, we need to append the code below after the executable file started:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.WaitForExit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>We just run the application again, the console output <code>Process exit with code &#123;process.ExitCode&#125;</code> is displayed successfully now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As the code below:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var path &#x3D; @&quot;xxx.exe&quot;;\n\nvar process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;\n&#125;;\n\nprocess.Start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If there’s a scenario that we need to detect if this process exited and execute handler, how would you like to implement it?</p>\n<p>Let’s add a event handler for <code>process.Exited</code> event:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.Exited +&#x3D; (_, _) &#x3D;&gt;\n&#123;\n    Console.WriteLine($&quot;&#96;Process exit with code &#123;process.ExitCode&#125;&#96;&quot;);\n;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Run our application, and the question is: the code above didn’t work properly, when the process that we started to exit, the <code>process.Exited</code> event handler didn’t execute.</p>\n<p>So you will check the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.exited?view=net-5.0\">Document</a>, they say: <code>It raises the Exited event when the process exits because the EnableRaisingEvents property was set when the process was created. The Exited event handler displays process information.</code> So what if we set EnableRaisingEvents to <em>true</em>?</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">var process &#x3D; new Process\n&#123;\n    StartInfo &#x3D; new ProcessStartInfo\n    &#123;\n        FileName &#x3D; path\n    &#125;,\n    EnableRaisingEvents &#x3D; true\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>In the code above, we’ve set EnableRaisingEvents to <em>true</em>, but if we run the application again, the <code>process.Exited</code> event handler didn’t execute either, what we gonna do now?</p>\n<p>If you care enough, you will find that when the executable file that we specified started success, our application end tho. On purpose to make our application won’t exit until the executable exited, we need to append the code below after the executable file started:</p>\n<pre class=\"line-numbers language-cs\" data-language=\"cs\"><code class=\"language-cs\">process.WaitForExit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>We just run the application again, the console output <code>Process exit with code &#123;process.ExitCode&#125;</code> is displayed successfully now.</p>\n"},{"title":"Solving: There should be exactly one item with [DropdownButtonFormField]'s value","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-06-06T08:18:28.000Z","password":null,"summary":"There should be exactly one item with [DropdownButtonFormField]''s value blah blah","_content":"\n## Scenario\n\nCoding a app with a two `DropdownButtonFormField`, which choose certain value from the first one, and represent specified items in the second one. Some of these value won't be the same, this is how's the problem come from.\n\n## Demonstration\n\nHere is an abstract model of my actual code:\n\n```dart\nclass DemoState extends State<Demo> {\n  var asia = [\"Singapore\", \"Korea\", \"China\", \"Japan\", \"India\"];\n  var europe = [\"UK\", \"Franch\", \"German\", \"Russia\", \"Minecraft\"];\n\n  String? selectedContry;\n  bool isChina = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            DropdownButton(\n              //notice this\n              value: selectedContry,\n              items: (isChina ? asia : europe)\n                  .map((e) => DropdownMenuItem(\n                        child: Text(e),\n                        value: e,\n                      ))\n                  .toList(),\n              onChanged: (String? value) {\n                setState(() {\n                  selectedContry = value;\n                  if (value == \"China\") {\n                    isChina = true;\n                  } else {\n                    isChina = false;\n                  }\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\nIf you trying to run it, there's an exception thrown like this:\n\n```\nException has occurred.\n_AssertionError ('package:flutter/src/material/dropdown.dart': Failed assertion: line 882 pos 15: 'items == null || items.isEmpty || value == null ||\n              items.where((DropdownMenuItem<T> item) {\n                return item.value == value;\n              }).length == 1': There should be exactly one item with [DropdownButton]'s value: Japan. \nEither zero or 2 or more [DropdownMenuItem]s were detected with the same value)\n```\n\n## Analysis\n\nIn this case, what is we expected is that when user click the item `China`, the dropdown won't change otherwise the dropdown will be populated with other list: `europe`. Actually, when you choose `China`, nothing goes wrong, but for other country, the exception will be thrown.\n\nLet's put it simple: this error is thrown because the code above trying to give a value that don't exist in the list `europe`. which is illegal in flutter.\n\nWhat should you do is simply populating the value that also exist in the new list.\n\n## Solution\n\nJust check if old value also exists in the new items, if false, just insert an surely-exist value, otherwise use the old value.\n\n```dart\nonChanged: (String? value) {\n  setState(() {\n    if (value == \"China\") {\n      isChina = true;\n      selectedContry = value;\n    } else {\n      isChina = false;\n      if (europe.contains(value)) {\n        selectedContry = value;\n      } else {\n        selectedContry = europe[0];\n      }\n    }\n  });\n},\n```","source":"_posts/There-should-be-exactly-one-item-with-DropdownButtonFormField-s-value.md","raw":"---\ntitle: 'Solving: There should be exactly one item with [DropdownButtonFormField]''s value'\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-06-06 16:18:28\npassword:\nsummary: There should be exactly one item with [DropdownButtonFormField]''s value blah blah\ntags: [flutter, dart, ui]\ncategories: dev\n---\n\n## Scenario\n\nCoding a app with a two `DropdownButtonFormField`, which choose certain value from the first one, and represent specified items in the second one. Some of these value won't be the same, this is how's the problem come from.\n\n## Demonstration\n\nHere is an abstract model of my actual code:\n\n```dart\nclass DemoState extends State<Demo> {\n  var asia = [\"Singapore\", \"Korea\", \"China\", \"Japan\", \"India\"];\n  var europe = [\"UK\", \"Franch\", \"German\", \"Russia\", \"Minecraft\"];\n\n  String? selectedContry;\n  bool isChina = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            DropdownButton(\n              //notice this\n              value: selectedContry,\n              items: (isChina ? asia : europe)\n                  .map((e) => DropdownMenuItem(\n                        child: Text(e),\n                        value: e,\n                      ))\n                  .toList(),\n              onChanged: (String? value) {\n                setState(() {\n                  selectedContry = value;\n                  if (value == \"China\") {\n                    isChina = true;\n                  } else {\n                    isChina = false;\n                  }\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\nIf you trying to run it, there's an exception thrown like this:\n\n```\nException has occurred.\n_AssertionError ('package:flutter/src/material/dropdown.dart': Failed assertion: line 882 pos 15: 'items == null || items.isEmpty || value == null ||\n              items.where((DropdownMenuItem<T> item) {\n                return item.value == value;\n              }).length == 1': There should be exactly one item with [DropdownButton]'s value: Japan. \nEither zero or 2 or more [DropdownMenuItem]s were detected with the same value)\n```\n\n## Analysis\n\nIn this case, what is we expected is that when user click the item `China`, the dropdown won't change otherwise the dropdown will be populated with other list: `europe`. Actually, when you choose `China`, nothing goes wrong, but for other country, the exception will be thrown.\n\nLet's put it simple: this error is thrown because the code above trying to give a value that don't exist in the list `europe`. which is illegal in flutter.\n\nWhat should you do is simply populating the value that also exist in the new list.\n\n## Solution\n\nJust check if old value also exists in the new items, if false, just insert an surely-exist value, otherwise use the old value.\n\n```dart\nonChanged: (String? value) {\n  setState(() {\n    if (value == \"China\") {\n      isChina = true;\n      selectedContry = value;\n    } else {\n      isChina = false;\n      if (europe.contains(value)) {\n        selectedContry = value;\n      } else {\n        selectedContry = europe[0];\n      }\n    }\n  });\n},\n```","slug":"There-should-be-exactly-one-item-with-DropdownButtonFormField-s-value","published":1,"updated":"2022-07-20T09:00:08.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2az1000cxonaebrq1o5m","content":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>Coding a app with a two <code>DropdownButtonFormField</code>, which choose certain value from the first one, and represent specified items in the second one. Some of these value won’t be the same, this is how’s the problem come from.</p>\n<h2 id=\"Demonstration\"><a href=\"#Demonstration\" class=\"headerlink\" title=\"Demonstration\"></a>Demonstration</h2><p>Here is an abstract model of my actual code:</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>Demo<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> asia <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Singapore\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Korea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Japan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"India\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> europe <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Franch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"German\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Russia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Minecraft\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  String<span class=\"token operator\">?</span> selectedContry<span class=\"token punctuation\">;</span>\n  bool isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n          mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token function\">DropdownButton</span><span class=\"token punctuation\">(</span>\n              <span class=\"token comment\">//notice this</span>\n              value<span class=\"token punctuation\">:</span> selectedContry<span class=\"token punctuation\">,</span>\n              items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>isChina <span class=\"token operator\">?</span> asia <span class=\"token punctuation\">:</span> europe<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">DropdownMenuItem</span><span class=\"token punctuation\">(</span>\n                        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        value<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token operator\">?</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If you trying to run it, there’s an exception thrown like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Exception has occurred.\n_AssertionError (&#39;package:flutter&#x2F;src&#x2F;material&#x2F;dropdown.dart&#39;: Failed assertion: line 882 pos 15: &#39;items &#x3D;&#x3D; null || items.isEmpty || value &#x3D;&#x3D; null ||\n              items.where((DropdownMenuItem&lt;T&gt; item) &#123;\n                return item.value &#x3D;&#x3D; value;\n              &#125;).length &#x3D;&#x3D; 1&#39;: There should be exactly one item with [DropdownButton]&#39;s value: Japan. \nEither zero or 2 or more [DropdownMenuItem]s were detected with the same value)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h2><p>In this case, what is we expected is that when user click the item <code>China</code>, the dropdown won’t change otherwise the dropdown will be populated with other list: <code>europe</code>. Actually, when you choose <code>China</code>, nothing goes wrong, but for other country, the exception will be thrown.</p>\n<p>Let’s put it simple: this error is thrown because the code above trying to give a value that don’t exist in the list <code>europe</code>. which is illegal in flutter.</p>\n<p>What should you do is simply populating the value that also exist in the new list.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>Just check if old value also exists in the new items, if false, just insert an surely-exist value, otherwise use the old value.</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token operator\">?</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>europe<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        selectedContry <span class=\"token operator\">=</span> europe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>Coding a app with a two <code>DropdownButtonFormField</code>, which choose certain value from the first one, and represent specified items in the second one. Some of these value won’t be the same, this is how’s the problem come from.</p>\n<h2 id=\"Demonstration\"><a href=\"#Demonstration\" class=\"headerlink\" title=\"Demonstration\"></a>Demonstration</h2><p>Here is an abstract model of my actual code:</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>Demo<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> asia <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Singapore\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Korea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Japan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"India\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> europe <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Franch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"German\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Russia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Minecraft\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  String<span class=\"token operator\">?</span> selectedContry<span class=\"token punctuation\">;</span>\n  bool isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n          mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token function\">DropdownButton</span><span class=\"token punctuation\">(</span>\n              <span class=\"token comment\">//notice this</span>\n              value<span class=\"token punctuation\">:</span> selectedContry<span class=\"token punctuation\">,</span>\n              items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>isChina <span class=\"token operator\">?</span> asia <span class=\"token punctuation\">:</span> europe<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">DropdownMenuItem</span><span class=\"token punctuation\">(</span>\n                        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        value<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token operator\">?</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>If you trying to run it, there’s an exception thrown like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Exception has occurred.\n_AssertionError (&#39;package:flutter&#x2F;src&#x2F;material&#x2F;dropdown.dart&#39;: Failed assertion: line 882 pos 15: &#39;items &#x3D;&#x3D; null || items.isEmpty || value &#x3D;&#x3D; null ||\n              items.where((DropdownMenuItem&lt;T&gt; item) &#123;\n                return item.value &#x3D;&#x3D; value;\n              &#125;).length &#x3D;&#x3D; 1&#39;: There should be exactly one item with [DropdownButton]&#39;s value: Japan. \nEither zero or 2 or more [DropdownMenuItem]s were detected with the same value)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis\"></a>Analysis</h2><p>In this case, what is we expected is that when user click the item <code>China</code>, the dropdown won’t change otherwise the dropdown will be populated with other list: <code>europe</code>. Actually, when you choose <code>China</code>, nothing goes wrong, but for other country, the exception will be thrown.</p>\n<p>Let’s put it simple: this error is thrown because the code above trying to give a value that don’t exist in the list <code>europe</code>. which is illegal in flutter.</p>\n<p>What should you do is simply populating the value that also exist in the new list.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>Just check if old value also exists in the new items, if false, just insert an surely-exist value, otherwise use the old value.</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token operator\">?</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      isChina <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>europe<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        selectedContry <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        selectedContry <span class=\"token operator\">=</span> europe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"浅谈逆境之下的主观能动性","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-04-27T16:44:59.000Z","password":null,"summary":null,"hidden":true,"_content":"\n# 前言\n\n> 不谈假大空。\n\n正如以前的无数次，每当我想写一些文字，我都会卡在某个段落，然后推翻重新来。这次也不例外，此前我在这篇博文中写下了几百个字，我觉得它们都写得乱七八糟，不是很好，于是又重新来过。希望这是最后一次从头再来。思绪已经完全断开了，所以等同于我又是重新写一次。很幸运这不是一个考场作文，不然它一定很糟糕。\n\n如你所见，18岁的我，作为一个成年人，仍在一所糟糕的学校的高一挣扎。面对着普遍比我小几乎两岁的同学，我无法再像我15岁时所做的那样，出口成脏，口无遮拦。客观原因如此，再加上去年复学时我的懦弱，这完全导致了我在人际关系上的失败。学校里的环境大概如此，回忆起我休学前的时光，实在天差地别，令我感慨。家庭环境更加不妙，无论文化程度高低，我所有的亲人都无法帮我摆脱任何一点的精神内耗。有时这确实，令人感到很孤独。\n\n这些话我本来打算像一些朋友和家人分享，但我如此叛经离道的语言和想法，大概又是一次敷衍式的赞赏或者心灵鸡汤式的教诲。于是，正如我父亲高中时所做的，把一些话写下来，自己总能看到，或许未来的某天也会有另一些有缘之人看到。\n\n# 努力\n\n> 释义：尽量将力量使出来。\n\n18周岁的我，在人类群体中并不算长者，可以说我的大部分人生还在未来等待发生。但我确确实实地活了18年，这个时间无法作假，我不得不承认的是，这么长的时光中，自从我拥有记忆和思考地能力以来，我没有任何关于“努力”的记忆。但是从某种意义上，没有任何努力的我，又地得到了许多人们需要努力才能得到的东西。比如我轻而易举地考上了全州最好的高中，即使我初三一整年几乎没有进行有效复习；我完全自学地掌握了一门编程语言，并且用它做出了一些成果......\n\n虽然这都不是什么丰功伟绩，但仍然给予了(当时的)我以满足感。我认为有必要分析一下为什么我会对这样的低端成果得意洋洋。\n\n### 低端环境\n\n显而易见地，我的家乡，云南省文山州，是一个不发达地区。我的小学，是一所乡镇中心校，我所知道的，似乎没人和我上同一所初中，大部分人都去了镇上的初中，少数人去了县里的。我的初中，是地级市最好的初中之一，同班之中，部分人去了还算体面的市区高中，也有部分人和我去了同一所高中，也有少数几人甚至没去高中。我的高中，是本自治州范围内最好的一所高中，号称“云南省重点中学”，而我又有幸地被分配在了这所“重点高中”的“重点班”里，算是相对地进入了一个相对高端的环境里。除了小学，似乎听起来都还不错，我得声明，这些“不错”、“重点”之类的溢美之词，都是相对而言的，正如所谓“矮子里找高个”。正如我的高中，过往的历史很是辉煌，每年都有数个考起清华北大的牛人，1916年建校的百年老校，这真是一层华美的虎皮。可是现在当年的虎已经老了，更像是一头老狗，那华美的虎皮倒是一如当年，却终究掩盖不了一本率、名校人数这些指标的断崖式下滑。于是“重点分部”的制度开始大行其道，造成的结果就是普通班和重点班的成绩断崖式差距。说这么多，只为了引出一个很遗憾的事实：复学之后，我被分配到普通班，这又让我重新回到了一个相对低端的环境。\n\n在这样的低端环境下，我轻而易举地形成优势，努力的根本意义就失去了。正如上个学期复学，和别人一样的零基础，而且初中知识完全忘记，甚至连不少常见汉字都不会写的我，在缺考一科生物的情况下，依然在班级上排行第一。\n\n### 惯性难改\n\n人类从基因上就理所当然地是短视的，于是一切引起舒服的习惯都很难被改掉，即使无数实践证明了这样的习惯是有害的。但人们仍然像温水里的青蛙，沉醉在温柔乡中无法自发，即使意识到自己正在慢慢死去。不努力的生活，我已经过了这么久，也可以看到未来的生活并不会黑暗，这是我的舒适区。大概十个人中会有大部分人都清楚意识到自己现在该做的是什么，但都因为吃喝玩乐各种娱乐消遣“控制了灵魂”，于是主观能动地，从长远出发地改动现有舒适处境，所需要的决心和智慧，几十万人人中都有可能无人具备。尤其是在现在，互联网的高度发达，各种算法和大数据精确无比地得知了你喜欢的是什么，于是年轻人被这些奶头乐控制的更加紧，改变处境的决心越来越难以积累。\n\n# 超越\n\n> 顺应历史，超越历史。\n\n某天上课恍惚中，这句引言忽然出现在我脑海里，我确认除了我没有别人提过类似的话，这是我原创的。历史现在处在这样一个糟糕的、黑暗的阶段，我们共同清楚这个事实，这是我们无法去忽略的，也是我们所求改变的。“改变”总是一个很大的工程，放到“历史”这样宏伟的名词上更是大的不可思议，所以个人之力完全微不足道，所需要的是一种星星之火可以燎原的大势所趋。\n\n回到我自己。我曾和某个家人谈及我现在所处的环境有多么的糟糕，但是她给我的回答是“做好自己就行”。某种意义上这句话是我观点的核心之一，但是它又带有一个显而易见的谬误：它主观地忽略了客观环境的影响，是一种独善其身式的个人主义。我后来又想了想，她其实应该这么问我：“你做出了什么努力来改变这样的环境呢？”\n\n答案是我没有做任何努力。我只是如同懦夫一样低头默默地等待着环境进行自我改变，完全把希望寄托于神仙和救世主，自己却完全不想走出舒适圈去。显而易见，如果环境确实自己莫名其妙变好了，那么我以现在这个状态必然得以取得更高成就，即使仍然没有任何努力。这样的愿景当然美好，但是它过于虚无缥缈，遥遥无期。\n\n于是，这就是我所要超越的历史了。我要发挥自己缺席已久的主观能动性，换句话说，我觉得我需要努力了。","source":"_posts/subjective-agency-under-adversity.md","raw":"---\ntitle: 浅谈逆境之下的主观能动性\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-04-28 00:44:59\npassword:\nsummary: \ntags: [\"母语时间\", \"半吊子哲学\"]\ncategories: [\"母语时间\"]\nhidden: true\n---\n\n# 前言\n\n> 不谈假大空。\n\n正如以前的无数次，每当我想写一些文字，我都会卡在某个段落，然后推翻重新来。这次也不例外，此前我在这篇博文中写下了几百个字，我觉得它们都写得乱七八糟，不是很好，于是又重新来过。希望这是最后一次从头再来。思绪已经完全断开了，所以等同于我又是重新写一次。很幸运这不是一个考场作文，不然它一定很糟糕。\n\n如你所见，18岁的我，作为一个成年人，仍在一所糟糕的学校的高一挣扎。面对着普遍比我小几乎两岁的同学，我无法再像我15岁时所做的那样，出口成脏，口无遮拦。客观原因如此，再加上去年复学时我的懦弱，这完全导致了我在人际关系上的失败。学校里的环境大概如此，回忆起我休学前的时光，实在天差地别，令我感慨。家庭环境更加不妙，无论文化程度高低，我所有的亲人都无法帮我摆脱任何一点的精神内耗。有时这确实，令人感到很孤独。\n\n这些话我本来打算像一些朋友和家人分享，但我如此叛经离道的语言和想法，大概又是一次敷衍式的赞赏或者心灵鸡汤式的教诲。于是，正如我父亲高中时所做的，把一些话写下来，自己总能看到，或许未来的某天也会有另一些有缘之人看到。\n\n# 努力\n\n> 释义：尽量将力量使出来。\n\n18周岁的我，在人类群体中并不算长者，可以说我的大部分人生还在未来等待发生。但我确确实实地活了18年，这个时间无法作假，我不得不承认的是，这么长的时光中，自从我拥有记忆和思考地能力以来，我没有任何关于“努力”的记忆。但是从某种意义上，没有任何努力的我，又地得到了许多人们需要努力才能得到的东西。比如我轻而易举地考上了全州最好的高中，即使我初三一整年几乎没有进行有效复习；我完全自学地掌握了一门编程语言，并且用它做出了一些成果......\n\n虽然这都不是什么丰功伟绩，但仍然给予了(当时的)我以满足感。我认为有必要分析一下为什么我会对这样的低端成果得意洋洋。\n\n### 低端环境\n\n显而易见地，我的家乡，云南省文山州，是一个不发达地区。我的小学，是一所乡镇中心校，我所知道的，似乎没人和我上同一所初中，大部分人都去了镇上的初中，少数人去了县里的。我的初中，是地级市最好的初中之一，同班之中，部分人去了还算体面的市区高中，也有部分人和我去了同一所高中，也有少数几人甚至没去高中。我的高中，是本自治州范围内最好的一所高中，号称“云南省重点中学”，而我又有幸地被分配在了这所“重点高中”的“重点班”里，算是相对地进入了一个相对高端的环境里。除了小学，似乎听起来都还不错，我得声明，这些“不错”、“重点”之类的溢美之词，都是相对而言的，正如所谓“矮子里找高个”。正如我的高中，过往的历史很是辉煌，每年都有数个考起清华北大的牛人，1916年建校的百年老校，这真是一层华美的虎皮。可是现在当年的虎已经老了，更像是一头老狗，那华美的虎皮倒是一如当年，却终究掩盖不了一本率、名校人数这些指标的断崖式下滑。于是“重点分部”的制度开始大行其道，造成的结果就是普通班和重点班的成绩断崖式差距。说这么多，只为了引出一个很遗憾的事实：复学之后，我被分配到普通班，这又让我重新回到了一个相对低端的环境。\n\n在这样的低端环境下，我轻而易举地形成优势，努力的根本意义就失去了。正如上个学期复学，和别人一样的零基础，而且初中知识完全忘记，甚至连不少常见汉字都不会写的我，在缺考一科生物的情况下，依然在班级上排行第一。\n\n### 惯性难改\n\n人类从基因上就理所当然地是短视的，于是一切引起舒服的习惯都很难被改掉，即使无数实践证明了这样的习惯是有害的。但人们仍然像温水里的青蛙，沉醉在温柔乡中无法自发，即使意识到自己正在慢慢死去。不努力的生活，我已经过了这么久，也可以看到未来的生活并不会黑暗，这是我的舒适区。大概十个人中会有大部分人都清楚意识到自己现在该做的是什么，但都因为吃喝玩乐各种娱乐消遣“控制了灵魂”，于是主观能动地，从长远出发地改动现有舒适处境，所需要的决心和智慧，几十万人人中都有可能无人具备。尤其是在现在，互联网的高度发达，各种算法和大数据精确无比地得知了你喜欢的是什么，于是年轻人被这些奶头乐控制的更加紧，改变处境的决心越来越难以积累。\n\n# 超越\n\n> 顺应历史，超越历史。\n\n某天上课恍惚中，这句引言忽然出现在我脑海里，我确认除了我没有别人提过类似的话，这是我原创的。历史现在处在这样一个糟糕的、黑暗的阶段，我们共同清楚这个事实，这是我们无法去忽略的，也是我们所求改变的。“改变”总是一个很大的工程，放到“历史”这样宏伟的名词上更是大的不可思议，所以个人之力完全微不足道，所需要的是一种星星之火可以燎原的大势所趋。\n\n回到我自己。我曾和某个家人谈及我现在所处的环境有多么的糟糕，但是她给我的回答是“做好自己就行”。某种意义上这句话是我观点的核心之一，但是它又带有一个显而易见的谬误：它主观地忽略了客观环境的影响，是一种独善其身式的个人主义。我后来又想了想，她其实应该这么问我：“你做出了什么努力来改变这样的环境呢？”\n\n答案是我没有做任何努力。我只是如同懦夫一样低头默默地等待着环境进行自我改变，完全把希望寄托于神仙和救世主，自己却完全不想走出舒适圈去。显而易见，如果环境确实自己莫名其妙变好了，那么我以现在这个状态必然得以取得更高成就，即使仍然没有任何努力。这样的愿景当然美好，但是它过于虚无缥缈，遥遥无期。\n\n于是，这就是我所要超越的历史了。我要发挥自己缺席已久的主观能动性，换句话说，我觉得我需要努力了。","slug":"subjective-agency-under-adversity","published":1,"updated":"2022-07-21T10:55:51.798Z","_id":"cl5te2az3000exona4hrkfviz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>不谈假大空。</p>\n</blockquote>\n<p>正如以前的无数次，每当我想写一些文字，我都会卡在某个段落，然后推翻重新来。这次也不例外，此前我在这篇博文中写下了几百个字，我觉得它们都写得乱七八糟，不是很好，于是又重新来过。希望这是最后一次从头再来。思绪已经完全断开了，所以等同于我又是重新写一次。很幸运这不是一个考场作文，不然它一定很糟糕。</p>\n<p>如你所见，18岁的我，作为一个成年人，仍在一所糟糕的学校的高一挣扎。面对着普遍比我小几乎两岁的同学，我无法再像我15岁时所做的那样，出口成脏，口无遮拦。客观原因如此，再加上去年复学时我的懦弱，这完全导致了我在人际关系上的失败。学校里的环境大概如此，回忆起我休学前的时光，实在天差地别，令我感慨。家庭环境更加不妙，无论文化程度高低，我所有的亲人都无法帮我摆脱任何一点的精神内耗。有时这确实，令人感到很孤独。</p>\n<p>这些话我本来打算像一些朋友和家人分享，但我如此叛经离道的语言和想法，大概又是一次敷衍式的赞赏或者心灵鸡汤式的教诲。于是，正如我父亲高中时所做的，把一些话写下来，自己总能看到，或许未来的某天也会有另一些有缘之人看到。</p>\n<h1 id=\"努力\"><a href=\"#努力\" class=\"headerlink\" title=\"努力\"></a>努力</h1><blockquote>\n<p>释义：尽量将力量使出来。</p>\n</blockquote>\n<p>18周岁的我，在人类群体中并不算长者，可以说我的大部分人生还在未来等待发生。但我确确实实地活了18年，这个时间无法作假，我不得不承认的是，这么长的时光中，自从我拥有记忆和思考地能力以来，我没有任何关于“努力”的记忆。但是从某种意义上，没有任何努力的我，又地得到了许多人们需要努力才能得到的东西。比如我轻而易举地考上了全州最好的高中，即使我初三一整年几乎没有进行有效复习；我完全自学地掌握了一门编程语言，并且用它做出了一些成果……</p>\n<p>虽然这都不是什么丰功伟绩，但仍然给予了(当时的)我以满足感。我认为有必要分析一下为什么我会对这样的低端成果得意洋洋。</p>\n<h3 id=\"低端环境\"><a href=\"#低端环境\" class=\"headerlink\" title=\"低端环境\"></a>低端环境</h3><p>显而易见地，我的家乡，云南省文山州，是一个不发达地区。我的小学，是一所乡镇中心校，我所知道的，似乎没人和我上同一所初中，大部分人都去了镇上的初中，少数人去了县里的。我的初中，是地级市最好的初中之一，同班之中，部分人去了还算体面的市区高中，也有部分人和我去了同一所高中，也有少数几人甚至没去高中。我的高中，是本自治州范围内最好的一所高中，号称“云南省重点中学”，而我又有幸地被分配在了这所“重点高中”的“重点班”里，算是相对地进入了一个相对高端的环境里。除了小学，似乎听起来都还不错，我得声明，这些“不错”、“重点”之类的溢美之词，都是相对而言的，正如所谓“矮子里找高个”。正如我的高中，过往的历史很是辉煌，每年都有数个考起清华北大的牛人，1916年建校的百年老校，这真是一层华美的虎皮。可是现在当年的虎已经老了，更像是一头老狗，那华美的虎皮倒是一如当年，却终究掩盖不了一本率、名校人数这些指标的断崖式下滑。于是“重点分部”的制度开始大行其道，造成的结果就是普通班和重点班的成绩断崖式差距。说这么多，只为了引出一个很遗憾的事实：复学之后，我被分配到普通班，这又让我重新回到了一个相对低端的环境。</p>\n<p>在这样的低端环境下，我轻而易举地形成优势，努力的根本意义就失去了。正如上个学期复学，和别人一样的零基础，而且初中知识完全忘记，甚至连不少常见汉字都不会写的我，在缺考一科生物的情况下，依然在班级上排行第一。</p>\n<h3 id=\"惯性难改\"><a href=\"#惯性难改\" class=\"headerlink\" title=\"惯性难改\"></a>惯性难改</h3><p>人类从基因上就理所当然地是短视的，于是一切引起舒服的习惯都很难被改掉，即使无数实践证明了这样的习惯是有害的。但人们仍然像温水里的青蛙，沉醉在温柔乡中无法自发，即使意识到自己正在慢慢死去。不努力的生活，我已经过了这么久，也可以看到未来的生活并不会黑暗，这是我的舒适区。大概十个人中会有大部分人都清楚意识到自己现在该做的是什么，但都因为吃喝玩乐各种娱乐消遣“控制了灵魂”，于是主观能动地，从长远出发地改动现有舒适处境，所需要的决心和智慧，几十万人人中都有可能无人具备。尤其是在现在，互联网的高度发达，各种算法和大数据精确无比地得知了你喜欢的是什么，于是年轻人被这些奶头乐控制的更加紧，改变处境的决心越来越难以积累。</p>\n<h1 id=\"超越\"><a href=\"#超越\" class=\"headerlink\" title=\"超越\"></a>超越</h1><blockquote>\n<p>顺应历史，超越历史。</p>\n</blockquote>\n<p>某天上课恍惚中，这句引言忽然出现在我脑海里，我确认除了我没有别人提过类似的话，这是我原创的。历史现在处在这样一个糟糕的、黑暗的阶段，我们共同清楚这个事实，这是我们无法去忽略的，也是我们所求改变的。“改变”总是一个很大的工程，放到“历史”这样宏伟的名词上更是大的不可思议，所以个人之力完全微不足道，所需要的是一种星星之火可以燎原的大势所趋。</p>\n<p>回到我自己。我曾和某个家人谈及我现在所处的环境有多么的糟糕，但是她给我的回答是“做好自己就行”。某种意义上这句话是我观点的核心之一，但是它又带有一个显而易见的谬误：它主观地忽略了客观环境的影响，是一种独善其身式的个人主义。我后来又想了想，她其实应该这么问我：“你做出了什么努力来改变这样的环境呢？”</p>\n<p>答案是我没有做任何努力。我只是如同懦夫一样低头默默地等待着环境进行自我改变，完全把希望寄托于神仙和救世主，自己却完全不想走出舒适圈去。显而易见，如果环境确实自己莫名其妙变好了，那么我以现在这个状态必然得以取得更高成就，即使仍然没有任何努力。这样的愿景当然美好，但是它过于虚无缥缈，遥遥无期。</p>\n<p>于是，这就是我所要超越的历史了。我要发挥自己缺席已久的主观能动性，换句话说，我觉得我需要努力了。</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>不谈假大空。</p>\n</blockquote>\n<p>正如以前的无数次，每当我想写一些文字，我都会卡在某个段落，然后推翻重新来。这次也不例外，此前我在这篇博文中写下了几百个字，我觉得它们都写得乱七八糟，不是很好，于是又重新来过。希望这是最后一次从头再来。思绪已经完全断开了，所以等同于我又是重新写一次。很幸运这不是一个考场作文，不然它一定很糟糕。</p>\n<p>如你所见，18岁的我，作为一个成年人，仍在一所糟糕的学校的高一挣扎。面对着普遍比我小几乎两岁的同学，我无法再像我15岁时所做的那样，出口成脏，口无遮拦。客观原因如此，再加上去年复学时我的懦弱，这完全导致了我在人际关系上的失败。学校里的环境大概如此，回忆起我休学前的时光，实在天差地别，令我感慨。家庭环境更加不妙，无论文化程度高低，我所有的亲人都无法帮我摆脱任何一点的精神内耗。有时这确实，令人感到很孤独。</p>\n<p>这些话我本来打算像一些朋友和家人分享，但我如此叛经离道的语言和想法，大概又是一次敷衍式的赞赏或者心灵鸡汤式的教诲。于是，正如我父亲高中时所做的，把一些话写下来，自己总能看到，或许未来的某天也会有另一些有缘之人看到。</p>\n<h1 id=\"努力\"><a href=\"#努力\" class=\"headerlink\" title=\"努力\"></a>努力</h1><blockquote>\n<p>释义：尽量将力量使出来。</p>\n</blockquote>\n<p>18周岁的我，在人类群体中并不算长者，可以说我的大部分人生还在未来等待发生。但我确确实实地活了18年，这个时间无法作假，我不得不承认的是，这么长的时光中，自从我拥有记忆和思考地能力以来，我没有任何关于“努力”的记忆。但是从某种意义上，没有任何努力的我，又地得到了许多人们需要努力才能得到的东西。比如我轻而易举地考上了全州最好的高中，即使我初三一整年几乎没有进行有效复习；我完全自学地掌握了一门编程语言，并且用它做出了一些成果……</p>\n<p>虽然这都不是什么丰功伟绩，但仍然给予了(当时的)我以满足感。我认为有必要分析一下为什么我会对这样的低端成果得意洋洋。</p>\n<h3 id=\"低端环境\"><a href=\"#低端环境\" class=\"headerlink\" title=\"低端环境\"></a>低端环境</h3><p>显而易见地，我的家乡，云南省文山州，是一个不发达地区。我的小学，是一所乡镇中心校，我所知道的，似乎没人和我上同一所初中，大部分人都去了镇上的初中，少数人去了县里的。我的初中，是地级市最好的初中之一，同班之中，部分人去了还算体面的市区高中，也有部分人和我去了同一所高中，也有少数几人甚至没去高中。我的高中，是本自治州范围内最好的一所高中，号称“云南省重点中学”，而我又有幸地被分配在了这所“重点高中”的“重点班”里，算是相对地进入了一个相对高端的环境里。除了小学，似乎听起来都还不错，我得声明，这些“不错”、“重点”之类的溢美之词，都是相对而言的，正如所谓“矮子里找高个”。正如我的高中，过往的历史很是辉煌，每年都有数个考起清华北大的牛人，1916年建校的百年老校，这真是一层华美的虎皮。可是现在当年的虎已经老了，更像是一头老狗，那华美的虎皮倒是一如当年，却终究掩盖不了一本率、名校人数这些指标的断崖式下滑。于是“重点分部”的制度开始大行其道，造成的结果就是普通班和重点班的成绩断崖式差距。说这么多，只为了引出一个很遗憾的事实：复学之后，我被分配到普通班，这又让我重新回到了一个相对低端的环境。</p>\n<p>在这样的低端环境下，我轻而易举地形成优势，努力的根本意义就失去了。正如上个学期复学，和别人一样的零基础，而且初中知识完全忘记，甚至连不少常见汉字都不会写的我，在缺考一科生物的情况下，依然在班级上排行第一。</p>\n<h3 id=\"惯性难改\"><a href=\"#惯性难改\" class=\"headerlink\" title=\"惯性难改\"></a>惯性难改</h3><p>人类从基因上就理所当然地是短视的，于是一切引起舒服的习惯都很难被改掉，即使无数实践证明了这样的习惯是有害的。但人们仍然像温水里的青蛙，沉醉在温柔乡中无法自发，即使意识到自己正在慢慢死去。不努力的生活，我已经过了这么久，也可以看到未来的生活并不会黑暗，这是我的舒适区。大概十个人中会有大部分人都清楚意识到自己现在该做的是什么，但都因为吃喝玩乐各种娱乐消遣“控制了灵魂”，于是主观能动地，从长远出发地改动现有舒适处境，所需要的决心和智慧，几十万人人中都有可能无人具备。尤其是在现在，互联网的高度发达，各种算法和大数据精确无比地得知了你喜欢的是什么，于是年轻人被这些奶头乐控制的更加紧，改变处境的决心越来越难以积累。</p>\n<h1 id=\"超越\"><a href=\"#超越\" class=\"headerlink\" title=\"超越\"></a>超越</h1><blockquote>\n<p>顺应历史，超越历史。</p>\n</blockquote>\n<p>某天上课恍惚中，这句引言忽然出现在我脑海里，我确认除了我没有别人提过类似的话，这是我原创的。历史现在处在这样一个糟糕的、黑暗的阶段，我们共同清楚这个事实，这是我们无法去忽略的，也是我们所求改变的。“改变”总是一个很大的工程，放到“历史”这样宏伟的名词上更是大的不可思议，所以个人之力完全微不足道，所需要的是一种星星之火可以燎原的大势所趋。</p>\n<p>回到我自己。我曾和某个家人谈及我现在所处的环境有多么的糟糕，但是她给我的回答是“做好自己就行”。某种意义上这句话是我观点的核心之一，但是它又带有一个显而易见的谬误：它主观地忽略了客观环境的影响，是一种独善其身式的个人主义。我后来又想了想，她其实应该这么问我：“你做出了什么努力来改变这样的环境呢？”</p>\n<p>答案是我没有做任何努力。我只是如同懦夫一样低头默默地等待着环境进行自我改变，完全把希望寄托于神仙和救世主，自己却完全不想走出舒适圈去。显而易见，如果环境确实自己莫名其妙变好了，那么我以现在这个状态必然得以取得更高成就，即使仍然没有任何努力。这样的愿景当然美好，但是它过于虚无缥缈，遥遥无期。</p>\n<p>于是，这就是我所要超越的历史了。我要发挥自己缺席已久的主观能动性，换句话说，我觉得我需要努力了。</p>\n"},{"title":"Packing fat jar with Kotlin Gradle DSL script","date":"2021-08-27T14:00:00.000Z","Categories":"dev","_content":"\nFirst, let's get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check `Kotlin DSL build script`. By the way, if you just want a very simple try, just choose whatever you want `Additional Libraries and Frameworks`, and just keep the default package configuration.\n\n![](https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png)\n\nAs you can see, our project has been successfully initiated by the default way. And a simple `HelloWorld` kotlin file has been created.\n![](https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png)\n\nIt's time to release our HelloWorld project to people!\n\nAll our work based on the plugin [shadow](https://github.com/johnrengelman/shadow), so let's install it:\n```kotlin\nplugins {\n    kotlin(\"jvm\") version \"1.5.21\"\n    id(\"com.github.johnrengelman.shadow\") version \"7.0.0\" //you can modify the version here to the latest\n}\n```\n\nThe last configuration item is, append there's code to the end of the script file:\n```kotlin\ntasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>() {\n    manifest {\n        attributes[\"Main-Class\"] = \"LauncherKt\" //you must modify here to your own main class\n                                                //note: if you are using kotlin like me, don't forget to \n                                                //append \"Kt\" as a suffix of the class name\n    }\n}\n```\n\nThis is the final result of the jobs above, now we can start making our fat jar.\n\n![](https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png)\n\nCheck out the sidebar right side, you will found that there's a `shadow` section in the Gradle task list, right-click the section of `shadowJar`, and just waiting for the process to run out.\n\n![](https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png)\n\nIt's time to gain our reward, turn into `<your project directory>/build/lib`, have a look at the jar with `-all` suffix---that's what we exactly need to.\n\n![](https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png)\nNow you can execute this artifact via java runtime:\n```shell\njava -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar <arguments, splitting with spaces>\n```\n![](https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png)\n\nHave fun, and enjoy!","source":"_posts/Packing fat jar with Kotlin Gradle DSL script.md","raw":"---\ntitle: 'Packing fat jar with Kotlin Gradle DSL script'\ndate: 2021-08-27 22:00:00\ntags: Kotlin\nCategories: dev\n---\n\nFirst, let's get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check `Kotlin DSL build script`. By the way, if you just want a very simple try, just choose whatever you want `Additional Libraries and Frameworks`, and just keep the default package configuration.\n\n![](https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png)\n\nAs you can see, our project has been successfully initiated by the default way. And a simple `HelloWorld` kotlin file has been created.\n![](https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png)\n\nIt's time to release our HelloWorld project to people!\n\nAll our work based on the plugin [shadow](https://github.com/johnrengelman/shadow), so let's install it:\n```kotlin\nplugins {\n    kotlin(\"jvm\") version \"1.5.21\"\n    id(\"com.github.johnrengelman.shadow\") version \"7.0.0\" //you can modify the version here to the latest\n}\n```\n\nThe last configuration item is, append there's code to the end of the script file:\n```kotlin\ntasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>() {\n    manifest {\n        attributes[\"Main-Class\"] = \"LauncherKt\" //you must modify here to your own main class\n                                                //note: if you are using kotlin like me, don't forget to \n                                                //append \"Kt\" as a suffix of the class name\n    }\n}\n```\n\nThis is the final result of the jobs above, now we can start making our fat jar.\n\n![](https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png)\n\nCheck out the sidebar right side, you will found that there's a `shadow` section in the Gradle task list, right-click the section of `shadowJar`, and just waiting for the process to run out.\n\n![](https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png)\n\nIt's time to gain our reward, turn into `<your project directory>/build/lib`, have a look at the jar with `-all` suffix---that's what we exactly need to.\n\n![](https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png)\nNow you can execute this artifact via java runtime:\n```shell\njava -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar <arguments, splitting with spaces>\n```\n![](https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png)\n\nHave fun, and enjoy!","slug":"Packing fat jar with Kotlin Gradle DSL script","published":1,"updated":"2022-07-20T09:00:08.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2az5000ixona1eehgldw","content":"<p>First, let’s get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check <code>Kotlin DSL build script</code>. By the way, if you just want a very simple try, just choose whatever you want <code>Additional Libraries and Frameworks</code>, and just keep the default package configuration.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png\"></p>\n<p>As you can see, our project has been successfully initiated by the default way. And a simple <code>HelloWorld</code> kotlin file has been created.<br><img src=\"https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png\"></p>\n<p>It’s time to release our HelloWorld project to people!</p>\n<p>All our work based on the plugin <a href=\"https://github.com/johnrengelman/shadow\">shadow</a>, so let’s install it:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jvm\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.5.21\"</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.github.johnrengelman.shadow\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"7.0.0\"</span> <span class=\"token comment\">//you can modify the version here to the latest</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>The last configuration item is, append there’s code to the end of the script file:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">tasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>jengelman<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>ShadowJar<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    manifest <span class=\"token punctuation\">&#123;</span>\n        attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"Main-Class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LauncherKt\"</span> <span class=\"token comment\">//you must modify here to your own main class</span>\n                                                <span class=\"token comment\">//note: if you are using kotlin like me, don't forget to </span>\n                                                <span class=\"token comment\">//append \"Kt\" as a suffix of the class name</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is the final result of the jobs above, now we can start making our fat jar.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png\"></p>\n<p>Check out the sidebar right side, you will found that there’s a <code>shadow</code> section in the Gradle task list, right-click the section of <code>shadowJar</code>, and just waiting for the process to run out.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png\"></p>\n<p>It’s time to gain our reward, turn into <code>&lt;your project directory&gt;/build/lib</code>, have a look at the jar with <code>-all</code> suffix—that’s what we exactly need to.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png\"><br>Now you can execute this artifact via java runtime:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar &lt;arguments, splitting with spaces&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png\"></p>\n<p>Have fun, and enjoy!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>First, let’s get started by creating a new kotlin(java the same) project. Just select the Gradle template tab and check <code>Kotlin DSL build script</code>. By the way, if you just want a very simple try, just choose whatever you want <code>Additional Libraries and Frameworks</code>, and just keep the default package configuration.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/lDbrqL2ySa8W6TH.png\"></p>\n<p>As you can see, our project has been successfully initiated by the default way. And a simple <code>HelloWorld</code> kotlin file has been created.<br><img src=\"https://i.loli.net/2021/07/24/EgX9QYDayfZbCdt.png\"></p>\n<p>It’s time to release our HelloWorld project to people!</p>\n<p>All our work based on the plugin <a href=\"https://github.com/johnrengelman/shadow\">shadow</a>, so let’s install it:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jvm\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"1.5.21\"</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.github.johnrengelman.shadow\"</span><span class=\"token punctuation\">)</span> version <span class=\"token string\">\"7.0.0\"</span> <span class=\"token comment\">//you can modify the version here to the latest</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>The last configuration item is, append there’s code to the end of the script file:</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">tasks<span class=\"token punctuation\">.</span>withType<span class=\"token operator\">&lt;</span>com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>jengelman<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>ShadowJar<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    manifest <span class=\"token punctuation\">&#123;</span>\n        attributes<span class=\"token punctuation\">[</span><span class=\"token string\">\"Main-Class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LauncherKt\"</span> <span class=\"token comment\">//you must modify here to your own main class</span>\n                                                <span class=\"token comment\">//note: if you are using kotlin like me, don't forget to </span>\n                                                <span class=\"token comment\">//append \"Kt\" as a suffix of the class name</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is the final result of the jobs above, now we can start making our fat jar.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/o9gqh3QyYe8BsRw.png\"></p>\n<p>Check out the sidebar right side, you will found that there’s a <code>shadow</code> section in the Gradle task list, right-click the section of <code>shadowJar</code>, and just waiting for the process to run out.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/ma4rFSMV6PAYEt8.png\"></p>\n<p>It’s time to gain our reward, turn into <code>&lt;your project directory&gt;/build/lib</code>, have a look at the jar with <code>-all</code> suffix—that’s what we exactly need to.</p>\n<p><img src=\"https://i.loli.net/2021/07/24/sLYrpFQ3WG2KZi5.png\"><br>Now you can execute this artifact via java runtime:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -jar F:\\Demos\\untitled\\build\\libs\\untitled-1.0-SNAPSHOT-all.jar &lt;arguments, splitting with spaces&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i.loli.net/2021/07/24/AqEInmfUug4PLsk.png\"></p>\n<p>Have fun, and enjoy!</p>\n"},{"title":"Permanently add environment variables on Fedora linux","date":"2022-04-13T15:40:00.000Z","_content":"\n# Background\n\nI'm trying to be a Linux-cool guy recently, to be honest, Linux is too much tougher than Windows, but also being honest, Linux is much more interesting than Windows. You faced to problems, you googled it, and the problems are gone... just feel like fabricating a huge LEGO toy, feeling full of sense of accomplishment, it's fascinating!\n\nIn this post, I'll introduce how to add environment variables on Fedora linux (other distros may be the same). \n\n# Go for it\n\nFirstly, you can check your current environment variables via `echo $PATH`, the result will be like:\n\n```\nbash: /home/ahpx/.local/bin:/home/ahpx/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/ahpx/.dotnet/tools:/home/ahpx/Softwares/dart-sdk/bin\n```\n\nWell, for a Linux noob like me, we don't really care about using zsh or whatever else terminals, we simply use system-built-in one, the bash. So for now, you just open this file: `/etc/profile`.\n\nUse Visual Studio Code will be decent, just open the file in GUI and save it as root mode. If you don't have it, just use `sudo nano /etc/profile`(or vim, whatever you want).\n\nBasically here is what you can see in `profile` file:\n\n```\n# /etc/profile\n\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in /etc/bashrc\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n\npathmunge () {\n    case \":${PATH}:\" in\n        *:\"$1\":*)\n            ;;\n        *)\n            if [ \"$2\" = \"after\" ] ; then\n                PATH=$PATH:$1\n            else\n                PATH=$1:$PATH\n            fi\n    esac\n}\n\n\nif [ -x /usr/bin/id ]; then\n    if [ -z \"$EUID\" ]; then\n        # ksh workaround\n        EUID=`/usr/bin/id -u`\n        UID=`/usr/bin/id -ru`\n    fi\n    USER=\"`/usr/bin/id -un`\"\n    LOGNAME=$USER\n    MAIL=\"/var/spool/mail/$USER\"\nfi\n\n# Path manipulation\nif [ \"$EUID\" = \"0\" ]; then\n    pathmunge /usr/sbin\n    pathmunge /usr/local/sbin\nelse\n    pathmunge /usr/local/sbin after\n    pathmunge /usr/sbin after\nfi\n\nHOSTNAME=$(/usr/bin/hostnamectl --transient 2>/dev/null) || \\\nHOSTNAME=$(/usr/bin/hostname 2>/dev/null) || \\\nHOSTNAME=$(/usr/bin/uname -n)\n\nHISTSIZE=1000\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL\n\nfor i in /etc/profile.d/*.sh /etc/profile.d/sh.local ; do\n    if [ -r \"$i\" ]; then\n        if [ \"${-#*i}\" != \"$-\" ]; then \n            . \"$i\"\n        else\n            . \"$i\" >/dev/null\n        fi\n    fi\ndone\n\nunset i\nunset -f pathmunge\n\n# Source global bash config, when interactive but not posix or sh mode\nif test \"$BASH\" &&\\\n   test -z \"$POSIXLY_CORRECT\" &&\\\n   test \"${0#-}\" != sh &&\\\n   test -r /etc/bashrc\nthen\n   # Bash login shells run only /etc/profile\n   # Bash non-login shells run only /etc/bashrc\n   # Check for double sourcing is done in /etc/bashrc.\n   . /etc/bashrc\nfi\n\n```\n\nScroll it down to end line, now you can add your environment variables like this:\n\n```bash\nexport PATH=$PATH:\"first\":\"second\"\n```\n\nYeah, quite simple, right? But there's one last thing you should keep in mind: **DON'T MISS THE `$PATH:`**.\n\n# References\n\n+ [Learn How to Set Your $PATH Variables Permanently in Linux](https://www.tecmint.com/set-path-variable-linux-permanently/)","source":"_posts/Permanently add environment variables on Fedora linux.md","raw":"---\ntitle: 'Permanently add environment variables on Fedora linux'\ndate: 2022-04-13 23:40:00\ntags: [\"Linux\",\"Fedora\"]\ncategories: system\n---\n\n# Background\n\nI'm trying to be a Linux-cool guy recently, to be honest, Linux is too much tougher than Windows, but also being honest, Linux is much more interesting than Windows. You faced to problems, you googled it, and the problems are gone... just feel like fabricating a huge LEGO toy, feeling full of sense of accomplishment, it's fascinating!\n\nIn this post, I'll introduce how to add environment variables on Fedora linux (other distros may be the same). \n\n# Go for it\n\nFirstly, you can check your current environment variables via `echo $PATH`, the result will be like:\n\n```\nbash: /home/ahpx/.local/bin:/home/ahpx/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/home/ahpx/.dotnet/tools:/home/ahpx/Softwares/dart-sdk/bin\n```\n\nWell, for a Linux noob like me, we don't really care about using zsh or whatever else terminals, we simply use system-built-in one, the bash. So for now, you just open this file: `/etc/profile`.\n\nUse Visual Studio Code will be decent, just open the file in GUI and save it as root mode. If you don't have it, just use `sudo nano /etc/profile`(or vim, whatever you want).\n\nBasically here is what you can see in `profile` file:\n\n```\n# /etc/profile\n\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in /etc/bashrc\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n\npathmunge () {\n    case \":${PATH}:\" in\n        *:\"$1\":*)\n            ;;\n        *)\n            if [ \"$2\" = \"after\" ] ; then\n                PATH=$PATH:$1\n            else\n                PATH=$1:$PATH\n            fi\n    esac\n}\n\n\nif [ -x /usr/bin/id ]; then\n    if [ -z \"$EUID\" ]; then\n        # ksh workaround\n        EUID=`/usr/bin/id -u`\n        UID=`/usr/bin/id -ru`\n    fi\n    USER=\"`/usr/bin/id -un`\"\n    LOGNAME=$USER\n    MAIL=\"/var/spool/mail/$USER\"\nfi\n\n# Path manipulation\nif [ \"$EUID\" = \"0\" ]; then\n    pathmunge /usr/sbin\n    pathmunge /usr/local/sbin\nelse\n    pathmunge /usr/local/sbin after\n    pathmunge /usr/sbin after\nfi\n\nHOSTNAME=$(/usr/bin/hostnamectl --transient 2>/dev/null) || \\\nHOSTNAME=$(/usr/bin/hostname 2>/dev/null) || \\\nHOSTNAME=$(/usr/bin/uname -n)\n\nHISTSIZE=1000\nif [ \"$HISTCONTROL\" = \"ignorespace\" ] ; then\n    export HISTCONTROL=ignoreboth\nelse\n    export HISTCONTROL=ignoredups\nfi\n\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL\n\nfor i in /etc/profile.d/*.sh /etc/profile.d/sh.local ; do\n    if [ -r \"$i\" ]; then\n        if [ \"${-#*i}\" != \"$-\" ]; then \n            . \"$i\"\n        else\n            . \"$i\" >/dev/null\n        fi\n    fi\ndone\n\nunset i\nunset -f pathmunge\n\n# Source global bash config, when interactive but not posix or sh mode\nif test \"$BASH\" &&\\\n   test -z \"$POSIXLY_CORRECT\" &&\\\n   test \"${0#-}\" != sh &&\\\n   test -r /etc/bashrc\nthen\n   # Bash login shells run only /etc/profile\n   # Bash non-login shells run only /etc/bashrc\n   # Check for double sourcing is done in /etc/bashrc.\n   . /etc/bashrc\nfi\n\n```\n\nScroll it down to end line, now you can add your environment variables like this:\n\n```bash\nexport PATH=$PATH:\"first\":\"second\"\n```\n\nYeah, quite simple, right? But there's one last thing you should keep in mind: **DON'T MISS THE `$PATH:`**.\n\n# References\n\n+ [Learn How to Set Your $PATH Variables Permanently in Linux](https://www.tecmint.com/set-path-variable-linux-permanently/)","slug":"Permanently add environment variables on Fedora linux","published":1,"updated":"2022-07-20T09:00:08.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5te2az6000kxonafw80crs8","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I’m trying to be a Linux-cool guy recently, to be honest, Linux is too much tougher than Windows, but also being honest, Linux is much more interesting than Windows. You faced to problems, you googled it, and the problems are gone… just feel like fabricating a huge LEGO toy, feeling full of sense of accomplishment, it’s fascinating!</p>\n<p>In this post, I’ll introduce how to add environment variables on Fedora linux (other distros may be the same). </p>\n<h1 id=\"Go-for-it\"><a href=\"#Go-for-it\" class=\"headerlink\" title=\"Go for it\"></a>Go for it</h1><p>Firstly, you can check your current environment variables via <code>echo $PATH</code>, the result will be like:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bash: &#x2F;home&#x2F;ahpx&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;ahpx&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;home&#x2F;ahpx&#x2F;.dotnet&#x2F;tools:&#x2F;home&#x2F;ahpx&#x2F;Softwares&#x2F;dart-sdk&#x2F;bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Well, for a Linux noob like me, we don’t really care about using zsh or whatever else terminals, we simply use system-built-in one, the bash. So for now, you just open this file: <code>/etc/profile</code>.</p>\n<p>Use Visual Studio Code will be decent, just open the file in GUI and save it as root mode. If you don’t have it, just use <code>sudo nano /etc/profile</code>(or vim, whatever you want).</p>\n<p>Basically here is what you can see in <code>profile</code> file:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># &#x2F;etc&#x2F;profile\n\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in &#x2F;etc&#x2F;bashrc\n\n# It&#39;s NOT a good idea to change this file unless you know what you\n# are doing. It&#39;s much better to create a custom.sh shell script in\n# &#x2F;etc&#x2F;profile.d&#x2F; to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n\npathmunge () &#123;\n    case &quot;:$&#123;PATH&#125;:&quot; in\n        *:&quot;$1&quot;:*)\n            ;;\n        *)\n            if [ &quot;$2&quot; &#x3D; &quot;after&quot; ] ; then\n                PATH&#x3D;$PATH:$1\n            else\n                PATH&#x3D;$1:$PATH\n            fi\n    esac\n&#125;\n\n\nif [ -x &#x2F;usr&#x2F;bin&#x2F;id ]; then\n    if [ -z &quot;$EUID&quot; ]; then\n        # ksh workaround\n        EUID&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;id -u&#96;\n        UID&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;id -ru&#96;\n    fi\n    USER&#x3D;&quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot;\n    LOGNAME&#x3D;$USER\n    MAIL&#x3D;&quot;&#x2F;var&#x2F;spool&#x2F;mail&#x2F;$USER&quot;\nfi\n\n# Path manipulation\nif [ &quot;$EUID&quot; &#x3D; &quot;0&quot; ]; then\n    pathmunge &#x2F;usr&#x2F;sbin\n    pathmunge &#x2F;usr&#x2F;local&#x2F;sbin\nelse\n    pathmunge &#x2F;usr&#x2F;local&#x2F;sbin after\n    pathmunge &#x2F;usr&#x2F;sbin after\nfi\n\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;hostnamectl --transient 2&gt;&#x2F;dev&#x2F;null) || \\\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;hostname 2&gt;&#x2F;dev&#x2F;null) || \\\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;uname -n)\n\nHISTSIZE&#x3D;1000\nif [ &quot;$HISTCONTROL&quot; &#x3D; &quot;ignorespace&quot; ] ; then\n    export HISTCONTROL&#x3D;ignoreboth\nelse\n    export HISTCONTROL&#x3D;ignoredups\nfi\n\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL\n\nfor i in &#x2F;etc&#x2F;profile.d&#x2F;*.sh &#x2F;etc&#x2F;profile.d&#x2F;sh.local ; do\n    if [ -r &quot;$i&quot; ]; then\n        if [ &quot;$&#123;-#*i&#125;&quot; !&#x3D; &quot;$-&quot; ]; then \n            . &quot;$i&quot;\n        else\n            . &quot;$i&quot; &gt;&#x2F;dev&#x2F;null\n        fi\n    fi\ndone\n\nunset i\nunset -f pathmunge\n\n# Source global bash config, when interactive but not posix or sh mode\nif test &quot;$BASH&quot; &amp;&amp;\\\n   test -z &quot;$POSIXLY_CORRECT&quot; &amp;&amp;\\\n   test &quot;$&#123;0#-&#125;&quot; !&#x3D; sh &amp;&amp;\\\n   test -r &#x2F;etc&#x2F;bashrc\nthen\n   # Bash login shells run only &#x2F;etc&#x2F;profile\n   # Bash non-login shells run only &#x2F;etc&#x2F;bashrc\n   # Check for double sourcing is done in &#x2F;etc&#x2F;bashrc.\n   . &#x2F;etc&#x2F;bashrc\nfi\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Scroll it down to end line, now you can add your environment variables like this:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"first\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"second\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Yeah, quite simple, right? But there’s one last thing you should keep in mind: <strong>DON’T MISS THE <code>$PATH:</code></strong>.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.tecmint.com/set-path-variable-linux-permanently/\">Learn How to Set Your $PATH Variables Permanently in Linux</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I’m trying to be a Linux-cool guy recently, to be honest, Linux is too much tougher than Windows, but also being honest, Linux is much more interesting than Windows. You faced to problems, you googled it, and the problems are gone… just feel like fabricating a huge LEGO toy, feeling full of sense of accomplishment, it’s fascinating!</p>\n<p>In this post, I’ll introduce how to add environment variables on Fedora linux (other distros may be the same). </p>\n<h1 id=\"Go-for-it\"><a href=\"#Go-for-it\" class=\"headerlink\" title=\"Go for it\"></a>Go for it</h1><p>Firstly, you can check your current environment variables via <code>echo $PATH</code>, the result will be like:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bash: &#x2F;home&#x2F;ahpx&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;ahpx&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;home&#x2F;ahpx&#x2F;.dotnet&#x2F;tools:&#x2F;home&#x2F;ahpx&#x2F;Softwares&#x2F;dart-sdk&#x2F;bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Well, for a Linux noob like me, we don’t really care about using zsh or whatever else terminals, we simply use system-built-in one, the bash. So for now, you just open this file: <code>/etc/profile</code>.</p>\n<p>Use Visual Studio Code will be decent, just open the file in GUI and save it as root mode. If you don’t have it, just use <code>sudo nano /etc/profile</code>(or vim, whatever you want).</p>\n<p>Basically here is what you can see in <code>profile</code> file:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># &#x2F;etc&#x2F;profile\n\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in &#x2F;etc&#x2F;bashrc\n\n# It&#39;s NOT a good idea to change this file unless you know what you\n# are doing. It&#39;s much better to create a custom.sh shell script in\n# &#x2F;etc&#x2F;profile.d&#x2F; to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n\npathmunge () &#123;\n    case &quot;:$&#123;PATH&#125;:&quot; in\n        *:&quot;$1&quot;:*)\n            ;;\n        *)\n            if [ &quot;$2&quot; &#x3D; &quot;after&quot; ] ; then\n                PATH&#x3D;$PATH:$1\n            else\n                PATH&#x3D;$1:$PATH\n            fi\n    esac\n&#125;\n\n\nif [ -x &#x2F;usr&#x2F;bin&#x2F;id ]; then\n    if [ -z &quot;$EUID&quot; ]; then\n        # ksh workaround\n        EUID&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;id -u&#96;\n        UID&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;id -ru&#96;\n    fi\n    USER&#x3D;&quot;&#96;&#x2F;usr&#x2F;bin&#x2F;id -un&#96;&quot;\n    LOGNAME&#x3D;$USER\n    MAIL&#x3D;&quot;&#x2F;var&#x2F;spool&#x2F;mail&#x2F;$USER&quot;\nfi\n\n# Path manipulation\nif [ &quot;$EUID&quot; &#x3D; &quot;0&quot; ]; then\n    pathmunge &#x2F;usr&#x2F;sbin\n    pathmunge &#x2F;usr&#x2F;local&#x2F;sbin\nelse\n    pathmunge &#x2F;usr&#x2F;local&#x2F;sbin after\n    pathmunge &#x2F;usr&#x2F;sbin after\nfi\n\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;hostnamectl --transient 2&gt;&#x2F;dev&#x2F;null) || \\\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;hostname 2&gt;&#x2F;dev&#x2F;null) || \\\nHOSTNAME&#x3D;$(&#x2F;usr&#x2F;bin&#x2F;uname -n)\n\nHISTSIZE&#x3D;1000\nif [ &quot;$HISTCONTROL&quot; &#x3D; &quot;ignorespace&quot; ] ; then\n    export HISTCONTROL&#x3D;ignoreboth\nelse\n    export HISTCONTROL&#x3D;ignoredups\nfi\n\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL\n\nfor i in &#x2F;etc&#x2F;profile.d&#x2F;*.sh &#x2F;etc&#x2F;profile.d&#x2F;sh.local ; do\n    if [ -r &quot;$i&quot; ]; then\n        if [ &quot;$&#123;-#*i&#125;&quot; !&#x3D; &quot;$-&quot; ]; then \n            . &quot;$i&quot;\n        else\n            . &quot;$i&quot; &gt;&#x2F;dev&#x2F;null\n        fi\n    fi\ndone\n\nunset i\nunset -f pathmunge\n\n# Source global bash config, when interactive but not posix or sh mode\nif test &quot;$BASH&quot; &amp;&amp;\\\n   test -z &quot;$POSIXLY_CORRECT&quot; &amp;&amp;\\\n   test &quot;$&#123;0#-&#125;&quot; !&#x3D; sh &amp;&amp;\\\n   test -r &#x2F;etc&#x2F;bashrc\nthen\n   # Bash login shells run only &#x2F;etc&#x2F;profile\n   # Bash non-login shells run only &#x2F;etc&#x2F;bashrc\n   # Check for double sourcing is done in &#x2F;etc&#x2F;bashrc.\n   . &#x2F;etc&#x2F;bashrc\nfi\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Scroll it down to end line, now you can add your environment variables like this:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"first\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"second\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Yeah, quite simple, right? But there’s one last thing you should keep in mind: <strong>DON’T MISS THE <code>$PATH:</code></strong>.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.tecmint.com/set-path-variable-linux-permanently/\">Learn How to Set Your $PATH Variables Permanently in Linux</a></li>\n</ul>\n"},{"title":"纪念我今天改掉了伴随我18年的名字","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-07-21T10:33:00.000Z","password":null,"summary":null,"hidden":true,"_content":"\n## 为赋新词强说愁\n\n今天是暑假的第二天，我却急不可耐地去派出所改掉了我的名字。这并非是我很讨厌现在的名字，一切的一切，都是因为它中间那个字太过惊世骇俗，是如此的不凡，以至于在如今的中国网络信息系统中，它通常会被识别的一个特殊符号，而不是一个合规格的汉字。这让我的社会生活极为不便，不管是银行卡、手机号，还是一些游戏的实名认证，这个独特的字都会带来不少麻烦。\n\n这个标题很有噱头，但是我的名字实际上没有改变。虽然严格意义上来讲，我确实是改掉了我的名字，但是实际上，因为这个神奇的字还有一个现行的繁体字在简体中文中，是一个“正常”的汉字，我就把我的名字中间的字，改成了这个鹤立鸡群的繁体字。通常来说，如果有人问我为什么我的名字如此特殊，我会告诉他们这是我父亲赋予我的字，是他在词典里翻找出来的，寄托着他对我的期待，是他对我最大的祝福，这当然也是真正的原因，但还有更深刻的意思————我希望自己也是如此的不同凡响。\n\n或许是我在做着一种春秋大梦，也大概是确实终究不愿归同俗流。\n\n上面是一些文艺青年式无病呻吟的感慨，其实我现在心情相当好，所以为了表示我不是那万千恶臭的文青之一，我还得在这篇文章另一部分里写一些实际的内容。","source":"_posts/纪念我今天改掉了伴随我18年的名字.md","raw":"---\ntitle: 纪念我今天改掉了伴随我18年的名字\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-07-21 18:33:00\npassword: \nsummary:\ntags: [\"杂谈\"]\ncategories: [\"母语时间\"]\nhidden: true\n---\n\n## 为赋新词强说愁\n\n今天是暑假的第二天，我却急不可耐地去派出所改掉了我的名字。这并非是我很讨厌现在的名字，一切的一切，都是因为它中间那个字太过惊世骇俗，是如此的不凡，以至于在如今的中国网络信息系统中，它通常会被识别的一个特殊符号，而不是一个合规格的汉字。这让我的社会生活极为不便，不管是银行卡、手机号，还是一些游戏的实名认证，这个独特的字都会带来不少麻烦。\n\n这个标题很有噱头，但是我的名字实际上没有改变。虽然严格意义上来讲，我确实是改掉了我的名字，但是实际上，因为这个神奇的字还有一个现行的繁体字在简体中文中，是一个“正常”的汉字，我就把我的名字中间的字，改成了这个鹤立鸡群的繁体字。通常来说，如果有人问我为什么我的名字如此特殊，我会告诉他们这是我父亲赋予我的字，是他在词典里翻找出来的，寄托着他对我的期待，是他对我最大的祝福，这当然也是真正的原因，但还有更深刻的意思————我希望自己也是如此的不同凡响。\n\n或许是我在做着一种春秋大梦，也大概是确实终究不愿归同俗流。\n\n上面是一些文艺青年式无病呻吟的感慨，其实我现在心情相当好，所以为了表示我不是那万千恶臭的文青之一，我还得在这篇文章另一部分里写一些实际的内容。","slug":"纪念我今天改掉了伴随我18年的名字","published":1,"updated":"2022-07-21T10:55:45.787Z","_id":"cl5uwz99p0000kcnagvxo5g7k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为赋新词强说愁\"><a href=\"#为赋新词强说愁\" class=\"headerlink\" title=\"为赋新词强说愁\"></a>为赋新词强说愁</h2><p>今天是暑假的第二天，我却急不可耐地去派出所改掉了我的名字。这并非是我很讨厌现在的名字，一切的一切，都是因为它中间那个字太过惊世骇俗，是如此的不凡，以至于在如今的中国网络信息系统中，它通常会被识别的一个特殊符号，而不是一个合规格的汉字。这让我的社会生活极为不便，不管是银行卡、手机号，还是一些游戏的实名认证，这个独特的字都会带来不少麻烦。</p>\n<p>这个标题很有噱头，但是我的名字实际上没有改变。虽然严格意义上来讲，我确实是改掉了我的名字，但是实际上，因为这个神奇的字还有一个现行的繁体字在简体中文中，是一个“正常”的汉字，我就把我的名字中间的字，改成了这个鹤立鸡群的繁体字。通常来说，如果有人问我为什么我的名字如此特殊，我会告诉他们这是我父亲赋予我的字，是他在词典里翻找出来的，寄托着他对我的期待，是他对我最大的祝福，这当然也是真正的原因，但还有更深刻的意思————我希望自己也是如此的不同凡响。</p>\n<p>或许是我在做着一种春秋大梦，也大概是确实终究不愿归同俗流。</p>\n<p>上面是一些文艺青年式无病呻吟的感慨，其实我现在心情相当好，所以为了表示我不是那万千恶臭的文青之一，我还得在这篇文章另一部分里写一些实际的内容。</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为赋新词强说愁\"><a href=\"#为赋新词强说愁\" class=\"headerlink\" title=\"为赋新词强说愁\"></a>为赋新词强说愁</h2><p>今天是暑假的第二天，我却急不可耐地去派出所改掉了我的名字。这并非是我很讨厌现在的名字，一切的一切，都是因为它中间那个字太过惊世骇俗，是如此的不凡，以至于在如今的中国网络信息系统中，它通常会被识别的一个特殊符号，而不是一个合规格的汉字。这让我的社会生活极为不便，不管是银行卡、手机号，还是一些游戏的实名认证，这个独特的字都会带来不少麻烦。</p>\n<p>这个标题很有噱头，但是我的名字实际上没有改变。虽然严格意义上来讲，我确实是改掉了我的名字，但是实际上，因为这个神奇的字还有一个现行的繁体字在简体中文中，是一个“正常”的汉字，我就把我的名字中间的字，改成了这个鹤立鸡群的繁体字。通常来说，如果有人问我为什么我的名字如此特殊，我会告诉他们这是我父亲赋予我的字，是他在词典里翻找出来的，寄托着他对我的期待，是他对我最大的祝福，这当然也是真正的原因，但还有更深刻的意思————我希望自己也是如此的不同凡响。</p>\n<p>或许是我在做着一种春秋大梦，也大概是确实终究不愿归同俗流。</p>\n<p>上面是一些文艺青年式无病呻吟的感慨，其实我现在心情相当好，所以为了表示我不是那万千恶臭的文青之一，我还得在这篇文章另一部分里写一些实际的内容。</p>\n"},{"title":"如何改变你的名字","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-07-21T11:00:28.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n> 不管你是因为什么需要改变伴随你多年的名字，我都祝你好运。\n\n我是云南人，因此这篇文章中的所有内容有可能只适用于云南，甚至在云南不同的地方也可能会有所不同，我希望它可以对所有人起到参考作用，但你可能需要根据实际情况做出一些调整。\n\n## 前提\n\n- 身份证\n- 户口本\n- 家长陪同及同意（如果你未满18岁）\n\n## 事由\n\n正所谓名不正，言不顺。改名这件事，是需要一个正当理由才能进行的。根据《中华人民共和国户口登记条例》所言：\n\n> 由需要更改名字的本人向户口所在地派出所提出申请，并把需要改名的理由写充分，到当地派出所户籍室办理，户口登记机关认为有必要的时候，可以向申请人索取有关变更或者更正的证明。十八周岁以下的人需要变更姓名的时候，由本人或者父母、收养人向户口登记机关申请变更登记；如果是十八周岁以上，由本人向户口登记机关申请变更登记。\n\n而所谓的正当理由，也即：\n\n- 重名\n- 歧义\n- 生僻字\n\n## 申请\n\n改名需要申请书，申请书需要打印出来，而且要用比较正式的格式，这里是我如何写我的申请书的。\n\n- 需要包含这几项个人基本信息\n    - 当前姓名\n    - 身份证号码\n    - 家庭住址\n    - 手机号码\n- 需要改名的事由，通常就是原名xxx对本人的工作和生活等多方面造成不便云云\n- 需要写明从原名改为何名\n- 需要在申请书的落款处留下日期和签名（签名需要手写）\n\n## 提交\n\n如果一切正常，提交改名申请给相关人员，他们会给你一张用于确认改名的表单，你只需确实之后签字按手印，就可以等待派出所审批了。通常来说，你可以等待**3个工作日**之后，去派出所办理新的身份证。值得注意的是3个工作日，也就是说如果你星期五去完成改名申请提交，你不应该下星期二去派出所，而是下星期三。","source":"_posts/如何改变你的名字.md","raw":"---\ntitle: 如何改变你的名字\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-07-21 19:00:28\npassword:\nsummary:\ntags: [生活, 杂谈]\ncategories: [社会生活]\n---\n\n## 前言\n\n> 不管你是因为什么需要改变伴随你多年的名字，我都祝你好运。\n\n我是云南人，因此这篇文章中的所有内容有可能只适用于云南，甚至在云南不同的地方也可能会有所不同，我希望它可以对所有人起到参考作用，但你可能需要根据实际情况做出一些调整。\n\n## 前提\n\n- 身份证\n- 户口本\n- 家长陪同及同意（如果你未满18岁）\n\n## 事由\n\n正所谓名不正，言不顺。改名这件事，是需要一个正当理由才能进行的。根据《中华人民共和国户口登记条例》所言：\n\n> 由需要更改名字的本人向户口所在地派出所提出申请，并把需要改名的理由写充分，到当地派出所户籍室办理，户口登记机关认为有必要的时候，可以向申请人索取有关变更或者更正的证明。十八周岁以下的人需要变更姓名的时候，由本人或者父母、收养人向户口登记机关申请变更登记；如果是十八周岁以上，由本人向户口登记机关申请变更登记。\n\n而所谓的正当理由，也即：\n\n- 重名\n- 歧义\n- 生僻字\n\n## 申请\n\n改名需要申请书，申请书需要打印出来，而且要用比较正式的格式，这里是我如何写我的申请书的。\n\n- 需要包含这几项个人基本信息\n    - 当前姓名\n    - 身份证号码\n    - 家庭住址\n    - 手机号码\n- 需要改名的事由，通常就是原名xxx对本人的工作和生活等多方面造成不便云云\n- 需要写明从原名改为何名\n- 需要在申请书的落款处留下日期和签名（签名需要手写）\n\n## 提交\n\n如果一切正常，提交改名申请给相关人员，他们会给你一张用于确认改名的表单，你只需确实之后签字按手印，就可以等待派出所审批了。通常来说，你可以等待**3个工作日**之后，去派出所办理新的身份证。值得注意的是3个工作日，也就是说如果你星期五去完成改名申请提交，你不应该下星期二去派出所，而是下星期三。","slug":"如何改变你的名字","published":1,"updated":"2022-07-21T12:36:33.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5xn5gnx00000gna9nxaakql","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>不管你是因为什么需要改变伴随你多年的名字，我都祝你好运。</p>\n</blockquote>\n<p>我是云南人，因此这篇文章中的所有内容有可能只适用于云南，甚至在云南不同的地方也可能会有所不同，我希望它可以对所有人起到参考作用，但你可能需要根据实际情况做出一些调整。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>身份证</li>\n<li>户口本</li>\n<li>家长陪同及同意（如果你未满18岁）</li>\n</ul>\n<h2 id=\"事由\"><a href=\"#事由\" class=\"headerlink\" title=\"事由\"></a>事由</h2><p>正所谓名不正，言不顺。改名这件事，是需要一个正当理由才能进行的。根据《中华人民共和国户口登记条例》所言：</p>\n<blockquote>\n<p>由需要更改名字的本人向户口所在地派出所提出申请，并把需要改名的理由写充分，到当地派出所户籍室办理，户口登记机关认为有必要的时候，可以向申请人索取有关变更或者更正的证明。十八周岁以下的人需要变更姓名的时候，由本人或者父母、收养人向户口登记机关申请变更登记；如果是十八周岁以上，由本人向户口登记机关申请变更登记。</p>\n</blockquote>\n<p>而所谓的正当理由，也即：</p>\n<ul>\n<li>重名</li>\n<li>歧义</li>\n<li>生僻字</li>\n</ul>\n<h2 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h2><p>改名需要申请书，申请书需要打印出来，而且要用比较正式的格式，这里是我如何写我的申请书的。</p>\n<ul>\n<li>需要包含这几项个人基本信息<ul>\n<li>当前姓名</li>\n<li>身份证号码</li>\n<li>家庭住址</li>\n<li>手机号码</li>\n</ul>\n</li>\n<li>需要改名的事由，通常就是原名xxx对本人的工作和生活等多方面造成不便云云</li>\n<li>需要写明从原名改为何名</li>\n<li>需要在申请书的落款处留下日期和签名（签名需要手写）</li>\n</ul>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>如果一切正常，提交改名申请给相关人员，他们会给你一张用于确认改名的表单，你只需确实之后签字按手印，就可以等待派出所审批了。通常来说，你可以等待<strong>3个工作日</strong>之后，去派出所办理新的身份证。值得注意的是3个工作日，也就是说如果你星期五去完成改名申请提交，你不应该下星期二去派出所，而是下星期三。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>不管你是因为什么需要改变伴随你多年的名字，我都祝你好运。</p>\n</blockquote>\n<p>我是云南人，因此这篇文章中的所有内容有可能只适用于云南，甚至在云南不同的地方也可能会有所不同，我希望它可以对所有人起到参考作用，但你可能需要根据实际情况做出一些调整。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>身份证</li>\n<li>户口本</li>\n<li>家长陪同及同意（如果你未满18岁）</li>\n</ul>\n<h2 id=\"事由\"><a href=\"#事由\" class=\"headerlink\" title=\"事由\"></a>事由</h2><p>正所谓名不正，言不顺。改名这件事，是需要一个正当理由才能进行的。根据《中华人民共和国户口登记条例》所言：</p>\n<blockquote>\n<p>由需要更改名字的本人向户口所在地派出所提出申请，并把需要改名的理由写充分，到当地派出所户籍室办理，户口登记机关认为有必要的时候，可以向申请人索取有关变更或者更正的证明。十八周岁以下的人需要变更姓名的时候，由本人或者父母、收养人向户口登记机关申请变更登记；如果是十八周岁以上，由本人向户口登记机关申请变更登记。</p>\n</blockquote>\n<p>而所谓的正当理由，也即：</p>\n<ul>\n<li>重名</li>\n<li>歧义</li>\n<li>生僻字</li>\n</ul>\n<h2 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h2><p>改名需要申请书，申请书需要打印出来，而且要用比较正式的格式，这里是我如何写我的申请书的。</p>\n<ul>\n<li>需要包含这几项个人基本信息<ul>\n<li>当前姓名</li>\n<li>身份证号码</li>\n<li>家庭住址</li>\n<li>手机号码</li>\n</ul>\n</li>\n<li>需要改名的事由，通常就是原名xxx对本人的工作和生活等多方面造成不便云云</li>\n<li>需要写明从原名改为何名</li>\n<li>需要在申请书的落款处留下日期和签名（签名需要手写）</li>\n</ul>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>如果一切正常，提交改名申请给相关人员，他们会给你一张用于确认改名的表单，你只需确实之后签字按手印，就可以等待派出所审批了。通常来说，你可以等待<strong>3个工作日</strong>之后，去派出所办理新的身份证。值得注意的是3个工作日，也就是说如果你星期五去完成改名申请提交，你不应该下星期二去派出所，而是下星期三。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5te2ayp0001xona6biqbi1q","category_id":"cl5te2ayv0004xona9cm24f1z","_id":"cl5te2az4000gxona8shrgwd9"},{"post_id":"cl5te2ayz0008xona03rbdf4x","category_id":"cl5te2ayv0004xona9cm24f1z","_id":"cl5te2az6000jxonaa6m15kvi"},{"post_id":"cl5te2az1000cxonaebrq1o5m","category_id":"cl5te2ayv0004xona9cm24f1z","_id":"cl5te2az7000lxona821x078m"},{"post_id":"cl5te2ayt0003xonaa7hedbdw","category_id":"cl5te2ayv0004xona9cm24f1z","_id":"cl5te2az8000oxonacc7r8i6o"},{"post_id":"cl5te2ayx0006xonae1pu353e","category_id":"cl5te2az4000fxonae82nb7pc","_id":"cl5te2az8000pxona00r4ff1w"},{"post_id":"cl5te2ayy0007xonah169f3fm","category_id":"cl5te2az7000mxona65sx2glq","_id":"cl5te2az9000sxonahc3s8xje"},{"post_id":"cl5te2az3000exona4hrkfviz","category_id":"cl5te2az8000qxona25ci4l5v","_id":"cl5te2az9000xxona0t9p60q1"},{"post_id":"cl5te2az6000kxonafw80crs8","category_id":"cl5te2az9000txona16s67fry","_id":"cl5te2aza0011xona18qoeh6b"},{"post_id":"cl5uwz99p0000kcnagvxo5g7k","category_id":"cl5te2az8000qxona25ci4l5v","_id":"cl5uwz99x0002kcnaas5a2tdu"},{"post_id":"cl5xn5gnx00000gna9nxaakql","category_id":"cl5uxajlw0001cgnahj9p45r6","_id":"cl5xn5go200040gnaexrzg4n3"}],"PostTag":[{"post_id":"cl5te2ayp0001xona6biqbi1q","tag_id":"cl5te2ayw0005xona7jqj7wzp","_id":"cl5te2az1000bxonadu9w359i"},{"post_id":"cl5te2ayz0008xona03rbdf4x","tag_id":"cl5te2ayw0005xona7jqj7wzp","_id":"cl5te2az3000dxonaheug47gv"},{"post_id":"cl5te2ayt0003xonaa7hedbdw","tag_id":"cl5te2ayw0005xona7jqj7wzp","_id":"cl5te2az9000vxona7o9id8ld"},{"post_id":"cl5te2ayt0003xonaa7hedbdw","tag_id":"cl5te2az4000hxona5zy79npf","_id":"cl5te2az9000wxonagy0g39i5"},{"post_id":"cl5te2ayt0003xonaa7hedbdw","tag_id":"cl5te2az7000nxonad5ge3nyn","_id":"cl5te2aza000zxonahu010k3z"},{"post_id":"cl5te2ayt0003xonaa7hedbdw","tag_id":"cl5te2az8000rxonag2j0gg7z","_id":"cl5te2aza0010xona0w090j3q"},{"post_id":"cl5te2ayx0006xonae1pu353e","tag_id":"cl5te2az9000uxona7w4nfvlr","_id":"cl5te2aza0013xonafjhk13o9"},{"post_id":"cl5te2ayy0007xonah169f3fm","tag_id":"cl5te2aza000yxonaevt37mfv","_id":"cl5te2azb0015xonae69dbpwy"},{"post_id":"cl5te2ayy0007xonah169f3fm","tag_id":"cl5te2aza0012xonahydc2xsq","_id":"cl5te2azb0016xonafhbz7xjg"},{"post_id":"cl5te2az1000cxonaebrq1o5m","tag_id":"cl5te2aza0014xonafwfp5g78","_id":"cl5te2azc001axonagmgsak5s"},{"post_id":"cl5te2az1000cxonaebrq1o5m","tag_id":"cl5te2azb0017xona157nbhmj","_id":"cl5te2azc001bxona95ja1s5g"},{"post_id":"cl5te2az1000cxonaebrq1o5m","tag_id":"cl5te2azb0018xonahhxahnld","_id":"cl5te2azc001dxonafup58haz"},{"post_id":"cl5te2az3000exona4hrkfviz","tag_id":"cl5te2azb0019xona1laz4sie","_id":"cl5te2azc001fxona8c78ejm2"},{"post_id":"cl5te2az3000exona4hrkfviz","tag_id":"cl5te2azc001cxonaez54h68z","_id":"cl5te2azc001gxona2v0hgfyk"},{"post_id":"cl5te2az5000ixona1eehgldw","tag_id":"cl5te2azc001exonabdo26l9e","_id":"cl5te2azd001ixona91hte5wk"},{"post_id":"cl5te2az6000kxonafw80crs8","tag_id":"cl5te2azc001hxona81wg9npl","_id":"cl5te2azd001kxonafhua9zby"},{"post_id":"cl5te2az6000kxonafw80crs8","tag_id":"cl5te2azd001jxonaf9e645av","_id":"cl5te2azd001lxona3hd8eh3b"},{"post_id":"cl5uwz99p0000kcnagvxo5g7k","tag_id":"cl5uwz99t0001kcna26vgd7o6","_id":"cl5uwz99x0003kcna9wzi6fgw"},{"post_id":"cl5xn5gnx00000gna9nxaakql","tag_id":"cl5uxajm00002cgnafwqa85lj","_id":"cl5xn5go200020gna8oxoco00"},{"post_id":"cl5xn5gnx00000gna9nxaakql","tag_id":"cl5uwz99t0001kcna26vgd7o6","_id":"cl5xn5go200030gnagebtdbx7"}],"Tag":[{"name":"CSharp","_id":"cl5te2ayw0005xona7jqj7wzp"},{"name":"WPF","_id":"cl5te2az4000hxona5zy79npf"},{"name":"UI","_id":"cl5te2az7000nxonad5ge3nyn"},{"name":"Flutter","_id":"cl5te2az8000rxonag2j0gg7z"},{"name":"Test","_id":"cl5te2az9000uxona7w4nfvlr"},{"name":"VuePress","_id":"cl5te2aza000yxonaevt37mfv"},{"name":"documenting","_id":"cl5te2aza0012xonahydc2xsq"},{"name":"flutter","_id":"cl5te2aza0014xonafwfp5g78"},{"name":"dart","_id":"cl5te2azb0017xona157nbhmj"},{"name":"ui","_id":"cl5te2azb0018xonahhxahnld"},{"name":"母语时间","_id":"cl5te2azb0019xona1laz4sie"},{"name":"半吊子哲学","_id":"cl5te2azc001cxonaez54h68z"},{"name":"Kotlin","_id":"cl5te2azc001exonabdo26l9e"},{"name":"Linux","_id":"cl5te2azc001hxona81wg9npl"},{"name":"Fedora","_id":"cl5te2azd001jxonaf9e645av"},{"name":"杂谈","_id":"cl5uwz99t0001kcna26vgd7o6"},{"name":"生活","_id":"cl5uxajm00002cgnafwqa85lj"}]}}